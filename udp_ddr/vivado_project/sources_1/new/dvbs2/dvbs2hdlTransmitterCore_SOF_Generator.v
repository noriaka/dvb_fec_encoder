// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_SOF_Generator.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_SOF_Generator
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator/PL Header Generator/PL Header Bits Generator/SOF 
// Generato
// Hierarchy Level: 6
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_SOF_Generator
          (clk,
           reset,
           enb_1_8_0,
           trigger,
           dataOut,
           validOut,
           startOfSOF);


  input   clk;
  input   reset;
  input   enb_1_8_0;
  input   trigger;
  output  dataOut;
  output  validOut;
  output  startOfSOF;


  reg  Upsample_muxsel;  // ufix1
  wire Upsample_zero;
  wire Upsample_out1;
  wire [4:0] LUTAddr;  // ufix5
  wire valid;
  wire [4:0] prelookup_idx_sat;  // ufix5
  wire [4:0] prelookup_idx;  // ufix5
  wire [25:0] SOF_Sequence_table_data;  // ufix1 [26]
  wire out;  // ufix1
  reg  SOF_Sequence_out1;  // ufix1
  wire Data_Type_Conversion_out1;
  wire Compare_To_Constant_out1;
  wire Logical_Operator_out1;

  initial begin
    SOF_Sequence_out1 = 1'b0;
  end

  // Free running, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : Upsample_cnt_process
      if (reset == 1'b1) begin
        Upsample_muxsel <= 1'b1;
      end
      else begin
        if (enb_1_8_0) begin
          Upsample_muxsel <=  ~ Upsample_muxsel;
        end
      end
    end



  assign Upsample_zero = 1'b0;



  // Upsample: Upsample by 2, Sample offset 0 
  assign Upsample_out1 = (Upsample_muxsel == 1'b1 ? trigger :
              Upsample_zero);



  dvbs2hdlTransmitterCore_SOF_Sequence_LUT_Address_Generator u_SOF_Sequence_LUT_Address_Generator (.clk(clk),
                                                                                                   .reset(reset),
                                                                                                   .enb_1_8_0(enb_1_8_0),
                                                                                                   .trigger(Upsample_out1),
                                                                                                   .LUTAddr(LUTAddr),  // ufix5
                                                                                                   .valid(valid)
                                                                                                   );

  assign prelookup_idx_sat = (LUTAddr == 5'b00000 ? 5'b00000 :
              (LUTAddr >= 5'b11001 ? 5'b11001 :
              LUTAddr));



  assign prelookup_idx = (prelookup_idx_sat > 5'b11001 ? 5'b11001 :
              prelookup_idx_sat);



  assign SOF_Sequence_table_data[0] = 1'b0;
  assign SOF_Sequence_table_data[1] = 1'b1;
  assign SOF_Sequence_table_data[2] = 1'b1;
  assign SOF_Sequence_table_data[3] = 1'b0;
  assign SOF_Sequence_table_data[4] = 1'b0;
  assign SOF_Sequence_table_data[5] = 1'b0;
  assign SOF_Sequence_table_data[6] = 1'b1;
  assign SOF_Sequence_table_data[7] = 1'b1;
  assign SOF_Sequence_table_data[8] = 1'b0;
  assign SOF_Sequence_table_data[9] = 1'b1;
  assign SOF_Sequence_table_data[10] = 1'b0;
  assign SOF_Sequence_table_data[11] = 1'b0;
  assign SOF_Sequence_table_data[12] = 1'b1;
  assign SOF_Sequence_table_data[13] = 1'b0;
  assign SOF_Sequence_table_data[14] = 1'b1;
  assign SOF_Sequence_table_data[15] = 1'b1;
  assign SOF_Sequence_table_data[16] = 1'b1;
  assign SOF_Sequence_table_data[17] = 1'b0;
  assign SOF_Sequence_table_data[18] = 1'b1;
  assign SOF_Sequence_table_data[19] = 1'b0;
  assign SOF_Sequence_table_data[20] = 1'b0;
  assign SOF_Sequence_table_data[21] = 1'b0;
  assign SOF_Sequence_table_data[22] = 1'b0;
  assign SOF_Sequence_table_data[23] = 1'b0;
  assign SOF_Sequence_table_data[24] = 1'b1;
  assign SOF_Sequence_table_data[25] = 1'b0;
  assign out = SOF_Sequence_table_data[prelookup_idx];



  always @(posedge clk)
    begin : PipelineRegister_process
      if (enb_1_8_0) begin
        SOF_Sequence_out1 <= out;
      end
    end



  assign Data_Type_Conversion_out1 = SOF_Sequence_out1;



  assign dataOut = Data_Type_Conversion_out1;

  assign validOut = valid;

  assign Compare_To_Constant_out1 = LUTAddr == 5'b00000;



  assign Logical_Operator_out1 = Compare_To_Constant_out1 & valid;



  assign startOfSOF = Logical_Operator_out1;

endmodule  // dvbs2hdlTransmitterCore_SOF_Generator

