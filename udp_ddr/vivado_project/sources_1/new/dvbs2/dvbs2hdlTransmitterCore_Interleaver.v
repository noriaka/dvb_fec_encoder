// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_Interleaver.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_Interleaver
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/Interleaver
// Hierarchy Level: 3
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_Interleaver
          (clk,
           reset,
           enb,
           dataIn,
           validIn,
           paramValid,
           modIdxIn,
           codIdxIn,
           fecframeIn,
           MODCODIn,
           dataOut,
           startOut,
           endOut,
           validOut,
           FECFrame,
           codIdx,
           modIdx,
           MODCOD,
           ready);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;
  input   validIn;
  input   paramValid;
  input   [1:0] modIdxIn;  // ufix2
  input   [3:0] codIdxIn;  // ufix4
  input   fecframeIn;
  input   [4:0] MODCODIn;  // ufix5
  output  dataOut;
  output  startOut;
  output  endOut;
  output  validOut;
  output  FECFrame;
  output  [3:0] codIdx;  // ufix4
  output  [1:0] modIdx;  // ufix2
  output  [4:0] MODCOD;  // ufix5
  output  ready;


  reg  Delay9_out1;
  reg  Delay10_out1;
  wire DVB_S2_HDL_Interleaver_out1;
  wire DVB_S2_HDL_Interleaver_out2;
  wire DVB_S2_HDL_Interleaver_out3;
  wire DVB_S2_HDL_Interleaver_out4;
  wire DVB_S2_HDL_Interleaver_out5;
  wire [3:0] DVB_S2_HDL_Interleaver_out6;  // ufix4
  wire [1:0] DVB_S2_HDL_Interleaver_out7;  // ufix2
  reg  Delay2_out1;
  reg  [7:0] Delay19_reg;  // ufix1 [8]
  wire Delay19_out1;
  reg  Delay6_out1;
  reg  [7:0] Delay5_reg;  // ufix1 [8]
  wire Delay5_out1;
  reg  Delay7_out1;
  reg  [7:0] Delay1_reg;  // ufix1 [8]
  wire Delay1_out1;
  reg  Delay8_out1;
  reg  [7:0] Delay4_reg;  // ufix1 [8]
  wire Delay4_out1;
  reg  Delay11_out1;
  reg  [7:0] Delay17_reg;  // ufix1 [8]
  wire Delay17_out1;
  reg [3:0] Delay12_out1;  // ufix4
  reg [3:0] Delay18_reg [0:7];  // ufix4 [8]
  reg [3:0] Delay18_reg_next [0:7];  // ufix4 [8]
  reg [3:0] Delay18_out1;  // ufix4
  reg [1:0] Delay13_out1;  // ufix2
  reg [1:0] Delay20_reg [0:7];  // ufix2 [8]
  reg [1:0] Delay20_reg_next [0:7];  // ufix2 [8]
  reg [1:0] Delay20_out1;  // ufix2
  reg [4:0] Unit_Delay_Enabled_Synchronous_out1;  // ufix5
  wire [4:0] Unit_Delay_Enabled_Synchronous_ectrl;  // ufix5
  reg [4:0] Delay3_reg [0:7];  // ufix5 [8]
  reg [4:0] Delay3_reg_next [0:7];  // ufix5 [8]
  reg [4:0] Delay3_out1;  // ufix5
  reg signed [31:0] Delay18_t_0_0;  // int32
  reg signed [31:0] Delay18_t_0_1;  // int32
  reg signed [31:0] Delay18_t_1;  // int32
  reg signed [31:0] Delay20_t_0_0;  // int32
  reg signed [31:0] Delay20_t_0_1;  // int32
  reg signed [31:0] Delay20_t_1;  // int32
  reg signed [31:0] Delay3_t_0_0;  // int32
  reg signed [31:0] Delay3_t_0_1;  // int32
  reg signed [31:0] Delay3_t_1;  // int32


  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= dataIn;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= validIn;
        end
      end
    end



  dvbs2hdlTransmitterCore_DVB_S2_HDL_Interleaver u_DVB_S2_HDL_Interleaver (.clk(clk),
                                                                           .reset(reset),
                                                                           .enb(enb),
                                                                           .dataIn(Delay9_out1),
                                                                           .validIn(Delay10_out1),
                                                                           .paramValid(paramValid),
                                                                           .modIdxIn(modIdxIn),  // ufix2
                                                                           .codIdxIn(codIdxIn),  // ufix4
                                                                           .fecframeIn(fecframeIn),
                                                                           .rd_dout(DVB_S2_HDL_Interleaver_out1),
                                                                           .rd_startOut(DVB_S2_HDL_Interleaver_out2),
                                                                           .rd_endOut(DVB_S2_HDL_Interleaver_out3),
                                                                           .rd_validOut(DVB_S2_HDL_Interleaver_out4),
                                                                           .fecframe(DVB_S2_HDL_Interleaver_out5),
                                                                           .codIdx(DVB_S2_HDL_Interleaver_out6),  // ufix4
                                                                           .modIdx(DVB_S2_HDL_Interleaver_out7),  // ufix2
                                                                           .ready(ready)
                                                                           );

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= DVB_S2_HDL_Interleaver_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay19_process
      if (reset == 1'b1) begin
        Delay19_reg <= {8{1'b0}};
      end
      else begin
        if (enb) begin
          Delay19_reg[0] <= Delay2_out1;
          Delay19_reg[32'sd7:32'sd1] <= Delay19_reg[32'sd6:32'sd0];
        end
      end
    end

  assign Delay19_out1 = Delay19_reg[7];



  assign dataOut = Delay19_out1;

  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= DVB_S2_HDL_Interleaver_out2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_reg <= {8{1'b0}};
      end
      else begin
        if (enb) begin
          Delay5_reg[0] <= Delay6_out1;
          Delay5_reg[32'sd7:32'sd1] <= Delay5_reg[32'sd6:32'sd0];
        end
      end
    end

  assign Delay5_out1 = Delay5_reg[7];



  assign startOut = Delay5_out1;

  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= DVB_S2_HDL_Interleaver_out3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg <= {8{1'b0}};
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Delay7_out1;
          Delay1_reg[32'sd7:32'sd1] <= Delay1_reg[32'sd6:32'sd0];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[7];



  assign endOut = Delay1_out1;

  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= DVB_S2_HDL_Interleaver_out4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_reg <= {8{1'b0}};
      end
      else begin
        if (enb) begin
          Delay4_reg[0] <= Delay8_out1;
          Delay4_reg[32'sd7:32'sd1] <= Delay4_reg[32'sd6:32'sd0];
        end
      end
    end

  assign Delay4_out1 = Delay4_reg[7];



  assign validOut = Delay4_out1;

  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out1 <= DVB_S2_HDL_Interleaver_out5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay17_process
      if (reset == 1'b1) begin
        Delay17_reg <= {8{1'b0}};
      end
      else begin
        if (enb) begin
          Delay17_reg[0] <= Delay11_out1;
          Delay17_reg[32'sd7:32'sd1] <= Delay17_reg[32'sd6:32'sd0];
        end
      end
    end

  assign Delay17_out1 = Delay17_reg[7];



  assign FECFrame = Delay17_out1;

  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay12_out1 <= DVB_S2_HDL_Interleaver_out6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay18_process
      if (reset == 1'b1) begin
        for(Delay18_t_1 = 32'sd0; Delay18_t_1 <= 32'sd7; Delay18_t_1 = Delay18_t_1 + 32'sd1) begin
          Delay18_reg[Delay18_t_1] <= 4'b0000;
        end
      end
      else begin
        if (enb) begin
          for(Delay18_t_0_1 = 32'sd0; Delay18_t_0_1 <= 32'sd7; Delay18_t_0_1 = Delay18_t_0_1 + 32'sd1) begin
            Delay18_reg[Delay18_t_0_1] <= Delay18_reg_next[Delay18_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay18_out1 = Delay18_reg[7];
    Delay18_reg_next[0] = Delay12_out1;

    for(Delay18_t_0_0 = 32'sd0; Delay18_t_0_0 <= 32'sd6; Delay18_t_0_0 = Delay18_t_0_0 + 32'sd1) begin
      Delay18_reg_next[Delay18_t_0_0 + 32'sd1] = Delay18_reg[Delay18_t_0_0];
    end

  end



  assign codIdx = Delay18_out1;

  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay13_out1 <= DVB_S2_HDL_Interleaver_out7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay20_process
      if (reset == 1'b1) begin
        for(Delay20_t_1 = 32'sd0; Delay20_t_1 <= 32'sd7; Delay20_t_1 = Delay20_t_1 + 32'sd1) begin
          Delay20_reg[Delay20_t_1] <= 2'b00;
        end
      end
      else begin
        if (enb) begin
          for(Delay20_t_0_1 = 32'sd0; Delay20_t_0_1 <= 32'sd7; Delay20_t_0_1 = Delay20_t_0_1 + 32'sd1) begin
            Delay20_reg[Delay20_t_0_1] <= Delay20_reg_next[Delay20_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay20_out1 = Delay20_reg[7];
    Delay20_reg_next[0] = Delay13_out1;

    for(Delay20_t_0_0 = 32'sd0; Delay20_t_0_0 <= 32'sd6; Delay20_t_0_0 = Delay20_t_0_0 + 32'sd1) begin
      Delay20_reg_next[Delay20_t_0_0 + 32'sd1] = Delay20_reg[Delay20_t_0_0];
    end

  end



  assign modIdx = Delay20_out1;

  assign Unit_Delay_Enabled_Synchronous_ectrl = (DVB_S2_HDL_Interleaver_out2 == 1'b0 ? Unit_Delay_Enabled_Synchronous_out1 :
              MODCODIn);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous_out1 <= Unit_Delay_Enabled_Synchronous_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        for(Delay3_t_1 = 32'sd0; Delay3_t_1 <= 32'sd7; Delay3_t_1 = Delay3_t_1 + 32'sd1) begin
          Delay3_reg[Delay3_t_1] <= 5'b00000;
        end
      end
      else begin
        if (enb) begin
          for(Delay3_t_0_1 = 32'sd0; Delay3_t_0_1 <= 32'sd7; Delay3_t_0_1 = Delay3_t_0_1 + 32'sd1) begin
            Delay3_reg[Delay3_t_0_1] <= Delay3_reg_next[Delay3_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay3_out1 = Delay3_reg[7];
    Delay3_reg_next[0] = Unit_Delay_Enabled_Synchronous_out1;

    for(Delay3_t_0_0 = 32'sd0; Delay3_t_0_0 <= 32'sd6; Delay3_t_0_0 = Delay3_t_0_0 + 32'sd1) begin
      Delay3_reg_next[Delay3_t_0_0 + 32'sd1] = Delay3_reg[Delay3_t_0_0];
    end

  end



  assign MODCOD = Delay3_out1;

endmodule  // dvbs2hdlTransmitterCore_Interleaver

