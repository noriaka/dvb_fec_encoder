// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_Store_and_Retreive_Input.v
// Created: 2024-01-10 13:49:57
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_Store_and_Retreive_Input
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/FEC Encoder/DVB-S2 BCH Encoder/Store and Retreive Input
// Hierarchy Level: 5
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_Store_and_Retreive_Input
          (clk,
           reset,
           enb,
           iwr_data,
           iwr_enb,
           iwr_addr,
           ird_addr,
           ird_valid,
           framLenDelayed,
           resetIn,
           framLenDelay,
           outrd_data,
           outRd_valid,
           ParityCalCompFlag,
           resetOut);


  input   clk;
  input   reset;
  input   enb;
  input   iwr_data;
  input   iwr_enb;
  input   [15:0] iwr_addr;  // uint16
  input   [15:0] ird_addr;  // uint16
  input   ird_valid;
  input   [15:0] framLenDelayed;  // uint16
  input   resetIn;
  output  [15:0] framLenDelay;  // uint16
  output  outrd_data;
  output  outRd_valid;
  output  ParityCalCompFlag;
  output  resetOut;


  reg  Delay_out1;
  wire Logical_Operator_out1;
  reg  Delay3_out1;
  wire Logical_Operator2_out1;
  reg  [1:0] Delay5_reg;  // ufix1 [2]
  wire Delay5_out1;
  wire switch_compare_1;
  wire Constant_out1;
  wire Constant2_out1;
  reg  Delay7_out1;
  wire Switch1_out1;
  wire Data_RAM_out1;
  reg  [1:0] Delay4_reg;  // ufix1 [2]
  wire Delay4_out1;
  wire Switch_out1;
  reg [15:0] Delay1_out1;  // uint16
  reg [15:0] Delay2_out1;  // uint16
  wire Relational_Operator1_relop1;
  wire Logical_Operator1_out1;
  reg  [1:0] Delay6_reg;  // ufix1 [2]
  wire Delay6_out1;

  // write and read input data using RAM
  // Compare input frame length with read Counter 


  assign framLenDelay = framLenDelayed;

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= ird_valid;
        end
      end
    end



  assign Logical_Operator_out1 =  ~ resetIn;



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Logical_Operator_out1;
        end
      end
    end



  assign Logical_Operator2_out1 = Delay_out1 & Delay3_out1;



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay5_reg[0] <= Logical_Operator2_out1;
          Delay5_reg[1] <= Delay5_reg[0];
        end
      end
    end

  assign Delay5_out1 = Delay5_reg[1];



  assign switch_compare_1 = Delay5_out1 > 1'b0;



  assign Constant_out1 = 1'b0;



  assign Constant2_out1 = 1'b0;



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= iwr_data;
        end
      end
    end



  assign Switch1_out1 = (iwr_enb == 1'b0 ? Constant2_out1 :
              Delay7_out1);



  dvbs2hdlTransmitterCore_SimpleDualPortRAM_singlebit #(.AddrWidth(16),
                                                        .DataWidth(1)
                                                        )
                                                      u_Data_RAM (.clk(clk),
                                                                  .enb(enb),
                                                                  .wr_din(Switch1_out1),
                                                                  .wr_addr(iwr_addr),
                                                                  .wr_en(iwr_enb),
                                                                  .rd_addr(ird_addr),
                                                                  .dout(Data_RAM_out1)
                                                                  );

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay4_reg[0] <= Data_RAM_out1;
          Delay4_reg[1] <= Delay4_reg[0];
        end
      end
    end

  assign Delay4_out1 = Delay4_reg[1];



  assign Switch_out1 = (switch_compare_1 == 1'b0 ? Constant_out1 :
              Delay4_out1);



  assign outrd_data = Switch_out1;

  assign outRd_valid = Delay5_out1;

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= ird_addr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= framLenDelayed;
        end
      end
    end



  assign Relational_Operator1_relop1 = Delay1_out1 >= Delay2_out1;



  assign Logical_Operator1_out1 = Relational_Operator1_relop1 & Logical_Operator2_out1;



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay6_reg[0] <= Logical_Operator1_out1;
          Delay6_reg[1] <= Delay6_reg[0];
        end
      end
    end

  assign Delay6_out1 = Delay6_reg[1];



  assign ParityCalCompFlag = Delay6_out1;

  assign resetOut = resetIn;

endmodule  // dvbs2hdlTransmitterCore_Store_and_Retreive_Input

