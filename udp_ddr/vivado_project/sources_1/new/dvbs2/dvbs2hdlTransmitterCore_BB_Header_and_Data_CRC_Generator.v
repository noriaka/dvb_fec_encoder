// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_BB_Header_and_Data_CRC_Generator.v
// Created: 2024-01-10 13:49:57
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_BB_Header_and_Data_CRC_Generator
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/BB Frame Generator/BB Header and Data CRC Generator
// Hierarchy Level: 4
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_BB_Header_and_Data_CRC_Generator
          (clk,
           reset,
           enb,
           dataIn,
           startIn,
           endIn,
           validIn,
           frameEnd,
           frameStart,
           TSorGS,
           DFL,
           UPL,
           SYNC,
           MODCOD,
           FECFrame,
           pktBits,
           pktValid,
           DFLOut,
           bitsOut,
           startOut,
           endOut,
           validOut,
           MODCODOut,
           FECFrameOut);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;
  input   startIn;
  input   endIn;
  input   validIn;
  input   frameEnd;
  input   frameStart;
  input   [1:0] TSorGS;  // ufix2
  input   [15:0] DFL;  // uint16
  input   [15:0] UPL;  // uint16
  input   [7:0] SYNC;  // uint8
  input   [4:0] MODCOD;  // ufix5
  input   FECFrame;
  output  pktBits;
  output  pktValid;
  output  [15:0] DFLOut;  // uint16
  output  bitsOut;
  output  startOut;
  output  endOut;
  output  validOut;
  output  [4:0] MODCODOut;  // ufix5
  output  FECFrameOut;


  wire Data_Field_Generator_out1;
  wire Data_Field_Generator_out2;
  wire Data_Field_Generator_out3;
  wire Data_Field_Generator_out4;
  reg  Delay_out1;
  reg  Delay1_out1;
  reg  Delay2_out1;
  reg  Delay3_out1;
  wire [15:0] BB_Header_Generator_out1;  // uint16
  wire BB_Header_Generator_out2;
  wire BB_Header_Generator_out3;
  wire BB_Header_Generator_out4;
  wire BB_Header_Generator_out5;
  wire [4:0] BB_Header_Generator_out6;  // ufix5
  wire BB_Header_Generator_out7;
  reg [15:0] Delay4_out1;  // uint16
  wire validAppend;
  wire Logical_Operator2_out1;
  wire Logical_Operator1_out1;
  wire Logical_Operator_out1;
  reg  Delay5_out1;
  reg  Delay6_out1;
  reg  Delay8_out1;
  reg  Delay7_out1;
  reg [4:0] Delay9_out1;  // ufix5
  reg  Delay10_out1;


  dvbs2hdlTransmitterCore_Data_Field_Generator u_Data_Field_Generator (.clk(clk),
                                                                       .reset(reset),
                                                                       .enb(enb),
                                                                       .dataIn(dataIn),
                                                                       .startIn(startIn),
                                                                       .endIn(endIn),
                                                                       .validIn(validIn),
                                                                       .frameEnd(frameEnd),
                                                                       .frameStart(frameStart),
                                                                       .UPL(UPL),  // uint16
                                                                       .pktBits(Data_Field_Generator_out1),
                                                                       .pktValid(Data_Field_Generator_out2),
                                                                       .frameStartOut(Data_Field_Generator_out3),
                                                                       .frameEndOut(Data_Field_Generator_out4)
                                                                       );

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Data_Field_Generator_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Field_Generator_out2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Field_Generator_out3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Data_Field_Generator_out4;
        end
      end
    end



  dvbs2hdlTransmitterCore_BB_Header_Generator u_BB_Header_Generator (.clk(clk),
                                                                     .reset(reset),
                                                                     .enb(enb),
                                                                     .startIn(frameStart),
                                                                     .TSorGS(TSorGS),  // ufix2
                                                                     .DFL(DFL),  // uint16
                                                                     .UPL(UPL),  // uint16
                                                                     .SYNC(SYNC),  // uint8
                                                                     .MODCOD(MODCOD),  // ufix5
                                                                     .FECFrame(FECFrame),
                                                                     .DFLOut(BB_Header_Generator_out1),  // uint16
                                                                     .bitsOut(BB_Header_Generator_out2),
                                                                     .startOut(BB_Header_Generator_out3),
                                                                     .validOut(BB_Header_Generator_out4),
                                                                     .endOut(BB_Header_Generator_out5),
                                                                     .MODCODOut(BB_Header_Generator_out6),  // ufix5
                                                                     .FECFrameOut(BB_Header_Generator_out7)
                                                                     );

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= BB_Header_Generator_out1;
        end
      end
    end



  dvbs2hdlTransmitterCore_MATLAB_Function_block u_MATLAB_Function (.clk(clk),
                                                                   .reset(reset),
                                                                   .enb(enb),
                                                                   .validIn(Delay1_out1),
                                                                   .startIn(Delay2_out1),
                                                                   .endIn(Delay3_out1),
                                                                   .DFL(Delay4_out1),  // uint16
                                                                   .validAppend(validAppend)
                                                                   );

  assign Logical_Operator2_out1 =  ~ validAppend;



  assign Logical_Operator1_out1 = Delay_out1 & Logical_Operator2_out1;



  assign pktBits = Logical_Operator1_out1;

  assign Logical_Operator_out1 = Delay1_out1 | validAppend;



  assign pktValid = Logical_Operator_out1;

  assign DFLOut = Delay4_out1;

  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= BB_Header_Generator_out2;
        end
      end
    end



  assign bitsOut = Delay5_out1;

  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= BB_Header_Generator_out3;
        end
      end
    end



  assign startOut = Delay6_out1;

  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= BB_Header_Generator_out5;
        end
      end
    end



  assign endOut = Delay8_out1;

  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= BB_Header_Generator_out4;
        end
      end
    end



  assign validOut = Delay7_out1;

  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= BB_Header_Generator_out6;
        end
      end
    end



  assign MODCODOut = Delay9_out1;

  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= BB_Header_Generator_out7;
        end
      end
    end



  assign FECFrameOut = Delay10_out1;

endmodule  // dvbs2hdlTransmitterCore_BB_Header_and_Data_CRC_Generator

