// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_Subsystem_block1.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_Subsystem_block1
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator/PL Data Scrambler/PL Scrambler Gold Sequence 
// Generator/Subsyste
// Hierarchy Level: 6
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_Subsystem_block1
          (clk,
           reset,
           enb_1_8_0,
           reset_1,
           Enable,
           xMnp131072,
           yM131072,
           xMn,
           yM0);


  input   clk;
  input   reset;
  input   enb_1_8_0;
  input   reset_1;
  input   Enable;
  output  xMnp131072;
  output  yM131072;
  output  xMn;
  output  yM0;


  wire enb_1_8_0_gated;
  wire X_PN_Generator_M_nplus131072_out1;
  reg  X_PN_Generator_M_nplus131072_out1_hold;
  wire Y_PN_Generator_M_131072_out1;
  reg  Y_PN_Generator_M_131072_out1_hold;
  wire X_PN_Generator_M_n_out1;
  reg  X_PN_Generator_M_n_out1_hold;
  wire Y_PN_Generator_M_0_out1;
  reg  Y_PN_Generator_M_0_out1_hold;

  // The initial output of these outports are set to 0 as this is an enabled subsystem


  assign enb_1_8_0_gated = Enable && enb_1_8_0;

  dvbs2hdlTransmitterCore_X_PN_Generator_M_nplus131072 u_X_PN_Generator_M_nplus131072 (.clk(clk),
                                                                                       .reset(reset),
                                                                                       .enb_1_8_0(enb_1_8_0_gated),
                                                                                       .inportReset(reset_1),
                                                                                       .PN_Sequence(X_PN_Generator_M_nplus131072_out1)
                                                                                       );

  always @(posedge clk or posedge reset)
    begin : xMnp131072_hold_process
      if (reset == 1'b1) begin
        X_PN_Generator_M_nplus131072_out1_hold <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated) begin
          X_PN_Generator_M_nplus131072_out1_hold <= X_PN_Generator_M_nplus131072_out1;
        end
      end
    end



  assign xMnp131072 = X_PN_Generator_M_nplus131072_out1_hold;

  dvbs2hdlTransmitterCore_Y_PN_Generator_M_131072 u_Y_PN_Generator_M_131072 (.clk(clk),
                                                                             .reset(reset),
                                                                             .enb_1_8_0(enb_1_8_0_gated),
                                                                             .inportReset(reset_1),
                                                                             .PN_Sequence(Y_PN_Generator_M_131072_out1)
                                                                             );

  always @(posedge clk or posedge reset)
    begin : yM131072_hold_process
      if (reset == 1'b1) begin
        Y_PN_Generator_M_131072_out1_hold <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated) begin
          Y_PN_Generator_M_131072_out1_hold <= Y_PN_Generator_M_131072_out1;
        end
      end
    end



  assign yM131072 = Y_PN_Generator_M_131072_out1_hold;

  dvbs2hdlTransmitterCore_X_PN_Generator_M_n u_X_PN_Generator_M_n (.clk(clk),
                                                                   .reset(reset),
                                                                   .enb_1_8_0(enb_1_8_0_gated),
                                                                   .inportReset(reset_1),
                                                                   .PN_Sequence(X_PN_Generator_M_n_out1)
                                                                   );

  always @(posedge clk or posedge reset)
    begin : xMn_hold_process
      if (reset == 1'b1) begin
        X_PN_Generator_M_n_out1_hold <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated) begin
          X_PN_Generator_M_n_out1_hold <= X_PN_Generator_M_n_out1;
        end
      end
    end



  assign xMn = X_PN_Generator_M_n_out1_hold;

  dvbs2hdlTransmitterCore_Y_PN_Generator_M_0 u_Y_PN_Generator_M_0 (.clk(clk),
                                                                   .reset(reset),
                                                                   .enb_1_8_0(enb_1_8_0_gated),
                                                                   .inportReset(reset_1),
                                                                   .PN_Sequence(Y_PN_Generator_M_0_out1)
                                                                   );

  always @(posedge clk or posedge reset)
    begin : yM0_hold_process
      if (reset == 1'b1) begin
        Y_PN_Generator_M_0_out1_hold <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated) begin
          Y_PN_Generator_M_0_out1_hold <= Y_PN_Generator_M_0_out1;
        end
      end
    end



  assign yM0 = Y_PN_Generator_M_0_out1_hold;

endmodule  // dvbs2hdlTransmitterCore_Subsystem_block1

