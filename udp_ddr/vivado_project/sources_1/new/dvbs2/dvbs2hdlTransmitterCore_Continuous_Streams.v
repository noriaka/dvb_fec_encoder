// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_Continuous_Streams.v
// Created: 2024-01-10 13:49:57
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_Continuous_Streams
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/BB Frame Generator/BB Header and Data CRC Generator/Data Field 
// Generator/Continuous Stream
// Hierarchy Level: 6
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_Continuous_Streams
          (clk,
           reset,
           enb,
           dataIn,
           validIn,
           frameEnd,
           frameStart,
           dataOut,
           validOut,
           frameEndOut,
           frameStartOut);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;
  input   validIn;
  input   frameEnd;
  input   frameStart;
  output  dataOut;
  output  validOut;
  output  frameEndOut;
  output  frameStartOut;


  reg  [18:0] Delay_reg;  // ufix1 [19]
  wire Delay_out1;
  reg  [18:0] Delay1_reg;  // ufix1 [19]
  wire Delay1_out1;
  reg  [18:0] Delay2_reg;  // ufix1 [19]
  wire Delay2_out1;
  reg  [18:0] Delay3_reg;  // ufix1 [19]
  wire Delay3_out1;


  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg <= {19{1'b0}};
      end
      else begin
        if (enb) begin
          Delay_reg[0] <= dataIn;
          Delay_reg[32'sd18:32'sd1] <= Delay_reg[32'sd17:32'sd0];
        end
      end
    end

  assign Delay_out1 = Delay_reg[18];



  assign dataOut = Delay_out1;

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg <= {19{1'b0}};
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= validIn;
          Delay1_reg[32'sd18:32'sd1] <= Delay1_reg[32'sd17:32'sd0];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[18];



  assign validOut = Delay1_out1;

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_reg <= {19{1'b0}};
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= frameEnd;
          Delay2_reg[32'sd18:32'sd1] <= Delay2_reg[32'sd17:32'sd0];
        end
      end
    end

  assign Delay2_out1 = Delay2_reg[18];



  assign frameEndOut = Delay2_out1;

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_reg <= {19{1'b0}};
      end
      else begin
        if (enb) begin
          Delay3_reg[0] <= frameStart;
          Delay3_reg[32'sd18:32'sd1] <= Delay3_reg[32'sd17:32'sd0];
        end
      end
    end

  assign Delay3_out1 = Delay3_reg[18];



  assign frameStartOut = Delay3_out1;

endmodule  // dvbs2hdlTransmitterCore_Continuous_Streams

