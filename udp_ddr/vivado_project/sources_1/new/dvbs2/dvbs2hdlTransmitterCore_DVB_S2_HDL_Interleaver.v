// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_DVB_S2_HDL_Interleaver.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_DVB_S2_HDL_Interleaver
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/Interleaver/DVB-S2 HDL Interleaver
// Hierarchy Level: 4
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_DVB_S2_HDL_Interleaver
          (clk,
           reset,
           enb,
           dataIn,
           validIn,
           paramValid,
           modIdxIn,
           codIdxIn,
           fecframeIn,
           rd_dout,
           rd_startOut,
           rd_endOut,
           rd_validOut,
           fecframe,
           codIdx,
           modIdx,
           ready);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;
  input   validIn;
  input   paramValid;
  input   [1:0] modIdxIn;  // ufix2
  input   [3:0] codIdxIn;  // ufix4
  input   fecframeIn;
  output  rd_dout;
  output  rd_startOut;
  output  rd_endOut;
  output  rd_validOut;
  output  fecframe;
  output  [3:0] codIdx;  // ufix4
  output  [1:0] modIdx;  // ufix2
  output  ready;


  reg  Unit_Delay_Enabled_Synchronous1_out1;
  wire Unit_Delay_Enabled_Synchronous1_ectrl;
  wire dataOut;
  wire validOut;
  reg  Delay1_out1;
  reg  Delay2_out1;
  reg  Delay_out1;
  reg  Delay20_out1;
  reg  Delay3_out1;
  reg  Delay21_out1;
  reg  Delay6_out1;
  reg [1:0] Unit_Delay_Enabled_Synchronous_out1;  // ufix2
  wire [1:0] Unit_Delay_Enabled_Synchronous_ectrl;  // ufix2
  reg [1:0] Delay22_out1;  // ufix2
  reg [1:0] Delay4_out1;  // ufix2
  reg [3:0] Unit_Delay_Enabled_Synchronous2_out1;  // ufix4
  wire [3:0] Unit_Delay_Enabled_Synchronous2_ectrl;  // ufix4
  reg [3:0] Delay23_out1;  // ufix4
  reg [3:0] Delay5_out1;  // ufix4
  wire RAM_Address_Generator_out1;
  wire [16:0] RAM_Address_Generator_out2;  // ufix17
  wire RAM_Address_Generator_out3;
  wire [17:0] RAM_Address_Generator_out4;  // ufix18
  wire RAM_Address_Generator_out5;
  wire RAM_Address_Generator_out6;
  wire RAM_Address_Generator_out7;
  wire [3:0] RAM_Address_Generator_out8;  // ufix4
  wire RAM_Address_Generator_out9;
  wire [1:0] RAM_Address_Generator_out10;  // ufix2
  reg  Delay7_out1;
  reg [16:0] Delay8_out1;  // ufix17
  reg  Delay9_out1;
  reg [17:0] Delay10_out1;  // ufix18
  reg  Delay11_out1;
  reg  Delay12_out1;
  reg  Delay13_out1;
  wire RAM_out1;
  wire RAM_out2;
  wire RAM_out3;
  wire RAM_out4;
  wire switch_compare_1;
  wire Constant1_out1;
  wire Switch_out1;
  reg  Delay30_out1;
  reg  Delay29_out1;
  reg  Delay28_out1;
  reg  Delay27_out1;
  reg  Delay15_out1;
  reg  fecframeReg_out1;
  wire fecframeReg_ectrl;
  reg  [3:0] Delay17_reg;  // ufix1 [4]
  wire Delay17_out1;
  reg  Delay25_out1;
  reg [3:0] Delay14_out1;  // ufix4
  reg [3:0] codIdxReg_out1;  // ufix4
  wire [3:0] codIdxReg_ectrl;  // ufix4
  reg [3:0] Delay16_reg [0:3];  // ufix4 [4]
  reg [3:0] Delay16_reg_next [0:3];  // ufix4 [4]
  reg [3:0] Delay16_out1;  // ufix4
  reg [3:0] Delay26_out1;  // ufix4
  reg [1:0] Delay19_out1;  // ufix2
  reg [1:0] modIdxReg_out1;  // ufix2
  wire [1:0] modIdxReg_ectrl;  // ufix2
  reg [1:0] Delay18_reg [0:3];  // ufix2 [4]
  reg [1:0] Delay18_reg_next [0:3];  // ufix2 [4]
  reg [1:0] Delay18_out1;  // ufix2
  reg [1:0] Delay24_out1;  // ufix2
  reg signed [31:0] Delay16_t_0_0;  // int32
  reg signed [31:0] Delay16_t_0_1;  // int32
  reg signed [31:0] Delay16_t_1;  // int32
  reg signed [31:0] Delay18_t_0_0;  // int32
  reg signed [31:0] Delay18_t_0_1;  // int32
  reg signed [31:0] Delay18_t_1;  // int32


  assign Unit_Delay_Enabled_Synchronous1_ectrl = (paramValid == 1'b0 ? Unit_Delay_Enabled_Synchronous1_out1 :
              fecframeIn);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous1_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous1_out1 <= Unit_Delay_Enabled_Synchronous1_ectrl;
        end
      end
    end



  dvbs2hdlTransmitterCore_Discard_Out_of_Frame_samples u_Discard_Out_of_Frame_samples (.clk(clk),
                                                                                       .reset(reset),
                                                                                       .enb(enb),
                                                                                       .dataIn(dataIn),
                                                                                       .valid(validIn),
                                                                                       .reset_1(paramValid),
                                                                                       .fec(Unit_Delay_Enabled_Synchronous1_out1),
                                                                                       .dataOut(dataOut),
                                                                                       .validOut(validOut)
                                                                                       );

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= dataOut;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= validOut;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= paramValid;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay20_process
      if (reset == 1'b1) begin
        Delay20_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay20_out1 <= Delay_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Delay20_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay21_process
      if (reset == 1'b1) begin
        Delay21_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay21_out1 <= Unit_Delay_Enabled_Synchronous1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Delay21_out1;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous_ectrl = (paramValid == 1'b0 ? Unit_Delay_Enabled_Synchronous_out1 :
              modIdxIn);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous_out1 <= Unit_Delay_Enabled_Synchronous_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay22_process
      if (reset == 1'b1) begin
        Delay22_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay22_out1 <= Unit_Delay_Enabled_Synchronous_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Delay22_out1;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous2_ectrl = (paramValid == 1'b0 ? Unit_Delay_Enabled_Synchronous2_out1 :
              codIdxIn);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous2_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous2_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous2_out1 <= Unit_Delay_Enabled_Synchronous2_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay23_process
      if (reset == 1'b1) begin
        Delay23_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay23_out1 <= Unit_Delay_Enabled_Synchronous2_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Delay23_out1;
        end
      end
    end



  dvbs2hdlTransmitterCore_RAM_Address_Generator u_RAM_Address_Generator (.clk(clk),
                                                                         .reset(reset),
                                                                         .enb(enb),
                                                                         .dataIn(Delay1_out1),
                                                                         .validIn(Delay2_out1),
                                                                         .paramValid(Delay3_out1),
                                                                         .fecframeIn(Delay6_out1),
                                                                         .modIdxIn(Delay4_out1),  // ufix2
                                                                         .codIdxIn(Delay5_out1),  // ufix4
                                                                         .dataOut(RAM_Address_Generator_out1),
                                                                         .writeAddr(RAM_Address_Generator_out2),  // ufix17
                                                                         .writeEnable(RAM_Address_Generator_out3),
                                                                         .readAddr(RAM_Address_Generator_out4),  // ufix18
                                                                         .readValid(RAM_Address_Generator_out5),
                                                                         .readEnd(RAM_Address_Generator_out6),
                                                                         .readStart(RAM_Address_Generator_out7),
                                                                         .codIdx(RAM_Address_Generator_out8),  // ufix4
                                                                         .fecframe(RAM_Address_Generator_out9),
                                                                         .modidx(RAM_Address_Generator_out10)  // ufix2
                                                                         );

  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= RAM_Address_Generator_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 17'b00000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= RAM_Address_Generator_out2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= RAM_Address_Generator_out3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 18'b000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= RAM_Address_Generator_out4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out1 <= RAM_Address_Generator_out5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay12_out1 <= RAM_Address_Generator_out6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay13_out1 <= RAM_Address_Generator_out7;
        end
      end
    end



  dvbs2hdlTransmitterCore_RAM u_RAM (.clk(clk),
                                     .reset(reset),
                                     .enb(enb),
                                     .wr_din(Delay7_out1),
                                     .wr_addr(Delay8_out1),  // ufix17
                                     .wr_en(Delay9_out1),
                                     .rd_addr(Delay10_out1),  // ufix18
                                     .rd_valid(Delay11_out1),
                                     .rd_end(Delay12_out1),
                                     .rd_start(Delay13_out1),
                                     .rd_dout(RAM_out1),
                                     .rd_startOut(RAM_out2),
                                     .rd_endOut(RAM_out3),
                                     .rd_validOut(RAM_out4)
                                     );

  assign switch_compare_1 = RAM_out4 > 1'b0;



  assign Constant1_out1 = 1'b0;



  assign Switch_out1 = (switch_compare_1 == 1'b0 ? Constant1_out1 :
              RAM_out1);



  always @(posedge clk or posedge reset)
    begin : Delay30_process
      if (reset == 1'b1) begin
        Delay30_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay30_out1 <= Switch_out1;
        end
      end
    end



  assign rd_dout = Delay30_out1;

  always @(posedge clk or posedge reset)
    begin : Delay29_process
      if (reset == 1'b1) begin
        Delay29_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay29_out1 <= RAM_out2;
        end
      end
    end



  assign rd_startOut = Delay29_out1;

  always @(posedge clk or posedge reset)
    begin : Delay28_process
      if (reset == 1'b1) begin
        Delay28_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay28_out1 <= RAM_out3;
        end
      end
    end



  assign rd_endOut = Delay28_out1;

  always @(posedge clk or posedge reset)
    begin : Delay27_process
      if (reset == 1'b1) begin
        Delay27_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay27_out1 <= RAM_out4;
        end
      end
    end



  assign rd_validOut = Delay27_out1;

  always @(posedge clk or posedge reset)
    begin : Delay15_process
      if (reset == 1'b1) begin
        Delay15_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay15_out1 <= RAM_Address_Generator_out9;
        end
      end
    end



  assign fecframeReg_ectrl = (Delay13_out1 == 1'b0 ? fecframeReg_out1 :
              Delay15_out1);



  always @(posedge clk or posedge reset)
    begin : fecframeReg_lowered_process
      if (reset == 1'b1) begin
        fecframeReg_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          fecframeReg_out1 <= fecframeReg_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay17_process
      if (reset == 1'b1) begin
        Delay17_reg <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          Delay17_reg[0] <= fecframeReg_out1;
          Delay17_reg[32'sd3:32'sd1] <= Delay17_reg[32'sd2:32'sd0];
        end
      end
    end

  assign Delay17_out1 = Delay17_reg[3];



  always @(posedge clk or posedge reset)
    begin : Delay25_process
      if (reset == 1'b1) begin
        Delay25_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay25_out1 <= Delay17_out1;
        end
      end
    end



  assign fecframe = Delay25_out1;

  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay14_out1 <= RAM_Address_Generator_out8;
        end
      end
    end



  assign codIdxReg_ectrl = (Delay13_out1 == 1'b0 ? codIdxReg_out1 :
              Delay14_out1);



  always @(posedge clk or posedge reset)
    begin : codIdxReg_lowered_process
      if (reset == 1'b1) begin
        codIdxReg_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          codIdxReg_out1 <= codIdxReg_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay16_process
      if (reset == 1'b1) begin
        for(Delay16_t_1 = 32'sd0; Delay16_t_1 <= 32'sd3; Delay16_t_1 = Delay16_t_1 + 32'sd1) begin
          Delay16_reg[Delay16_t_1] <= 4'b0000;
        end
      end
      else begin
        if (enb) begin
          for(Delay16_t_0_1 = 32'sd0; Delay16_t_0_1 <= 32'sd3; Delay16_t_0_1 = Delay16_t_0_1 + 32'sd1) begin
            Delay16_reg[Delay16_t_0_1] <= Delay16_reg_next[Delay16_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay16_out1 = Delay16_reg[3];
    Delay16_reg_next[0] = codIdxReg_out1;

    for(Delay16_t_0_0 = 32'sd0; Delay16_t_0_0 <= 32'sd2; Delay16_t_0_0 = Delay16_t_0_0 + 32'sd1) begin
      Delay16_reg_next[Delay16_t_0_0 + 32'sd1] = Delay16_reg[Delay16_t_0_0];
    end

  end



  always @(posedge clk or posedge reset)
    begin : Delay26_process
      if (reset == 1'b1) begin
        Delay26_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay26_out1 <= Delay16_out1;
        end
      end
    end



  assign codIdx = Delay26_out1;

  always @(posedge clk or posedge reset)
    begin : Delay19_process
      if (reset == 1'b1) begin
        Delay19_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay19_out1 <= RAM_Address_Generator_out10;
        end
      end
    end



  assign modIdxReg_ectrl = (Delay13_out1 == 1'b0 ? modIdxReg_out1 :
              Delay19_out1);



  always @(posedge clk or posedge reset)
    begin : modIdxReg_lowered_process
      if (reset == 1'b1) begin
        modIdxReg_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          modIdxReg_out1 <= modIdxReg_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay18_process
      if (reset == 1'b1) begin
        for(Delay18_t_1 = 32'sd0; Delay18_t_1 <= 32'sd3; Delay18_t_1 = Delay18_t_1 + 32'sd1) begin
          Delay18_reg[Delay18_t_1] <= 2'b00;
        end
      end
      else begin
        if (enb) begin
          for(Delay18_t_0_1 = 32'sd0; Delay18_t_0_1 <= 32'sd3; Delay18_t_0_1 = Delay18_t_0_1 + 32'sd1) begin
            Delay18_reg[Delay18_t_0_1] <= Delay18_reg_next[Delay18_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay18_out1 = Delay18_reg[3];
    Delay18_reg_next[0] = modIdxReg_out1;

    for(Delay18_t_0_0 = 32'sd0; Delay18_t_0_0 <= 32'sd2; Delay18_t_0_0 = Delay18_t_0_0 + 32'sd1) begin
      Delay18_reg_next[Delay18_t_0_0 + 32'sd1] = Delay18_reg[Delay18_t_0_0];
    end

  end



  always @(posedge clk or posedge reset)
    begin : Delay24_process
      if (reset == 1'b1) begin
        Delay24_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay24_out1 <= Delay18_out1;
        end
      end
    end



  assign modIdx = Delay24_out1;

  dvbs2hdlTransmitterCore_MATLAB_Function_block2 u_MATLAB_Function (.clk(clk),
                                                                    .reset(reset),
                                                                    .enb(enb),
                                                                    .valid(validIn),
                                                                    .start(paramValid),
                                                                    .fecFrameIn(fecframeIn),
                                                                    .modIn(modIdxIn),  // ufix2
                                                                    .ready(ready)
                                                                    );

endmodule  // dvbs2hdlTransmitterCore_DVB_S2_HDL_Interleaver

