// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_PL_Data_FIFO.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_PL_Data_FIFO
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator/RAM FIFO/PL Data FIFO
// Hierarchy Level: 5
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_PL_Data_FIFO
          (clk,
           reset,
           enb_1_8_0,
           endOfPilotBlk,
           endOfPLHeader,
           dataIn_re,
           dataIn_im,
           startIn,
           validIn,
           frameLength,
           endOf16Slots,
           dataOut_re,
           dataOut_im,
           validOut,
           dummyData_re,
           dummyData_im,
           dummyValid,
           dummyHeaderSrt,
           dummyHeaderEnd,
           nextFrameReady);


  input   clk;
  input   reset;
  input   enb_1_8_0;
  input   endOfPilotBlk;
  input   endOfPLHeader;
  input   signed [17:0] dataIn_re;  // sfix18_En16
  input   signed [17:0] dataIn_im;  // sfix18_En16
  input   startIn;
  input   validIn;
  input   [14:0] frameLength;  // ufix15
  output  endOf16Slots;
  output  signed [17:0] dataOut_re;  // sfix18_En16
  output  signed [17:0] dataOut_im;  // sfix18_En16
  output  validOut;
  output  signed [17:0] dummyData_re;  // sfix18_En16
  output  signed [17:0] dummyData_im;  // sfix18_En16
  output  dummyValid;
  output  dummyHeaderSrt;
  output  dummyHeaderEnd;
  output  nextFrameReady;


  wire endOutm1;
  wire endOutFrame;
  wire [14:0] Frame_Length_FIFO_out1;  // ufix15
  wire startOutFrame;
  wire endOutFramem2;
  wire endOut16Slots;
  wire validOut_1;
  wire stateControl;
  reg  [1:0] delayMatch_reg;  // ufix1 [2]
  wire stateControl_1;
  wire enb_1_8_0_gated;
  reg  Delay2_out1;
  wire Logical_Operator5_out1;
  wire stateControl_3;
  reg  [1:0] delayMatch1_reg;  // ufix1 [2]
  wire stateControl_4;
  wire enb_1_8_0_gated_1;
  reg  Delay1_out1;
  wire Logical_Operator4_out1;
  wire [15:0] count_step;  // uint16
  reg [15:0] delayMatch2_reg [0:1];  // ufix16 [2]
  wire [15:0] delayMatch2_reg_next [0:1];  // ufix16 [2]
  wire [15:0] count_step_1;  // uint16
  wire [15:0] count_from;  // uint16
  reg [15:0] delayMatch3_reg [0:1];  // ufix16 [2]
  wire [15:0] delayMatch3_reg_next [0:1];  // ufix16 [2]
  wire [15:0] count_from_1;  // uint16
  wire stateControl_5;
  reg  [1:0] delayMatch4_reg;  // ufix1 [2]
  wire stateControl_6;
  wire enb_1_8_0_gated_2;
  reg [15:0] HDL_Counter2_out1;  // uint16
  wire [15:0] count;  // uint16
  wire need_to_wrap;
  wire [15:0] count_value;  // uint16
  wire [15:0] count_1;  // uint16
  wire [15:0] count_step_2;  // uint16
  reg [15:0] delayMatch5_reg [0:1];  // ufix16 [2]
  wire [15:0] delayMatch5_reg_next [0:1];  // ufix16 [2]
  wire [15:0] count_step_3;  // uint16
  wire [15:0] count_from_2;  // uint16
  reg [15:0] delayMatch6_reg [0:1];  // ufix16 [2]
  wire [15:0] delayMatch6_reg_next [0:1];  // ufix16 [2]
  wire [15:0] count_from_3;  // uint16
  wire stateControl_7;
  reg  [1:0] delayMatch7_reg;  // ufix1 [2]
  wire stateControl_8;
  wire enb_1_8_0_gated_3;
  reg [15:0] HDL_Counter3_out1;  // uint16
  wire [15:0] count_2;  // uint16
  wire need_to_wrap_1;
  wire [15:0] count_value_1;  // uint16
  wire [15:0] count_3;  // uint16
  wire signed [17:0] Simple_Dual_Port_RAM_out1_re;  // sfix18_En16
  wire signed [17:0] Simple_Dual_Port_RAM_out1_im;  // sfix18_En16
  wire stateControl_9;
  reg  [1:0] delayMatch8_reg;  // ufix1 [2]
  wire stateControl_10;
  wire enb_1_8_0_gated_4;
  reg  Delay9_out1;
  reg [14:0] Unit_Delay_Enabled_Synchronous_out1;  // ufix15
  wire [14:0] Unit_Delay_Enabled_Synchronous_ectrl;  // ufix15
  wire stateControl_11;
  reg  [1:0] delayMatch12_reg;  // ufix1 [2]
  wire stateControl_12;
  wire enb_1_8_0_gated_5;
  reg  Delay4_out1;
  wire stateControl_13;
  reg  [1:0] delayMatch9_reg;  // ufix1 [2]
  wire stateControl_14;
  wire enb_1_8_0_gated_6;
  reg [14:0] Delay3_reg [0:1];  // ufix15 [2]
  wire [14:0] Delay3_reg_next [0:1];  // ufix15 [2]
  wire [14:0] Delay3_out1;  // ufix15
  wire endOut;
  wire Logical_Operator6_out1;
  wire Logical_Operator2_out1;
  wire Logical_Operator3_out1;
  wire [7:0] count_step_4;  // uint8
  reg [7:0] delayMatch10_reg [0:1];  // ufix8 [2]
  wire [7:0] delayMatch10_reg_next [0:1];  // ufix8 [2]
  wire [7:0] count_step_5;  // uint8
  wire stateControl_15;
  reg  [1:0] delayMatch11_reg;  // ufix1 [2]
  wire stateControl_16;
  wire enb_1_8_0_gated_7;
  reg [7:0] nFramesInRAM_out1;  // uint8
  wire [7:0] count_4;  // uint8
  wire [7:0] count_5;  // uint8
  wire [7:0] count_value_2;  // uint8
  wire [7:0] count_6;  // uint8
  wire Compare_To_Constant_out1;
  wire Logical_Operator7_out1;
  wire Unit_Delay_Enabled_Resettable_Synchronous_iv;
  reg  [1:0] delayMatch13_reg;  // ufix1 [2]
  wire Unit_Delay_Enabled_Resettable_Synchronous_iv_1;
  wire stateControl_17;
  reg  [1:0] delayMatch14_reg;  // ufix1 [2]
  wire stateControl_18;
  wire enb_1_8_0_gated_8;
  wire validm2;
  wire Logical_Operator9_out1;
  wire Logical_Operator1_out1;
  wire Logical_Operator_out1;
  wire Logical_Operator8_out1;
  reg  Unit_Delay_Enabled_Resettable_Synchronous_out1;
  wire Unit_Delay_Enabled_Resettable_Synchronous_ectrl;
  wire Unit_Delay_Enabled_Resettable_Synchronous_toDelay;
  reg  [1:0] Delay5_reg;  // ufix1 [2]
  wire Delay5_out1;
  wire signed [17:0] Dummy_Frame_Generator_out1_re;  // sfix18_En16
  wire signed [17:0] Dummy_Frame_Generator_out1_im;  // sfix18_En16
  wire valid;
  wire Dummy_Frame_Generator_out4;
  wire Dummy_Frame_Generator_out5;
  wire valid_1;
  reg signed [31:0] delayMatch2_t_0_0;  // int32
  reg signed [31:0] delayMatch2_t_1;  // int32
  reg signed [31:0] delayMatch3_t_0_0;  // int32
  reg signed [31:0] delayMatch3_t_1;  // int32
  reg signed [31:0] delayMatch5_t_0_0;  // int32
  reg signed [31:0] delayMatch5_t_1;  // int32
  reg signed [31:0] delayMatch6_t_0_0;  // int32
  reg signed [31:0] delayMatch6_t_1;  // int32
  reg signed [31:0] Delay3_t_0_0;  // int32
  reg signed [31:0] Delay3_t_1;  // int32
  reg signed [31:0] delayMatch10_t_0_0;  // int32
  reg signed [31:0] delayMatch10_t_1;  // int32


  assign endOutm1 = endOfPilotBlk;

  dvbs2hdlTransmitterCore_Frame_Length_FIFO u_Frame_Length_FIFO (.clk(clk),
                                                                 .reset(reset),
                                                                 .enb_1_8_0(enb_1_8_0),
                                                                 .dataIn(frameLength),  // ufix15
                                                                 .validIn(startIn),
                                                                 .pop(endOutFrame),
                                                                 .dataOut(Frame_Length_FIFO_out1)  // ufix15
                                                                 );

  dvbs2hdlTransmitterCore_Out_Frame_Count u_Out_Frame_Count (.clk(clk),
                                                             .reset(reset),
                                                             .enb_1_8_0(enb_1_8_0),
                                                             .endOfPLHeader(endOfPLHeader),
                                                             .endOfPilotBlk(endOutm1),
                                                             .frameLength(Frame_Length_FIFO_out1),  // ufix15
                                                             .startOutFrame(startOutFrame),
                                                             .endOutFrame(endOutFrame),
                                                             .endOutFramem2(endOutFramem2),
                                                             .endOut16Slots(endOut16Slots),
                                                             .validOut(validOut_1)
                                                             );

  assign stateControl = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch_reg[0] <= stateControl;
          delayMatch_reg[1] <= delayMatch_reg[0];
        end
      end
    end

  assign stateControl_1 = delayMatch_reg[1];



  assign enb_1_8_0_gated = stateControl_1 && enb_1_8_0;

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated) begin
          Delay2_out1 <= endOutFrame;
        end
      end
    end



  assign Logical_Operator5_out1 =  ~ Delay2_out1;



  assign stateControl_3 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        delayMatch1_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch1_reg[0] <= stateControl_3;
          delayMatch1_reg[1] <= delayMatch1_reg[0];
        end
      end
    end

  assign stateControl_4 = delayMatch1_reg[1];



  assign enb_1_8_0_gated_1 = stateControl_4 && enb_1_8_0;

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated_1) begin
          Delay1_out1 <= endOut16Slots;
        end
      end
    end



  assign Logical_Operator4_out1 = Logical_Operator5_out1 & Delay1_out1;



  assign endOf16Slots = Logical_Operator4_out1;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 65535
  assign count_step = 16'b0000000000000001;



  always @(posedge clk or posedge reset)
    begin : delayMatch2_process
      if (reset == 1'b1) begin
        for(delayMatch2_t_1 = 32'sd0; delayMatch2_t_1 <= 32'sd1; delayMatch2_t_1 = delayMatch2_t_1 + 32'sd1) begin
          delayMatch2_reg[delayMatch2_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb_1_8_0) begin
          for(delayMatch2_t_0_0 = 32'sd0; delayMatch2_t_0_0 <= 32'sd1; delayMatch2_t_0_0 = delayMatch2_t_0_0 + 32'sd1) begin
            delayMatch2_reg[delayMatch2_t_0_0] <= delayMatch2_reg_next[delayMatch2_t_0_0];
          end
        end
      end
    end

  assign count_step_1 = delayMatch2_reg[1];
  assign delayMatch2_reg_next[0] = count_step;
  assign delayMatch2_reg_next[1] = delayMatch2_reg[0];



  assign count_from = 16'b0000000000000000;



  always @(posedge clk or posedge reset)
    begin : delayMatch3_process
      if (reset == 1'b1) begin
        for(delayMatch3_t_1 = 32'sd0; delayMatch3_t_1 <= 32'sd1; delayMatch3_t_1 = delayMatch3_t_1 + 32'sd1) begin
          delayMatch3_reg[delayMatch3_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb_1_8_0) begin
          for(delayMatch3_t_0_0 = 32'sd0; delayMatch3_t_0_0 <= 32'sd1; delayMatch3_t_0_0 = delayMatch3_t_0_0 + 32'sd1) begin
            delayMatch3_reg[delayMatch3_t_0_0] <= delayMatch3_reg_next[delayMatch3_t_0_0];
          end
        end
      end
    end

  assign count_from_1 = delayMatch3_reg[1];
  assign delayMatch3_reg_next[0] = count_from;
  assign delayMatch3_reg_next[1] = delayMatch3_reg[0];



  assign stateControl_5 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch4_process
      if (reset == 1'b1) begin
        delayMatch4_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch4_reg[0] <= stateControl_5;
          delayMatch4_reg[1] <= delayMatch4_reg[0];
        end
      end
    end

  assign stateControl_6 = delayMatch4_reg[1];



  assign enb_1_8_0_gated_2 = stateControl_6 && enb_1_8_0;

  assign count = HDL_Counter2_out1 + count_step_1;



  assign need_to_wrap = HDL_Counter2_out1 == 16'b1111111111111111;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from_1);



  assign count_1 = (validIn == 1'b0 ? HDL_Counter2_out1 :
              count_value);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter2_process
      if (reset == 1'b1) begin
        HDL_Counter2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_8_0_gated_2) begin
          HDL_Counter2_out1 <= count_1;
        end
      end
    end



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 65535
  assign count_step_2 = 16'b0000000000000001;



  always @(posedge clk or posedge reset)
    begin : delayMatch5_process
      if (reset == 1'b1) begin
        for(delayMatch5_t_1 = 32'sd0; delayMatch5_t_1 <= 32'sd1; delayMatch5_t_1 = delayMatch5_t_1 + 32'sd1) begin
          delayMatch5_reg[delayMatch5_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb_1_8_0) begin
          for(delayMatch5_t_0_0 = 32'sd0; delayMatch5_t_0_0 <= 32'sd1; delayMatch5_t_0_0 = delayMatch5_t_0_0 + 32'sd1) begin
            delayMatch5_reg[delayMatch5_t_0_0] <= delayMatch5_reg_next[delayMatch5_t_0_0];
          end
        end
      end
    end

  assign count_step_3 = delayMatch5_reg[1];
  assign delayMatch5_reg_next[0] = count_step_2;
  assign delayMatch5_reg_next[1] = delayMatch5_reg[0];



  assign count_from_2 = 16'b0000000000000000;



  always @(posedge clk or posedge reset)
    begin : delayMatch6_process
      if (reset == 1'b1) begin
        for(delayMatch6_t_1 = 32'sd0; delayMatch6_t_1 <= 32'sd1; delayMatch6_t_1 = delayMatch6_t_1 + 32'sd1) begin
          delayMatch6_reg[delayMatch6_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb_1_8_0) begin
          for(delayMatch6_t_0_0 = 32'sd0; delayMatch6_t_0_0 <= 32'sd1; delayMatch6_t_0_0 = delayMatch6_t_0_0 + 32'sd1) begin
            delayMatch6_reg[delayMatch6_t_0_0] <= delayMatch6_reg_next[delayMatch6_t_0_0];
          end
        end
      end
    end

  assign count_from_3 = delayMatch6_reg[1];
  assign delayMatch6_reg_next[0] = count_from_2;
  assign delayMatch6_reg_next[1] = delayMatch6_reg[0];



  assign stateControl_7 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch7_process
      if (reset == 1'b1) begin
        delayMatch7_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch7_reg[0] <= stateControl_7;
          delayMatch7_reg[1] <= delayMatch7_reg[0];
        end
      end
    end

  assign stateControl_8 = delayMatch7_reg[1];



  assign enb_1_8_0_gated_3 = stateControl_8 && enb_1_8_0;

  assign count_2 = HDL_Counter3_out1 + count_step_3;



  assign need_to_wrap_1 = HDL_Counter3_out1 == 16'b1111111111111111;



  assign count_value_1 = (need_to_wrap_1 == 1'b0 ? count_2 :
              count_from_3);



  assign count_3 = (validOut_1 == 1'b0 ? HDL_Counter3_out1 :
              count_value_1);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter3_process
      if (reset == 1'b1) begin
        HDL_Counter3_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_8_0_gated_3) begin
          HDL_Counter3_out1 <= count_3;
        end
      end
    end



  dvbs2hdlTransmitterCore_SimpleDualPortRAM_generic_block1 #(.AddrWidth(16),
                                                             .DataWidth(18)
                                                             )
                                                           u_Simple_Dual_Port_RAM (.clk(clk),
                                                                                   .enb_1_8_0(enb_1_8_0),
                                                                                   .wr_din_re(dataIn_re),
                                                                                   .wr_din_im(dataIn_im),
                                                                                   .wr_addr(HDL_Counter2_out1),
                                                                                   .wr_en(validIn),
                                                                                   .rd_addr(HDL_Counter3_out1),
                                                                                   .dout_re(Simple_Dual_Port_RAM_out1_re),
                                                                                   .dout_im(Simple_Dual_Port_RAM_out1_im)
                                                                                   );

  assign dataOut_re = Simple_Dual_Port_RAM_out1_re;

  assign dataOut_im = Simple_Dual_Port_RAM_out1_im;

  assign stateControl_9 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch8_process
      if (reset == 1'b1) begin
        delayMatch8_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch8_reg[0] <= stateControl_9;
          delayMatch8_reg[1] <= delayMatch8_reg[0];
        end
      end
    end

  assign stateControl_10 = delayMatch8_reg[1];



  assign enb_1_8_0_gated_4 = stateControl_10 && enb_1_8_0;

  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated_4) begin
          Delay9_out1 <= validOut_1;
        end
      end
    end



  assign validOut = Delay9_out1;

  assign Unit_Delay_Enabled_Synchronous_ectrl = (endOutFrame == 1'b0 ? Unit_Delay_Enabled_Synchronous_out1 :
              Frame_Length_FIFO_out1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous_out1 <= 15'b000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay_Enabled_Synchronous_out1 <= Unit_Delay_Enabled_Synchronous_ectrl;
        end
      end
    end



  assign stateControl_11 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch12_process
      if (reset == 1'b1) begin
        delayMatch12_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch12_reg[0] <= stateControl_11;
          delayMatch12_reg[1] <= delayMatch12_reg[0];
        end
      end
    end

  assign stateControl_12 = delayMatch12_reg[1];



  assign enb_1_8_0_gated_5 = stateControl_12 && enb_1_8_0;

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated_5) begin
          Delay4_out1 <= endOutFramem2;
        end
      end
    end



  assign stateControl_13 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch9_process
      if (reset == 1'b1) begin
        delayMatch9_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch9_reg[0] <= stateControl_13;
          delayMatch9_reg[1] <= delayMatch9_reg[0];
        end
      end
    end

  assign stateControl_14 = delayMatch9_reg[1];



  assign enb_1_8_0_gated_6 = stateControl_14 && enb_1_8_0;

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        for(Delay3_t_1 = 32'sd0; Delay3_t_1 <= 32'sd1; Delay3_t_1 = Delay3_t_1 + 32'sd1) begin
          Delay3_reg[Delay3_t_1] <= 15'b000000000000000;
        end
      end
      else begin
        if (enb_1_8_0_gated_6) begin
          for(Delay3_t_0_0 = 32'sd0; Delay3_t_0_0 <= 32'sd1; Delay3_t_0_0 = Delay3_t_0_0 + 32'sd1) begin
            Delay3_reg[Delay3_t_0_0] <= Delay3_reg_next[Delay3_t_0_0];
          end
        end
      end
    end

  assign Delay3_out1 = Delay3_reg[1];
  assign Delay3_reg_next[0] = frameLength;
  assign Delay3_reg_next[1] = Delay3_reg[0];



  dvbs2hdlTransmitterCore_In_Frame_Count u_In_Frame_Count (.clk(clk),
                                                           .reset(reset),
                                                           .enb_1_8_0(enb_1_8_0),
                                                           .enb_1(validIn),
                                                           .countToValue(Delay3_out1),  // ufix15
                                                           .endOut(endOut)
                                                           );

  assign Logical_Operator6_out1 = endOut & startOutFrame;



  assign Logical_Operator2_out1 = endOut ^ startOutFrame;



  assign Logical_Operator3_out1 =  ~ startOutFrame;



  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  assign count_step_4 = 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : delayMatch10_process
      if (reset == 1'b1) begin
        for(delayMatch10_t_1 = 32'sd0; delayMatch10_t_1 <= 32'sd1; delayMatch10_t_1 = delayMatch10_t_1 + 32'sd1) begin
          delayMatch10_reg[delayMatch10_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb_1_8_0) begin
          for(delayMatch10_t_0_0 = 32'sd0; delayMatch10_t_0_0 <= 32'sd1; delayMatch10_t_0_0 = delayMatch10_t_0_0 + 32'sd1) begin
            delayMatch10_reg[delayMatch10_t_0_0] <= delayMatch10_reg_next[delayMatch10_t_0_0];
          end
        end
      end
    end

  assign count_step_5 = delayMatch10_reg[1];
  assign delayMatch10_reg_next[0] = count_step_4;
  assign delayMatch10_reg_next[1] = delayMatch10_reg[0];



  assign stateControl_15 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch11_process
      if (reset == 1'b1) begin
        delayMatch11_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch11_reg[0] <= stateControl_15;
          delayMatch11_reg[1] <= delayMatch11_reg[0];
        end
      end
    end

  assign stateControl_16 = delayMatch11_reg[1];



  assign enb_1_8_0_gated_7 = stateControl_16 && enb_1_8_0;

  assign count_4 = nFramesInRAM_out1 + count_step_5;



  assign count_5 = nFramesInRAM_out1 - count_step_5;



  assign count_value_2 = (Logical_Operator3_out1 == 1'b0 ? count_5 :
              count_4);



  assign count_6 = (Logical_Operator2_out1 == 1'b0 ? nFramesInRAM_out1 :
              count_value_2);



  always @(posedge clk or posedge reset)
    begin : nFramesInRAM_process
      if (reset == 1'b1) begin
        nFramesInRAM_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_8_0_gated_7) begin
          nFramesInRAM_out1 <= count_6;
        end
      end
    end



  assign Compare_To_Constant_out1 = nFramesInRAM_out1 > 8'b00000000;



  assign Logical_Operator7_out1 = Logical_Operator6_out1 | Compare_To_Constant_out1;



  assign Unit_Delay_Enabled_Resettable_Synchronous_iv = 1'b0;



  always @(posedge clk or posedge reset)
    begin : delayMatch13_process
      if (reset == 1'b1) begin
        delayMatch13_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch13_reg[0] <= Unit_Delay_Enabled_Resettable_Synchronous_iv;
          delayMatch13_reg[1] <= delayMatch13_reg[0];
        end
      end
    end

  assign Unit_Delay_Enabled_Resettable_Synchronous_iv_1 = delayMatch13_reg[1];



  assign stateControl_17 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch14_process
      if (reset == 1'b1) begin
        delayMatch14_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch14_reg[0] <= stateControl_17;
          delayMatch14_reg[1] <= delayMatch14_reg[0];
        end
      end
    end

  assign stateControl_18 = delayMatch14_reg[1];



  assign enb_1_8_0_gated_8 = stateControl_18 && enb_1_8_0;

  assign Logical_Operator9_out1 =  ~ validm2;



  assign Logical_Operator_out1 = Logical_Operator1_out1 & Logical_Operator7_out1;



  assign Logical_Operator8_out1 = Logical_Operator_out1 & Logical_Operator9_out1;



  assign Unit_Delay_Enabled_Resettable_Synchronous_ectrl = (Logical_Operator8_out1 == 1'b0 ? Unit_Delay_Enabled_Resettable_Synchronous_out1 :
              Logical_Operator8_out1);



  assign Unit_Delay_Enabled_Resettable_Synchronous_toDelay = (Delay4_out1 == 1'b0 ? Unit_Delay_Enabled_Resettable_Synchronous_ectrl :
              Unit_Delay_Enabled_Resettable_Synchronous_iv_1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Resettable_Synchronous_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Resettable_Synchronous_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay_Enabled_Resettable_Synchronous_out1 <= Unit_Delay_Enabled_Resettable_Synchronous_toDelay;
        end
      end
    end



  assign Logical_Operator1_out1 =  ~ Unit_Delay_Enabled_Resettable_Synchronous_out1;



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0_gated_8) begin
          Delay5_reg[0] <= Logical_Operator1_out1;
          Delay5_reg[1] <= Delay5_reg[0];
        end
      end
    end

  assign Delay5_out1 = Delay5_reg[1];



  dvbs2hdlTransmitterCore_Dummy_Frame_Generator u_Dummy_Frame_Generator (.clk(clk),
                                                                         .reset(reset),
                                                                         .enb_1_8_0(enb_1_8_0),
                                                                         .frameLength(Unit_Delay_Enabled_Synchronous_out1),  // ufix15
                                                                         .EOF(Delay5_out1),
                                                                         .readyNxtFrame(Logical_Operator7_out1),
                                                                         .data_re(Dummy_Frame_Generator_out1_re),  // sfix18_En16
                                                                         .data_im(Dummy_Frame_Generator_out1_im),  // sfix18_En16
                                                                         .valid1(validm2),
                                                                         .valid(valid),
                                                                         .headerStart(Dummy_Frame_Generator_out4),
                                                                         .headerEnd(Dummy_Frame_Generator_out5)
                                                                         );

  assign dummyData_re = Dummy_Frame_Generator_out1_re;

  assign dummyData_im = Dummy_Frame_Generator_out1_im;

  assign valid_1 = valid;

  assign dummyValid = valid_1;

  assign dummyHeaderSrt = Dummy_Frame_Generator_out4;

  assign dummyHeaderEnd = Dummy_Frame_Generator_out5;

  assign nextFrameReady = Logical_Operator8_out1;

endmodule  // dvbs2hdlTransmitterCore_PL_Data_FIFO

