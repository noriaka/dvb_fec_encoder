// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_ParityController.v
// Created: 2024-01-10 13:49:57
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_ParityController
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/FEC Encoder/DVB-S2 LDPC Encoder/ParityController
// Hierarchy Level: 5
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_ParityController
          (clk,
           reset,
           enb,
           endEnc,
           paraddr,
           encenable,
           inpLen,
           parLen,
           qfactor,
           noofcol,
           reset_1,
           framevalid,
           ird_addr,
           pwr_addr,
           pwr_enb,
           prd_addr,
           starto,
           valido,
           par_ind,
           i_index,
           p_index);


  input   clk;
  input   reset;
  input   enb;
  input   endEnc;
  input   [7:0] paraddr;  // uint8
  input   encenable;
  input   [15:0] inpLen;  // uint16
  input   [15:0] parLen;  // uint16
  input   [8:0] qfactor;  // ufix9
  input   [7:0] noofcol;  // uint8
  input   reset_1;
  input   framevalid;
  output  [7:0] ird_addr;  // uint8
  output  [7:0] pwr_addr;  // uint8
  output  pwr_enb;
  output  [7:0] prd_addr;  // uint8
  output  starto;
  output  valido;
  output  par_ind;
  output  [8:0] i_index;  // ufix9
  output  [8:0] p_index;  // ufix9


  wire endo;
  reg [7:0] ird_addr_1;  // uint8
  reg [7:0] pwr_addr_1;  // uint8
  reg  pwr_enb_1;
  reg [7:0] prd_addr_1;  // uint8
  reg  starto_1;
  reg  endo_1;
  reg  valido_1;
  reg  par_ind_1;
  reg [8:0] i_index_1;  // ufix9
  reg [8:0] p_index_1;  // ufix9
  reg  validO_2;
  reg [7:0] prdAddr;  // uint8
  reg [7:0] pwrAddr;  // uint8
  reg  pwrEnb;
  reg  pwrEnbReg;
  reg [7:0] irdAddr;  // uint8
  reg  prdEnb;
  reg  endValid;
  reg  startO_2;
  reg [8:0] icountZ;  // ufix9
  reg [15:0] inCount;  // ufix16
  reg [15:0] parCount;  // ufix16
  reg [8:0] pcountZ;  // ufix9
  reg  validO_next;
  reg [7:0] prdAddr_next;  // uint8
  reg [7:0] pwrAddr_next;  // uint8
  reg  pwrEnb_next;
  reg  pwrEnbReg_next;
  reg [7:0] irdAddr_next;  // uint8
  reg  prdEnb_next;
  reg  endValid_next;
  reg  startO_next;
  reg [8:0] icountZ_next;  // ufix9
  reg [15:0] inCount_next;  // ufix16
  reg [15:0] parCount_next;  // ufix16
  reg [8:0] pcountZ_next;  // ufix9
  reg  prdEnb_temp;
  reg  endValid_temp;
  reg [8:0] add_temp;  // ufix9
  reg [8:0] add_temp_0;  // ufix9
  reg [8:0] add_temp_1;  // ufix9
  reg [8:0] t_0;  // ufix9
  reg [8:0] t_1;  // ufix9
  reg [8:0] t_2;  // ufix9
  reg [8:0] t_3;  // ufix9


  always @(posedge clk or posedge reset)
    begin : ParityController_process
      if (reset == 1'b1) begin
        validO_2 <= 1'b0;
        prdAddr <= 8'd1;
        pwrAddr <= 8'd0;
        irdAddr <= 8'd1;
        pwrEnb <= 1'b0;
        pwrEnbReg <= 1'b0;
        prdEnb <= 1'b0;
        endValid <= 1'b0;
        startO_2 <= 1'b0;
        icountZ <= 9'b000000001;
        pcountZ <= 9'b000000001;
        inCount <= 16'b0000000000000000;
        parCount <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          validO_2 <= validO_next;
          prdAddr <= prdAddr_next;
          pwrAddr <= pwrAddr_next;
          pwrEnb <= pwrEnb_next;
          pwrEnbReg <= pwrEnbReg_next;
          irdAddr <= irdAddr_next;
          prdEnb <= prdEnb_next;
          endValid <= endValid_next;
          startO_2 <= startO_next;
          icountZ <= icountZ_next;
          inCount <= inCount_next;
          parCount <= parCount_next;
          pcountZ <= pcountZ_next;
        end
      end
    end

  always @(encenable, endEnc, endValid, framevalid, icountZ, inCount, inpLen, irdAddr,
       noofcol, parCount, parLen, paraddr, pcountZ, prdAddr, prdEnb, pwrAddr,
       pwrEnb, pwrEnbReg, qfactor, reset_1, startO_2, validO_2) begin
    add_temp = 9'b000000000;
    add_temp_0 = 9'b000000000;
    add_temp_1 = 9'b000000000;
    t_2 = 9'b000000000;
    t_0 = 9'b000000000;
    t_3 = 9'b000000000;
    t_1 = 9'b000000000;
    prdEnb_temp = prdEnb;
    endValid_temp = endValid;
    validO_next = validO_2;
    prdAddr_next = prdAddr;
    irdAddr_next = irdAddr;
    icountZ_next = icountZ;
    inCount_next = inCount;
    parCount_next = parCount;
    pcountZ_next = pcountZ;
    // Control signals
    startO_next = endEnc;
    valido_1 = validO_2 && ( ! endValid);
    pwrEnbReg_next = pwrEnb;
    if (reset_1) begin
      prdAddr_next = 8'd1;
      pwrAddr_next = 8'd0;
      pwrEnb_next = 1'b0;
      prdEnb_temp = 1'b0;
      endValid_temp = 1'b0;
      irdAddr_next = 8'd1;
      icountZ_next = 9'b000000001;
      pcountZ_next = 9'b000000001;
      inCount_next = 16'b0000000000000000;
      parCount_next = 16'b0000000000000000;
    end
    else if (validO_2) begin
      pwrEnb_next = 1'b0;
      pwrAddr_next = 8'd0;
      if ( ! prdEnb) begin
        if (icountZ == 9'b101101000) begin
          if (irdAddr != noofcol) begin
            t_2 = {1'b0, irdAddr};
            add_temp_0 = t_2 + 9'b000000001;
            if (add_temp_0[8] != 1'b0) begin
              irdAddr_next = 8'b11111111;
            end
            else begin
              irdAddr_next = add_temp_0[7:0];
            end
          end
          icountZ_next = 9'b000000001;
        end
        else begin
          icountZ_next = icountZ + 9'b000000001;
        end
      end
      if (inCount == inpLen) begin
        prdEnb_temp = 1'b1;
      end
      else begin
        inCount_next = inCount + 16'b0000000000000001;
      end
      if (prdEnb_temp) begin
        if (parCount == parLen) begin
          prdEnb_temp = 1'b0;
          endValid_temp = 1'b1;
        end
        else begin
          parCount_next = parCount + 16'b0000000000000001;
          t_0 = {1'b0, prdAddr};
          if (t_0 == qfactor) begin
            prdAddr_next = 8'd1;
            if (pcountZ == 9'b101101000) begin
              pcountZ_next = 9'b000000001;
            end
            else begin
              pcountZ_next = pcountZ + 9'b000000001;
            end
          end
          else begin
            t_3 = {1'b0, prdAddr};
            add_temp_1 = t_3 + 9'b000000001;
            if (add_temp_1[8] != 1'b0) begin
              prdAddr_next = 8'b11111111;
            end
            else begin
              prdAddr_next = add_temp_1[7:0];
            end
          end
        end
      end
      else begin
        prdAddr_next = 8'd1;
        endValid_temp = 1'b0;
      end
    end
    else begin
      if (framevalid) begin
        pwrEnb_next = 1'b1;
        if (pwrAddr == 8'd255) begin
          pwrAddr_next = 8'd1;
        end
        else begin
          t_1 = {1'b0, pwrAddr};
          add_temp = t_1 + 9'b000000001;
          if (add_temp[8] != 1'b0) begin
            pwrAddr_next = 8'b11111111;
          end
          else begin
            pwrAddr_next = add_temp[7:0];
          end
        end
      end
      else begin
        pwrEnb_next = encenable;
        pwrAddr_next = prdAddr;
      end
      prdAddr_next = paraddr;
      prdEnb_temp = 1'b0;
      endValid_temp = 1'b0;
    end
    if (reset_1 || endValid_temp) begin
      validO_next = 1'b0;
    end
    else if (endEnc) begin
      validO_next = 1'b1;
    end
    ird_addr_1 = irdAddr;
    pwr_addr_1 = pwrAddr;
    pwr_enb_1 = pwrEnbReg;
    prd_addr_1 = prdAddr;
    starto_1 = startO_2;
    endo_1 = endValid;
    par_ind_1 = prdEnb;
    i_index_1 = icountZ;
    p_index_1 = pcountZ;
    prdEnb_next = prdEnb_temp;
    endValid_next = endValid_temp;
  end



  assign ird_addr = ird_addr_1;

  assign pwr_addr = pwr_addr_1;

  assign pwr_enb = pwr_enb_1;

  assign prd_addr = prd_addr_1;

  assign starto = starto_1;

  assign valido = valido_1;

  assign par_ind = par_ind_1;

  assign i_index = i_index_1;

  assign p_index = p_index_1;


endmodule  // dvbs2hdlTransmitterCore_ParityController

