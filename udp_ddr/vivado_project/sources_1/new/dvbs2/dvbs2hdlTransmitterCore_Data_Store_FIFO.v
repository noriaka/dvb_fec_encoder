// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_Data_Store_FIFO.v
// Created: 2024-01-10 13:49:57
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_Data_Store_FIFO
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/BB Frame Generator/Data Store FIFO
// Hierarchy Level: 4
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_Data_Store_FIFO
          (clk,
           reset,
           enb,
           pktBits,
           pktValid,
           DFLOut,
           bitsOut,
           startOut,
           endOut,
           validOut,
           MODCOD,
           FECFrame,
           dataBits,
           dataValid,
           dataEnd,
           headerBits,
           headerStart,
           headerValid,
           MODCODOut,
           FECFrameOut);


  input   clk;
  input   reset;
  input   enb;
  input   pktBits;
  input   pktValid;
  input   [15:0] DFLOut;  // uint16
  input   bitsOut;
  input   startOut;
  input   endOut;
  input   validOut;
  input   [4:0] MODCOD;  // ufix5
  input   FECFrame;
  output  dataBits;
  output  dataValid;
  output  dataEnd;
  output  headerBits;
  output  headerStart;
  output  headerValid;
  output  [4:0] MODCODOut;  // ufix5
  output  FECFrameOut;


  wire [6:0] count_step;  // ufix7
  wire [6:0] count_from;  // ufix7
  reg [6:0] HDL_Counter_out1;  // ufix7
  wire [6:0] count;  // ufix7
  wire need_to_wrap;
  wire [6:0] count_value;  // ufix7
  wire [6:0] count_1;  // ufix7
  wire validOut_1;
  wire endOut_1;
  wire [6:0] count_step_1;  // ufix7
  wire [6:0] count_from_1;  // ufix7
  reg [6:0] HDL_Counter1_out1;  // ufix7
  wire [6:0] count_2;  // ufix7
  wire need_to_wrap_1;
  wire [6:0] count_value_1;  // ufix7
  wire [6:0] count_3;  // ufix7
  wire Simple_Dual_Port_RAM_out1;
  reg  Delay6_out1;
  reg  Delay_out1;
  reg  Delay7_out1;
  reg  Delay1_out1;
  reg  Delay8_out1;
  reg  Delay2_out1;
  reg  Delay9_out1;
  reg  Delay3_out1;
  reg  Delay10_out1;
  reg  Delay4_out1;
  reg  Delay11_out1;
  reg [4:0] Delay5_out1;  // ufix5
  reg [4:0] Delay12_out1;  // ufix5
  reg  Delay13_out1;
  reg  Delay14_out1;


  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 127
  assign count_step = 7'b0000001;



  assign count_from = 7'b0000000;



  assign count = HDL_Counter_out1 + count_step;



  assign need_to_wrap = HDL_Counter_out1 == 7'b1111111;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (pktValid == 1'b0 ? HDL_Counter_out1 :
              count_value);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 7'b0000000;
      end
      else begin
        if (enb) begin
          HDL_Counter_out1 <= count_1;
        end
      end
    end



  dvbs2hdlTransmitterCore_MATLAB_Function_block1 u_MATLAB_Function (.clk(clk),
                                                                    .reset(reset),
                                                                    .enb(enb),
                                                                    .wr(pktValid),
                                                                    .startIn(endOut),
                                                                    .DFL(DFLOut),  // uint16
                                                                    .validOut(validOut_1),
                                                                    .endOut(endOut_1)
                                                                    );

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 127
  assign count_step_1 = 7'b0000001;



  assign count_from_1 = 7'b0000000;



  assign count_2 = HDL_Counter1_out1 + count_step_1;



  assign need_to_wrap_1 = HDL_Counter1_out1 == 7'b1111111;



  assign count_value_1 = (need_to_wrap_1 == 1'b0 ? count_2 :
              count_from_1);



  assign count_3 = (validOut_1 == 1'b0 ? HDL_Counter1_out1 :
              count_value_1);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter1_process
      if (reset == 1'b1) begin
        HDL_Counter1_out1 <= 7'b0000000;
      end
      else begin
        if (enb) begin
          HDL_Counter1_out1 <= count_3;
        end
      end
    end



  dvbs2hdlTransmitterCore_SimpleDualPortRAM_singlebit #(.AddrWidth(7),
                                                        .DataWidth(1)
                                                        )
                                                      u_Simple_Dual_Port_RAM (.clk(clk),
                                                                              .enb(enb),
                                                                              .wr_din(pktBits),
                                                                              .wr_addr(HDL_Counter_out1),
                                                                              .wr_en(pktValid),
                                                                              .rd_addr(HDL_Counter1_out1),
                                                                              .dout(Simple_Dual_Port_RAM_out1)
                                                                              );

  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Simple_Dual_Port_RAM_out1;
        end
      end
    end



  assign dataBits = Delay6_out1;

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= validOut_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Delay_out1;
        end
      end
    end



  assign dataValid = Delay7_out1;

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= endOut_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= Delay1_out1;
        end
      end
    end



  assign dataEnd = Delay8_out1;

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= bitsOut;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= Delay2_out1;
        end
      end
    end



  assign headerBits = Delay9_out1;

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= startOut;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= Delay3_out1;
        end
      end
    end



  assign headerStart = Delay10_out1;

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= validOut;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out1 <= Delay4_out1;
        end
      end
    end



  assign headerValid = Delay11_out1;

  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= MODCOD;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay12_out1 <= Delay5_out1;
        end
      end
    end



  assign MODCODOut = Delay12_out1;

  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay13_out1 <= FECFrame;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay14_out1 <= Delay13_out1;
        end
      end
    end



  assign FECFrameOut = Delay14_out1;

endmodule  // dvbs2hdlTransmitterCore_Data_Store_FIFO

