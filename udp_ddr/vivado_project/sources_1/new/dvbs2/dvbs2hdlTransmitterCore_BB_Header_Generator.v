// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_BB_Header_Generator.v
// Created: 2024-01-10 13:49:57
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_BB_Header_Generator
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/BB Frame Generator/BB Header and Data CRC Generator/BB Header Generator
// Hierarchy Level: 5
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_BB_Header_Generator
          (clk,
           reset,
           enb,
           startIn,
           TSorGS,
           DFL,
           UPL,
           SYNC,
           MODCOD,
           FECFrame,
           DFLOut,
           bitsOut,
           startOut,
           validOut,
           endOut,
           MODCODOut,
           FECFrameOut);


  input   clk;
  input   reset;
  input   enb;
  input   startIn;
  input   [1:0] TSorGS;  // ufix2
  input   [15:0] DFL;  // uint16
  input   [15:0] UPL;  // uint16
  input   [7:0] SYNC;  // uint8
  input   [4:0] MODCOD;  // ufix5
  input   FECFrame;
  output  [15:0] DFLOut;  // uint16
  output  bitsOut;
  output  startOut;
  output  validOut;
  output  endOut;
  output  [4:0] MODCODOut;  // ufix5
  output  FECFrameOut;


  reg  [1:0] Delay9_reg;  // ufix1 [2]
  wire Delay9_out1;
  reg [1:0] Delay10_reg [0:1];  // ufix2 [2]
  wire [1:0] Delay10_reg_next [0:1];  // ufix2 [2]
  wire [1:0] Delay10_out1;  // ufix2
  reg [15:0] Delay11_reg [0:1];  // ufix16 [2]
  wire [15:0] Delay11_reg_next [0:1];  // ufix16 [2]
  wire [15:0] Delay11_out1;  // uint16
  reg [15:0] Delay12_reg [0:1];  // ufix16 [2]
  wire [15:0] Delay12_reg_next [0:1];  // ufix16 [2]
  wire [15:0] Delay12_out1;  // uint16
  reg [7:0] Delay13_reg [0:1];  // ufix8 [2]
  wire [7:0] Delay13_reg_next [0:1];  // ufix8 [2]
  wire [7:0] Delay13_out1;  // uint8
  wire dataOut;
  wire startOut_1;
  wire endOut_1;
  wire validOut_1;
  reg  [1:0] Delay_reg;  // ufix1 [2]
  wire Delay_out1;
  reg  [1:0] Delay1_reg;  // ufix1 [2]
  wire Delay1_out1;
  reg  [1:0] Delay2_reg;  // ufix1 [2]
  wire Delay2_out1;
  reg  [1:0] Delay3_reg;  // ufix1 [2]
  wire Delay3_out1;
  wire BB_Header_CRC_Generator_out1;
  wire BB_Header_CRC_Generator_out2;
  wire BB_Header_CRC_Generator_out3;
  wire BB_Header_CRC_Generator_out4;
  reg  [3:0] Delay5_reg;  // ufix1 [4]
  wire Delay5_out1;
  reg [15:0] Delay16_out1;  // uint16
  reg [15:0] Delay15_reg [0:1];  // ufix16 [2]
  wire [15:0] Delay15_reg_next [0:1];  // ufix16 [2]
  wire [15:0] Delay15_out1;  // uint16
  reg [15:0] Delay14_reg [0:9];  // ufix16 [10]
  reg [15:0] Delay14_reg_next [0:9];  // ufix16 [10]
  reg [15:0] Delay14_out1;  // uint16
  reg [15:0] Delay8_reg [0:2];  // ufix16 [3]
  reg [15:0] Delay8_reg_next [0:2];  // ufix16 [3]
  reg [15:0] Delay8_out1;  // uint16
  reg [15:0] Unit_Delay_Enabled_Synchronous_out1;  // uint16
  wire [15:0] Unit_Delay_Enabled_Synchronous_ectrl;  // uint16
  reg  [3:0] Delay4_reg;  // ufix1 [4]
  wire Delay4_out1;
  reg  [3:0] Delay7_reg;  // ufix1 [4]
  wire Delay7_out1;
  reg  [3:0] Delay6_reg;  // ufix1 [4]
  wire Delay6_out1;
  reg [4:0] Delay17_reg [0:1];  // ufix5 [2]
  wire [4:0] Delay17_reg_next [0:1];  // ufix5 [2]
  wire [4:0] Delay17_out1;  // ufix5
  reg [4:0] Delay18_out1;  // ufix5
  reg [4:0] Delay19_reg [0:1];  // ufix5 [2]
  wire [4:0] Delay19_reg_next [0:1];  // ufix5 [2]
  wire [4:0] Delay19_out1;  // ufix5
  reg [4:0] Delay20_reg [0:9];  // ufix5 [10]
  reg [4:0] Delay20_reg_next [0:9];  // ufix5 [10]
  reg [4:0] Delay20_out1;  // ufix5
  reg [4:0] Delay21_reg [0:2];  // ufix5 [3]
  reg [4:0] Delay21_reg_next [0:2];  // ufix5 [3]
  reg [4:0] Delay21_out1;  // ufix5
  reg [4:0] Unit_Delay_Enabled_Synchronous1_out1;  // ufix5
  wire [4:0] Unit_Delay_Enabled_Synchronous1_ectrl;  // ufix5
  reg  [1:0] Delay22_reg;  // ufix1 [2]
  wire Delay22_out1;
  reg  Delay23_out1;
  reg  [1:0] Delay24_reg;  // ufix1 [2]
  wire Delay24_out1;
  reg  [9:0] Delay25_reg;  // ufix1 [10]
  wire Delay25_out1;
  reg  [2:0] Delay26_reg;  // ufix1 [3]
  wire Delay26_out1;
  reg  Unit_Delay_Enabled_Synchronous2_out1;
  wire Unit_Delay_Enabled_Synchronous2_ectrl;
  reg signed [31:0] Delay10_t_0_0;  // int32
  reg signed [31:0] Delay10_t_1;  // int32
  reg signed [31:0] Delay11_t_0_0;  // int32
  reg signed [31:0] Delay11_t_1;  // int32
  reg signed [31:0] Delay12_t_0_0;  // int32
  reg signed [31:0] Delay12_t_1;  // int32
  reg signed [31:0] Delay13_t_0_0;  // int32
  reg signed [31:0] Delay13_t_1;  // int32
  reg signed [31:0] Delay15_t_0_0;  // int32
  reg signed [31:0] Delay15_t_1;  // int32
  reg signed [31:0] Delay14_t_0_0;  // int32
  reg signed [31:0] Delay14_t_0_1;  // int32
  reg signed [31:0] Delay14_t_1;  // int32
  reg signed [31:0] Delay8_t_0_0;  // int32
  reg signed [31:0] Delay8_t_0_1;  // int32
  reg signed [31:0] Delay8_t_1;  // int32
  reg signed [31:0] Delay17_t_0_0;  // int32
  reg signed [31:0] Delay17_t_1;  // int32
  reg signed [31:0] Delay19_t_0_0;  // int32
  reg signed [31:0] Delay19_t_1;  // int32
  reg signed [31:0] Delay20_t_0_0;  // int32
  reg signed [31:0] Delay20_t_0_1;  // int32
  reg signed [31:0] Delay20_t_1;  // int32
  reg signed [31:0] Delay21_t_0_0;  // int32
  reg signed [31:0] Delay21_t_0_1;  // int32
  reg signed [31:0] Delay21_t_1;  // int32


  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay9_reg[0] <= startIn;
          Delay9_reg[1] <= Delay9_reg[0];
        end
      end
    end

  assign Delay9_out1 = Delay9_reg[1];



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        for(Delay10_t_1 = 32'sd0; Delay10_t_1 <= 32'sd1; Delay10_t_1 = Delay10_t_1 + 32'sd1) begin
          Delay10_reg[Delay10_t_1] <= 2'b00;
        end
      end
      else begin
        if (enb) begin
          for(Delay10_t_0_0 = 32'sd0; Delay10_t_0_0 <= 32'sd1; Delay10_t_0_0 = Delay10_t_0_0 + 32'sd1) begin
            Delay10_reg[Delay10_t_0_0] <= Delay10_reg_next[Delay10_t_0_0];
          end
        end
      end
    end

  assign Delay10_out1 = Delay10_reg[1];
  assign Delay10_reg_next[0] = TSorGS;
  assign Delay10_reg_next[1] = Delay10_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        for(Delay11_t_1 = 32'sd0; Delay11_t_1 <= 32'sd1; Delay11_t_1 = Delay11_t_1 + 32'sd1) begin
          Delay11_reg[Delay11_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(Delay11_t_0_0 = 32'sd0; Delay11_t_0_0 <= 32'sd1; Delay11_t_0_0 = Delay11_t_0_0 + 32'sd1) begin
            Delay11_reg[Delay11_t_0_0] <= Delay11_reg_next[Delay11_t_0_0];
          end
        end
      end
    end

  assign Delay11_out1 = Delay11_reg[1];
  assign Delay11_reg_next[0] = DFL;
  assign Delay11_reg_next[1] = Delay11_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        for(Delay12_t_1 = 32'sd0; Delay12_t_1 <= 32'sd1; Delay12_t_1 = Delay12_t_1 + 32'sd1) begin
          Delay12_reg[Delay12_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(Delay12_t_0_0 = 32'sd0; Delay12_t_0_0 <= 32'sd1; Delay12_t_0_0 = Delay12_t_0_0 + 32'sd1) begin
            Delay12_reg[Delay12_t_0_0] <= Delay12_reg_next[Delay12_t_0_0];
          end
        end
      end
    end

  assign Delay12_out1 = Delay12_reg[1];
  assign Delay12_reg_next[0] = UPL;
  assign Delay12_reg_next[1] = Delay12_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        for(Delay13_t_1 = 32'sd0; Delay13_t_1 <= 32'sd1; Delay13_t_1 = Delay13_t_1 + 32'sd1) begin
          Delay13_reg[Delay13_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(Delay13_t_0_0 = 32'sd0; Delay13_t_0_0 <= 32'sd1; Delay13_t_0_0 = Delay13_t_0_0 + 32'sd1) begin
            Delay13_reg[Delay13_t_0_0] <= Delay13_reg_next[Delay13_t_0_0];
          end
        end
      end
    end

  assign Delay13_out1 = Delay13_reg[1];
  assign Delay13_reg_next[0] = SYNC;
  assign Delay13_reg_next[1] = Delay13_reg[0];



  dvbs2hdlTransmitterCore_BB_Header_Packetizer u_BB_Header_Packetizer (.clk(clk),
                                                                       .reset(reset),
                                                                       .enb(enb),
                                                                       .startIn(Delay9_out1),
                                                                       .TSorGS(Delay10_out1),  // ufix2
                                                                       .DFL(Delay11_out1),  // uint16
                                                                       .UPL(Delay12_out1),  // uint16
                                                                       .SYNC(Delay13_out1),  // uint8
                                                                       .dataOut(dataOut),
                                                                       .startOut(startOut_1),
                                                                       .endOut(endOut_1),
                                                                       .validOut(validOut_1)
                                                                       );

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay_reg[0] <= dataOut;
          Delay_reg[1] <= Delay_reg[0];
        end
      end
    end

  assign Delay_out1 = Delay_reg[1];



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= startOut_1;
          Delay1_reg[1] <= Delay1_reg[0];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[1];



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= endOut_1;
          Delay2_reg[1] <= Delay2_reg[0];
        end
      end
    end

  assign Delay2_out1 = Delay2_reg[1];



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay3_reg[0] <= validOut_1;
          Delay3_reg[1] <= Delay3_reg[0];
        end
      end
    end

  assign Delay3_out1 = Delay3_reg[1];



  dvbs2hdlTransmitterCore_BB_Header_CRC_Generator u_BB_Header_CRC_Generator (.clk(clk),
                                                                             .reset(reset),
                                                                             .enb(enb),
                                                                             .dataIn(Delay_out1),
                                                                             .startIn(Delay1_out1),
                                                                             .endIn(Delay2_out1),
                                                                             .validIn(Delay3_out1),
                                                                             .dataOut(BB_Header_CRC_Generator_out1),
                                                                             .startOut(BB_Header_CRC_Generator_out2),
                                                                             .endOut(BB_Header_CRC_Generator_out3),
                                                                             .validOut(BB_Header_CRC_Generator_out4)
                                                                             );

  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_reg <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          Delay5_reg[0] <= BB_Header_CRC_Generator_out2;
          Delay5_reg[32'sd3:32'sd1] <= Delay5_reg[32'sd2:32'sd0];
        end
      end
    end

  assign Delay5_out1 = Delay5_reg[3];



  always @(posedge clk or posedge reset)
    begin : Delay16_process
      if (reset == 1'b1) begin
        Delay16_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay16_out1 <= Delay11_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay15_process
      if (reset == 1'b1) begin
        for(Delay15_t_1 = 32'sd0; Delay15_t_1 <= 32'sd1; Delay15_t_1 = Delay15_t_1 + 32'sd1) begin
          Delay15_reg[Delay15_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(Delay15_t_0_0 = 32'sd0; Delay15_t_0_0 <= 32'sd1; Delay15_t_0_0 = Delay15_t_0_0 + 32'sd1) begin
            Delay15_reg[Delay15_t_0_0] <= Delay15_reg_next[Delay15_t_0_0];
          end
        end
      end
    end

  assign Delay15_out1 = Delay15_reg[1];
  assign Delay15_reg_next[0] = Delay16_out1;
  assign Delay15_reg_next[1] = Delay15_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        for(Delay14_t_1 = 32'sd0; Delay14_t_1 <= 32'sd9; Delay14_t_1 = Delay14_t_1 + 32'sd1) begin
          Delay14_reg[Delay14_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(Delay14_t_0_1 = 32'sd0; Delay14_t_0_1 <= 32'sd9; Delay14_t_0_1 = Delay14_t_0_1 + 32'sd1) begin
            Delay14_reg[Delay14_t_0_1] <= Delay14_reg_next[Delay14_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay14_out1 = Delay14_reg[9];
    Delay14_reg_next[0] = Delay15_out1;

    for(Delay14_t_0_0 = 32'sd0; Delay14_t_0_0 <= 32'sd8; Delay14_t_0_0 = Delay14_t_0_0 + 32'sd1) begin
      Delay14_reg_next[Delay14_t_0_0 + 32'sd1] = Delay14_reg[Delay14_t_0_0];
    end

  end



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        for(Delay8_t_1 = 32'sd0; Delay8_t_1 <= 32'sd2; Delay8_t_1 = Delay8_t_1 + 32'sd1) begin
          Delay8_reg[Delay8_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(Delay8_t_0_1 = 32'sd0; Delay8_t_0_1 <= 32'sd2; Delay8_t_0_1 = Delay8_t_0_1 + 32'sd1) begin
            Delay8_reg[Delay8_t_0_1] <= Delay8_reg_next[Delay8_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay8_out1 = Delay8_reg[2];
    Delay8_reg_next[0] = Delay14_out1;

    for(Delay8_t_0_0 = 32'sd0; Delay8_t_0_0 <= 32'sd1; Delay8_t_0_0 = Delay8_t_0_0 + 32'sd1) begin
      Delay8_reg_next[Delay8_t_0_0 + 32'sd1] = Delay8_reg[Delay8_t_0_0];
    end

  end



  assign Unit_Delay_Enabled_Synchronous_ectrl = (Delay5_out1 == 1'b0 ? Unit_Delay_Enabled_Synchronous_out1 :
              Delay8_out1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous_out1 <= Unit_Delay_Enabled_Synchronous_ectrl;
        end
      end
    end



  assign DFLOut = Unit_Delay_Enabled_Synchronous_out1;

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_reg <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          Delay4_reg[0] <= BB_Header_CRC_Generator_out1;
          Delay4_reg[32'sd3:32'sd1] <= Delay4_reg[32'sd2:32'sd0];
        end
      end
    end

  assign Delay4_out1 = Delay4_reg[3];



  assign bitsOut = Delay4_out1;

  assign startOut = Delay5_out1;

  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_reg <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          Delay7_reg[0] <= BB_Header_CRC_Generator_out4;
          Delay7_reg[32'sd3:32'sd1] <= Delay7_reg[32'sd2:32'sd0];
        end
      end
    end

  assign Delay7_out1 = Delay7_reg[3];



  assign validOut = Delay7_out1;

  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_reg <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          Delay6_reg[0] <= BB_Header_CRC_Generator_out3;
          Delay6_reg[32'sd3:32'sd1] <= Delay6_reg[32'sd2:32'sd0];
        end
      end
    end

  assign Delay6_out1 = Delay6_reg[3];



  assign endOut = Delay6_out1;

  always @(posedge clk or posedge reset)
    begin : Delay17_process
      if (reset == 1'b1) begin
        for(Delay17_t_1 = 32'sd0; Delay17_t_1 <= 32'sd1; Delay17_t_1 = Delay17_t_1 + 32'sd1) begin
          Delay17_reg[Delay17_t_1] <= 5'b00000;
        end
      end
      else begin
        if (enb) begin
          for(Delay17_t_0_0 = 32'sd0; Delay17_t_0_0 <= 32'sd1; Delay17_t_0_0 = Delay17_t_0_0 + 32'sd1) begin
            Delay17_reg[Delay17_t_0_0] <= Delay17_reg_next[Delay17_t_0_0];
          end
        end
      end
    end

  assign Delay17_out1 = Delay17_reg[1];
  assign Delay17_reg_next[0] = MODCOD;
  assign Delay17_reg_next[1] = Delay17_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay18_process
      if (reset == 1'b1) begin
        Delay18_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay18_out1 <= Delay17_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay19_process
      if (reset == 1'b1) begin
        for(Delay19_t_1 = 32'sd0; Delay19_t_1 <= 32'sd1; Delay19_t_1 = Delay19_t_1 + 32'sd1) begin
          Delay19_reg[Delay19_t_1] <= 5'b00000;
        end
      end
      else begin
        if (enb) begin
          for(Delay19_t_0_0 = 32'sd0; Delay19_t_0_0 <= 32'sd1; Delay19_t_0_0 = Delay19_t_0_0 + 32'sd1) begin
            Delay19_reg[Delay19_t_0_0] <= Delay19_reg_next[Delay19_t_0_0];
          end
        end
      end
    end

  assign Delay19_out1 = Delay19_reg[1];
  assign Delay19_reg_next[0] = Delay18_out1;
  assign Delay19_reg_next[1] = Delay19_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay20_process
      if (reset == 1'b1) begin
        for(Delay20_t_1 = 32'sd0; Delay20_t_1 <= 32'sd9; Delay20_t_1 = Delay20_t_1 + 32'sd1) begin
          Delay20_reg[Delay20_t_1] <= 5'b00000;
        end
      end
      else begin
        if (enb) begin
          for(Delay20_t_0_1 = 32'sd0; Delay20_t_0_1 <= 32'sd9; Delay20_t_0_1 = Delay20_t_0_1 + 32'sd1) begin
            Delay20_reg[Delay20_t_0_1] <= Delay20_reg_next[Delay20_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay20_out1 = Delay20_reg[9];
    Delay20_reg_next[0] = Delay19_out1;

    for(Delay20_t_0_0 = 32'sd0; Delay20_t_0_0 <= 32'sd8; Delay20_t_0_0 = Delay20_t_0_0 + 32'sd1) begin
      Delay20_reg_next[Delay20_t_0_0 + 32'sd1] = Delay20_reg[Delay20_t_0_0];
    end

  end



  always @(posedge clk or posedge reset)
    begin : Delay21_process
      if (reset == 1'b1) begin
        for(Delay21_t_1 = 32'sd0; Delay21_t_1 <= 32'sd2; Delay21_t_1 = Delay21_t_1 + 32'sd1) begin
          Delay21_reg[Delay21_t_1] <= 5'b00000;
        end
      end
      else begin
        if (enb) begin
          for(Delay21_t_0_1 = 32'sd0; Delay21_t_0_1 <= 32'sd2; Delay21_t_0_1 = Delay21_t_0_1 + 32'sd1) begin
            Delay21_reg[Delay21_t_0_1] <= Delay21_reg_next[Delay21_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay21_out1 = Delay21_reg[2];
    Delay21_reg_next[0] = Delay20_out1;

    for(Delay21_t_0_0 = 32'sd0; Delay21_t_0_0 <= 32'sd1; Delay21_t_0_0 = Delay21_t_0_0 + 32'sd1) begin
      Delay21_reg_next[Delay21_t_0_0 + 32'sd1] = Delay21_reg[Delay21_t_0_0];
    end

  end



  assign Unit_Delay_Enabled_Synchronous1_ectrl = (Delay5_out1 == 1'b0 ? Unit_Delay_Enabled_Synchronous1_out1 :
              Delay21_out1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous1_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous1_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous1_out1 <= Unit_Delay_Enabled_Synchronous1_ectrl;
        end
      end
    end



  assign MODCODOut = Unit_Delay_Enabled_Synchronous1_out1;

  always @(posedge clk or posedge reset)
    begin : Delay22_process
      if (reset == 1'b1) begin
        Delay22_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay22_reg[0] <= FECFrame;
          Delay22_reg[1] <= Delay22_reg[0];
        end
      end
    end

  assign Delay22_out1 = Delay22_reg[1];



  always @(posedge clk or posedge reset)
    begin : Delay23_process
      if (reset == 1'b1) begin
        Delay23_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay23_out1 <= Delay22_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay24_process
      if (reset == 1'b1) begin
        Delay24_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay24_reg[0] <= Delay23_out1;
          Delay24_reg[1] <= Delay24_reg[0];
        end
      end
    end

  assign Delay24_out1 = Delay24_reg[1];



  always @(posedge clk or posedge reset)
    begin : Delay25_process
      if (reset == 1'b1) begin
        Delay25_reg <= {10{1'b0}};
      end
      else begin
        if (enb) begin
          Delay25_reg[0] <= Delay24_out1;
          Delay25_reg[32'sd9:32'sd1] <= Delay25_reg[32'sd8:32'sd0];
        end
      end
    end

  assign Delay25_out1 = Delay25_reg[9];



  always @(posedge clk or posedge reset)
    begin : Delay26_process
      if (reset == 1'b1) begin
        Delay26_reg <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          Delay26_reg[0] <= Delay25_out1;
          Delay26_reg[32'sd2:32'sd1] <= Delay26_reg[32'sd1:32'sd0];
        end
      end
    end

  assign Delay26_out1 = Delay26_reg[2];



  assign Unit_Delay_Enabled_Synchronous2_ectrl = (Delay5_out1 == 1'b0 ? Unit_Delay_Enabled_Synchronous2_out1 :
              Delay26_out1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous2_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous2_out1 <= Unit_Delay_Enabled_Synchronous2_ectrl;
        end
      end
    end



  assign FECFrameOut = Unit_Delay_Enabled_Synchronous2_out1;

endmodule  // dvbs2hdlTransmitterCore_BB_Header_Generator

