// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_PL_Header_Bits_Generator.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_PL_Header_Bits_Generator
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator/PL Header Generator/PL Header Bits Generator
// Hierarchy Level: 5
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_PL_Header_Bits_Generator
          (clk,
           reset,
           enb_1_8_0,
           enb_1_16_0,
           trigger,
           pilotActive,
           modcod,
           fecframe,
           bitsOut,
           bitsStart,
           bitsValid);


  input   clk;
  input   reset;
  input   enb_1_8_0;
  input   enb_1_16_0;
  input   trigger;
  input   pilotActive;
  input   [4:0] modcod;  // ufix5
  input   fecframe;
  output  bitsOut;
  output  bitsStart;
  output  bitsValid;


  wire Data_Type_Conversion_out1;  // ufix1
  wire bit7;
  wire bits1to6;  // ufix1
  wire start;
  wire valid;
  wire Data_Type_Conversion2_out1;
  wire PLSC_Generator_out1;
  wire PLSC_Generator_out2;
  reg  PLSC_Generator_out2_1;
  wire SOF_Generator_out1;
  wire valid_1;
  wire SOF_Generator_out3;
  reg  [1:0] delayMatch1_reg;  // ufix1 [2]
  wire SOF_Generator_out1_1;
  wire Multiport_Switch_out1;
  reg  [1:0] delayMatch2_reg;  // ufix1 [2]
  wire valid_2;
  wire Multiport_Switch1_out1;


  assign Data_Type_Conversion_out1 = fecframe;



  dvbs2hdlTransmitterCore_Header_Bits_Packer u_Header_Bits_Packer (.clk(clk),
                                                                   .reset(reset),
                                                                   .enb_1_16_0(enb_1_16_0),
                                                                   .trigger(trigger),
                                                                   .pilotActive(pilotActive),
                                                                   .modcod(modcod),  // ufix5
                                                                   .fecframe(Data_Type_Conversion_out1),  // ufix1
                                                                   .bit7(bit7),
                                                                   .bits1to6(bits1to6),  // ufix1
                                                                   .start(start),
                                                                   .valid(valid)
                                                                   );

  assign Data_Type_Conversion2_out1 = bits1to6;



  dvbs2hdlTransmitterCore_PLSC_Generator u_PLSC_Generator (.clk(clk),
                                                           .reset(reset),
                                                           .enb_1_8_0(enb_1_8_0),
                                                           .enb_1_16_0(enb_1_16_0),
                                                           .bit7(bit7),
                                                           .bits1to6(Data_Type_Conversion2_out1),
                                                           .bitsStart(start),
                                                           .bitsValidIn(valid),
                                                           .bitsOut(PLSC_Generator_out1),
                                                           .bitsValid(PLSC_Generator_out2)
                                                           );

  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        PLSC_Generator_out2_1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          PLSC_Generator_out2_1 <= PLSC_Generator_out2;
        end
      end
    end



  dvbs2hdlTransmitterCore_SOF_Generator u_SOF_Generator (.clk(clk),
                                                         .reset(reset),
                                                         .enb_1_8_0(enb_1_8_0),
                                                         .trigger(trigger),
                                                         .dataOut(SOF_Generator_out1),
                                                         .validOut(valid_1),
                                                         .startOfSOF(SOF_Generator_out3)
                                                         );

  always @(posedge clk or posedge reset)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        delayMatch1_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch1_reg[0] <= SOF_Generator_out1;
          delayMatch1_reg[1] <= delayMatch1_reg[0];
        end
      end
    end

  assign SOF_Generator_out1_1 = delayMatch1_reg[1];



  assign Multiport_Switch_out1 = (PLSC_Generator_out2_1 == 1'b0 ? SOF_Generator_out1_1 :
              PLSC_Generator_out1);



  assign bitsOut = Multiport_Switch_out1;

  assign bitsStart = SOF_Generator_out3;

  always @(posedge clk or posedge reset)
    begin : delayMatch2_process
      if (reset == 1'b1) begin
        delayMatch2_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch2_reg[0] <= valid_1;
          delayMatch2_reg[1] <= delayMatch2_reg[0];
        end
      end
    end

  assign valid_2 = delayMatch2_reg[1];



  assign Multiport_Switch1_out1 = (PLSC_Generator_out2 == 1'b0 ? valid_2 :
              PLSC_Generator_out2);



  assign bitsValid = Multiport_Switch1_out1;

endmodule  // dvbs2hdlTransmitterCore_PL_Header_Bits_Generator

