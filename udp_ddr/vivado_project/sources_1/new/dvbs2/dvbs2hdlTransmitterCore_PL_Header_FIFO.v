// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_PL_Header_FIFO.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_PL_Header_FIFO
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator/RAM FIFO/PL Header FIFO
// Hierarchy Level: 5
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_PL_Header_FIFO
          (clk,
           reset,
           enb_1_8_0,
           dataIn_re,
           dataIn_im,
           validIn,
           nextFrameReady,
           dataOut_re,
           dataOut_im,
           startOut,
           endOut,
           validOut,
           endOut1);


  input   clk;
  input   reset;
  input   enb_1_8_0;
  input   signed [17:0] dataIn_re;  // sfix18_En16
  input   signed [17:0] dataIn_im;  // sfix18_En16
  input   validIn;
  input   nextFrameReady;
  output  signed [17:0] dataOut_re;  // sfix18_En16
  output  signed [17:0] dataOut_im;  // sfix18_En16
  output  startOut;
  output  endOut;
  output  validOut;
  output  endOut1;


  wire [8:0] count_step;  // ufix9
  wire [8:0] count_from;  // ufix9
  reg [8:0] HDL_Counter2_out1;  // ufix9
  wire [8:0] count;  // ufix9
  wire need_to_wrap;
  wire [8:0] count_value;  // ufix9
  wire [8:0] count_1;  // ufix9
  wire validOut_1;
  wire startOut_1;
  wire endOut_1;
  wire endOutm1;
  wire [8:0] count_step_1;  // ufix9
  wire [8:0] count_from_1;  // ufix9
  reg [8:0] HDL_Counter3_out1;  // ufix9
  wire [8:0] count_2;  // ufix9
  wire need_to_wrap_1;
  wire [8:0] count_value_1;  // ufix9
  wire [8:0] count_3;  // ufix9
  wire signed [17:0] Simple_Dual_Port_RAM_out1_re;  // sfix18_En16
  wire signed [17:0] Simple_Dual_Port_RAM_out1_im;  // sfix18_En16
  wire stateControl_1;
  reg  [1:0] delayMatch_reg;  // ufix1 [2]
  wire stateControl_2;
  wire enb_1_8_0_gated;
  reg  Delay1_out1;
  wire stateControl_3;
  reg  [1:0] delayMatch1_reg;  // ufix1 [2]
  wire stateControl_4;
  wire enb_1_8_0_gated_1;
  reg  Delay2_out1;
  wire stateControl_5;
  reg  [1:0] delayMatch2_reg;  // ufix1 [2]
  wire stateControl_6;
  wire enb_1_8_0_gated_2;
  reg  Delay9_out1;
  wire stateControl_7;
  reg  [1:0] delayMatch3_reg;  // ufix1 [2]
  wire stateControl_8;
  wire enb_1_8_0_gated_3;
  reg  Delay3_out1;


  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 511
  assign count_step = 9'b000000001;



  assign count_from = 9'b000000000;



  assign count = HDL_Counter2_out1 + count_step;



  assign need_to_wrap = HDL_Counter2_out1 == 9'b111111111;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (validIn == 1'b0 ? HDL_Counter2_out1 :
              count_value);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter2_process
      if (reset == 1'b1) begin
        HDL_Counter2_out1 <= 9'b000000000;
      end
      else begin
        if (enb_1_8_0) begin
          HDL_Counter2_out1 <= count_1;
        end
      end
    end



  dvbs2hdlTransmitterCore_90x u_90x (.clk(clk),
                                     .reset(reset),
                                     .enb_1_8_0(enb_1_8_0),
                                     .trigger(nextFrameReady),
                                     .validOut(validOut_1),
                                     .startOut(startOut_1),
                                     .endOut(endOut_1),
                                     .endOutm1(endOutm1)
                                     );

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 511
  assign count_step_1 = 9'b000000001;



  assign count_from_1 = 9'b000000000;



  assign count_2 = HDL_Counter3_out1 + count_step_1;



  assign need_to_wrap_1 = HDL_Counter3_out1 == 9'b111111111;



  assign count_value_1 = (need_to_wrap_1 == 1'b0 ? count_2 :
              count_from_1);



  assign count_3 = (validOut_1 == 1'b0 ? HDL_Counter3_out1 :
              count_value_1);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter3_process
      if (reset == 1'b1) begin
        HDL_Counter3_out1 <= 9'b000000000;
      end
      else begin
        if (enb_1_8_0) begin
          HDL_Counter3_out1 <= count_3;
        end
      end
    end



  dvbs2hdlTransmitterCore_SimpleDualPortRAM_generic_block1 #(.AddrWidth(9),
                                                             .DataWidth(18)
                                                             )
                                                           u_Simple_Dual_Port_RAM (.clk(clk),
                                                                                   .enb_1_8_0(enb_1_8_0),
                                                                                   .wr_din_re(dataIn_re),
                                                                                   .wr_din_im(dataIn_im),
                                                                                   .wr_addr(HDL_Counter2_out1),
                                                                                   .wr_en(validIn),
                                                                                   .rd_addr(HDL_Counter3_out1),
                                                                                   .dout_re(Simple_Dual_Port_RAM_out1_re),
                                                                                   .dout_im(Simple_Dual_Port_RAM_out1_im)
                                                                                   );

  assign dataOut_re = Simple_Dual_Port_RAM_out1_re;

  assign dataOut_im = Simple_Dual_Port_RAM_out1_im;

  assign stateControl_1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch_reg[0] <= stateControl_1;
          delayMatch_reg[1] <= delayMatch_reg[0];
        end
      end
    end

  assign stateControl_2 = delayMatch_reg[1];



  assign enb_1_8_0_gated = stateControl_2 && enb_1_8_0;

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated) begin
          Delay1_out1 <= startOut_1;
        end
      end
    end



  assign startOut = Delay1_out1;

  assign stateControl_3 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        delayMatch1_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch1_reg[0] <= stateControl_3;
          delayMatch1_reg[1] <= delayMatch1_reg[0];
        end
      end
    end

  assign stateControl_4 = delayMatch1_reg[1];



  assign enb_1_8_0_gated_1 = stateControl_4 && enb_1_8_0;

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated_1) begin
          Delay2_out1 <= endOut_1;
        end
      end
    end



  assign endOut = Delay2_out1;

  assign stateControl_5 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch2_process
      if (reset == 1'b1) begin
        delayMatch2_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch2_reg[0] <= stateControl_5;
          delayMatch2_reg[1] <= delayMatch2_reg[0];
        end
      end
    end

  assign stateControl_6 = delayMatch2_reg[1];



  assign enb_1_8_0_gated_2 = stateControl_6 && enb_1_8_0;

  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated_2) begin
          Delay9_out1 <= validOut_1;
        end
      end
    end



  assign validOut = Delay9_out1;

  assign stateControl_7 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch3_process
      if (reset == 1'b1) begin
        delayMatch3_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch3_reg[0] <= stateControl_7;
          delayMatch3_reg[1] <= delayMatch3_reg[0];
        end
      end
    end

  assign stateControl_8 = delayMatch3_reg[1];



  assign enb_1_8_0_gated_3 = stateControl_8 && enb_1_8_0;

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated_3) begin
          Delay3_out1 <= endOutm1;
        end
      end
    end



  assign endOut1 = Delay3_out1;

endmodule  // dvbs2hdlTransmitterCore_PL_Header_FIFO

