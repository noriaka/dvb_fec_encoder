// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_PL_Frame_Generator.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_PL_Frame_Generator
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator
// Hierarchy Level: 3
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_PL_Frame_Generator
          (clk,
           reset,
           enb,
           enb_1_8_0,
           enb_1_16_1,
           enb_1_8_1,
           enb_1_16_0,
           dataIn_re,
           dataIn_im,
           startIn,
           endIn,
           validIn,
           modIdxIn,
           fecframeIn,
           modcod,
           dataOut_re,
           dataOut_im,
           validOut,
           dummyHeaderEnd,
           PLHeaderEnd);


  input   clk;
  input   reset;
  input   enb;
  input   enb_1_8_0;
  input   enb_1_16_1;
  input   enb_1_8_1;
  input   enb_1_16_0;
  input   signed [17:0] dataIn_re;  // sfix18_En16
  input   signed [17:0] dataIn_im;  // sfix18_En16
  input   startIn;
  input   endIn;
  input   validIn;
  input   [1:0] modIdxIn;  // ufix2
  input   fecframeIn;
  input   [4:0] modcod;  // ufix5
  output  signed [17:0] dataOut_re;  // sfix18_En16
  output  signed [17:0] dataOut_im;  // sfix18_En16
  output  validOut;
  output  dummyHeaderEnd;
  output  PLHeaderEnd;


  wire validOut_1;
  reg  Downsample_bypass_reg;  // ufix1
  wire Downsample_out1;
  wire Constant2_out1;
  reg [4:0] Downsample4_bypass_reg;  // ufix5
  wire [4:0] Downsample4_out1;  // ufix5
  reg  Downsample3_bypass_reg;  // ufix1
  wire Downsample3_out1;
  wire signed [17:0] PL_Header_Generator_out1_re;  // sfix18_En16
  wire signed [17:0] PL_Header_Generator_out1_im;  // sfix18_En16
  wire PL_Header_Generator_out2;
  reg signed [17:0] Delay_out1_re;  // sfix18_En16
  reg signed [17:0] Delay_out1_im;  // sfix18_En16
  reg  Delay2_out1;
  reg signed [17:0] Delay7_reg_re [0:36];  // sfix18_En16 [37]
  reg signed [17:0] Delay7_reg_im [0:36];  // sfix18_En16 [37]
  reg signed [17:0] Delay7_reg_next_re [0:36];  // sfix18_En16 [37]
  reg signed [17:0] Delay7_reg_next_im [0:36];  // sfix18_En16 [37]
  reg signed [17:0] Delay7_out1_re;  // sfix18_En16
  reg signed [17:0] Delay7_out1_im;  // sfix18_En16
  reg  [36:0] Delay1_reg;  // ufix1 [37]
  wire Delay1_out1;
  reg  [36:0] Delay3_reg;  // ufix1 [37]
  wire Delay3_out1;
  reg  [36:0] Delay8_reg;  // ufix1 [37]
  wire Delay8_out1;
  wire signed [17:0] Subsystem_out1_re;  // sfix18_En16
  wire signed [17:0] Subsystem_out1_im;  // sfix18_En16
  wire startOut;
  wire validOut_2;
  reg signed [17:0] Downsample1_bypass_reg_re;  // sfix18_En16
  reg signed [17:0] Downsample1_bypass_reg_im;  // sfix18_En16
  wire signed [17:0] Downsample1_out1_re;  // sfix18_En16
  wire signed [17:0] Downsample1_out1_im;  // sfix18_En16
  reg  Downsample6_bypass_reg;  // ufix1
  wire Downsample6_out1;
  reg  Downsample2_bypass_reg;  // ufix1
  wire Downsample2_out1;
  reg  [36:0] Delay11_reg;  // ufix1 [37]
  wire Delay11_out1;
  reg [1:0] Delay9_reg [0:36];  // ufix2 [37]
  reg [1:0] Delay9_reg_next [0:36];  // ufix2 [37]
  reg [1:0] Delay9_out1;  // ufix2
  wire [14:0] Frame_Length_out1;  // ufix15
  reg [14:0] Downsample5_bypass_reg;  // ufix15
  wire [14:0] Downsample5_out1;  // ufix15
  wire signed [17:0] RAM_FIFO_out1_re;  // sfix18_En16
  wire signed [17:0] RAM_FIFO_out1_im;  // sfix18_En16
  wire RAM_FIFO_out2;
  wire RAM_FIFO_out3;
  wire RAM_FIFO_out4;
  wire signed [17:0] RAM_FIFO_out5_re;  // sfix18_En16
  wire signed [17:0] RAM_FIFO_out5_im;  // sfix18_En16
  wire validOut_3;
  wire signed [17:0] RAM_FIFO_out8_re;  // sfix18_En16
  wire signed [17:0] RAM_FIFO_out8_im;  // sfix18_En16
  wire RAM_FIFO_out10;
  wire signed [17:0] RAM_FIFO_out11_re;  // sfix18_En16
  wire signed [17:0] RAM_FIFO_out11_im;  // sfix18_En16
  wire valid;
  wire RAM_FIFO_out13;
  wire RAM_FIFO_out14;
  wire signed [17:0] Multiplexer_out1_re;  // sfix18_En16
  wire signed [17:0] Multiplexer_out1_im;  // sfix18_En16
  wire Multiplexer_out2;
  wire Multiplexer_out3;
  wire Multiplexer_out4;
  wire signed [17:0] PL_Data_Scrambler_out1_re;  // sfix18_En16
  wire signed [17:0] PL_Data_Scrambler_out1_im;  // sfix18_En16
  wire PL_Data_Scrambler_out2;
  reg signed [31:0] Delay7_t_0_0;  // int32
  reg signed [31:0] Delay7_t_0_1;  // int32
  reg signed [31:0] Delay7_t_1;  // int32
  reg signed [31:0] Delay9_t_0_0;  // int32
  reg signed [31:0] Delay9_t_0_1;  // int32
  reg signed [31:0] Delay9_t_1;  // int32


  dvbs2hdlTransmitterCore_16x u_16x (.clk(clk),
                                     .reset(reset),
                                     .enb(enb),
                                     .trigger(startIn),
                                     .validOut(validOut_1)
                                     );

  // Downsample: Downsample by 16, Sample offset 0 
  // Downsample bypass register
  always @(posedge clk or posedge reset)
    begin : Downsample_bypass_process
      if (reset == 1'b1) begin
        Downsample_bypass_reg <= 1'b0;
      end
      else begin
        if (enb_1_16_1) begin
          Downsample_bypass_reg <= validOut_1;
        end
      end
    end

  assign Downsample_out1 = (enb_1_16_1 == 1'b1 ? validOut_1 :
              Downsample_bypass_reg);



  assign Constant2_out1 = 1'b1;



  // Downsample4: Downsample by 16, Sample offset 0 
  // Downsample bypass register
  always @(posedge clk or posedge reset)
    begin : Downsample4_bypass_process
      if (reset == 1'b1) begin
        Downsample4_bypass_reg <= 5'b00000;
      end
      else begin
        if (enb_1_16_1) begin
          Downsample4_bypass_reg <= modcod;
        end
      end
    end

  assign Downsample4_out1 = (enb_1_16_1 == 1'b1 ? modcod :
              Downsample4_bypass_reg);



  // Downsample3: Downsample by 16, Sample offset 0 
  // Downsample bypass register
  always @(posedge clk or posedge reset)
    begin : Downsample3_bypass_process
      if (reset == 1'b1) begin
        Downsample3_bypass_reg <= 1'b0;
      end
      else begin
        if (enb_1_16_1) begin
          Downsample3_bypass_reg <= fecframeIn;
        end
      end
    end

  assign Downsample3_out1 = (enb_1_16_1 == 1'b1 ? fecframeIn :
              Downsample3_bypass_reg);



  dvbs2hdlTransmitterCore_PL_Header_Generator u_PL_Header_Generator (.clk(clk),
                                                                     .reset(reset),
                                                                     .enb_1_8_0(enb_1_8_0),
                                                                     .enb_1_16_0(enb_1_16_0),
                                                                     .trigger(Downsample_out1),
                                                                     .pilotActive(Constant2_out1),
                                                                     .modcod(Downsample4_out1),  // ufix5
                                                                     .fecframe(Downsample3_out1),
                                                                     .dataOut_re(PL_Header_Generator_out1_re),  // sfix18_En16
                                                                     .dataOut_im(PL_Header_Generator_out1_im),  // sfix18_En16
                                                                     .validOut(PL_Header_Generator_out2)
                                                                     );

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1_re <= 18'sb000000000000000000;
        Delay_out1_im <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          Delay_out1_re <= PL_Header_Generator_out1_re;
          Delay_out1_im <= PL_Header_Generator_out1_im;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay2_out1 <= PL_Header_Generator_out2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        for(Delay7_t_1 = 32'sd0; Delay7_t_1 <= 32'sd36; Delay7_t_1 = Delay7_t_1 + 32'sd1) begin
          Delay7_reg_re[Delay7_t_1] <= 18'sb000000000000000000;
          Delay7_reg_im[Delay7_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(Delay7_t_0_1 = 32'sd0; Delay7_t_0_1 <= 32'sd36; Delay7_t_0_1 = Delay7_t_0_1 + 32'sd1) begin
            Delay7_reg_re[Delay7_t_0_1] <= Delay7_reg_next_re[Delay7_t_0_1];
            Delay7_reg_im[Delay7_t_0_1] <= Delay7_reg_next_im[Delay7_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay7_out1_re = Delay7_reg_re[36];
    Delay7_out1_im = Delay7_reg_im[36];
    Delay7_reg_next_re[0] = dataIn_re;
    Delay7_reg_next_im[0] = dataIn_im;

    for(Delay7_t_0_0 = 32'sd0; Delay7_t_0_0 <= 32'sd35; Delay7_t_0_0 = Delay7_t_0_0 + 32'sd1) begin
      Delay7_reg_next_re[Delay7_t_0_0 + 32'sd1] = Delay7_reg_re[Delay7_t_0_0];
      Delay7_reg_next_im[Delay7_t_0_0 + 32'sd1] = Delay7_reg_im[Delay7_t_0_0];
    end

  end



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg <= {37{1'b0}};
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= startIn;
          Delay1_reg[32'sd36:32'sd1] <= Delay1_reg[32'sd35:32'sd0];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[36];



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_reg <= {37{1'b0}};
      end
      else begin
        if (enb) begin
          Delay3_reg[0] <= endIn;
          Delay3_reg[32'sd36:32'sd1] <= Delay3_reg[32'sd35:32'sd0];
        end
      end
    end

  assign Delay3_out1 = Delay3_reg[36];



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_reg <= {37{1'b0}};
      end
      else begin
        if (enb) begin
          Delay8_reg[0] <= validIn;
          Delay8_reg[32'sd36:32'sd1] <= Delay8_reg[32'sd35:32'sd0];
        end
      end
    end

  assign Delay8_out1 = Delay8_reg[36];



  dvbs2hdlTransmitterCore_Subsystem_block3 u_Subsystem (.clk(clk),
                                                        .reset(reset),
                                                        .enb(enb),
                                                        .data_re(Delay7_out1_re),  // sfix18_En16
                                                        .data_im(Delay7_out1_im),  // sfix18_En16
                                                        .start(Delay1_out1),
                                                        .endIn(Delay3_out1),
                                                        .validIn(Delay8_out1),
                                                        .dataOut_re(Subsystem_out1_re),  // sfix18_En16
                                                        .dataOut_im(Subsystem_out1_im),  // sfix18_En16
                                                        .startOut(startOut),
                                                        .validOut(validOut_2)
                                                        );

  // Downsample1: Downsample by 8, Sample offset 0 
  // Downsample bypass register
  always @(posedge clk or posedge reset)
    begin : Downsample1_bypass_process
      if (reset == 1'b1) begin
        Downsample1_bypass_reg_re <= 18'sb000000000000000000;
        Downsample1_bypass_reg_im <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_8_1) begin
          Downsample1_bypass_reg_im <= Subsystem_out1_im;
          Downsample1_bypass_reg_re <= Subsystem_out1_re;
        end
      end
    end

  assign Downsample1_out1_re = (enb_1_8_1 == 1'b1 ? Subsystem_out1_re :
              Downsample1_bypass_reg_re);
  assign Downsample1_out1_im = (enb_1_8_1 == 1'b1 ? Subsystem_out1_im :
              Downsample1_bypass_reg_im);



  // Downsample6: Downsample by 8, Sample offset 0 
  // Downsample bypass register
  always @(posedge clk or posedge reset)
    begin : Downsample6_bypass_process
      if (reset == 1'b1) begin
        Downsample6_bypass_reg <= 1'b0;
      end
      else begin
        if (enb_1_8_1) begin
          Downsample6_bypass_reg <= startOut;
        end
      end
    end

  assign Downsample6_out1 = (enb_1_8_1 == 1'b1 ? startOut :
              Downsample6_bypass_reg);



  // Downsample2: Downsample by 8, Sample offset 0 
  // Downsample bypass register
  always @(posedge clk or posedge reset)
    begin : Downsample2_bypass_process
      if (reset == 1'b1) begin
        Downsample2_bypass_reg <= 1'b0;
      end
      else begin
        if (enb_1_8_1) begin
          Downsample2_bypass_reg <= validOut_2;
        end
      end
    end

  assign Downsample2_out1 = (enb_1_8_1 == 1'b1 ? validOut_2 :
              Downsample2_bypass_reg);



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_reg <= {37{1'b0}};
      end
      else begin
        if (enb) begin
          Delay11_reg[0] <= fecframeIn;
          Delay11_reg[32'sd36:32'sd1] <= Delay11_reg[32'sd35:32'sd0];
        end
      end
    end

  assign Delay11_out1 = Delay11_reg[36];



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        for(Delay9_t_1 = 32'sd0; Delay9_t_1 <= 32'sd36; Delay9_t_1 = Delay9_t_1 + 32'sd1) begin
          Delay9_reg[Delay9_t_1] <= 2'b00;
        end
      end
      else begin
        if (enb) begin
          for(Delay9_t_0_1 = 32'sd0; Delay9_t_0_1 <= 32'sd36; Delay9_t_0_1 = Delay9_t_0_1 + 32'sd1) begin
            Delay9_reg[Delay9_t_0_1] <= Delay9_reg_next[Delay9_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay9_out1 = Delay9_reg[36];
    Delay9_reg_next[0] = modIdxIn;

    for(Delay9_t_0_0 = 32'sd0; Delay9_t_0_0 <= 32'sd35; Delay9_t_0_0 = Delay9_t_0_0 + 32'sd1) begin
      Delay9_reg_next[Delay9_t_0_0 + 32'sd1] = Delay9_reg[Delay9_t_0_0];
    end

  end



  dvbs2hdlTransmitterCore_Frame_Length u_Frame_Length (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .fecframe(Delay11_out1),
                                                       .modIdx(Delay9_out1),  // ufix2
                                                       .xFECFrameLength(Frame_Length_out1)  // ufix15
                                                       );

  // Downsample5: Downsample by 8, Sample offset 0 
  // Downsample bypass register
  always @(posedge clk or posedge reset)
    begin : Downsample5_bypass_process
      if (reset == 1'b1) begin
        Downsample5_bypass_reg <= 15'b000000000000000;
      end
      else begin
        if (enb_1_8_1) begin
          Downsample5_bypass_reg <= Frame_Length_out1;
        end
      end
    end

  assign Downsample5_out1 = (enb_1_8_1 == 1'b1 ? Frame_Length_out1 :
              Downsample5_bypass_reg);



  dvbs2hdlTransmitterCore_RAM_FIFO u_RAM_FIFO (.clk(clk),
                                               .reset(reset),
                                               .enb_1_8_0(enb_1_8_0),
                                               .dataIn_re(Delay_out1_re),  // sfix18_En16
                                               .dataIn_im(Delay_out1_im),  // sfix18_En16
                                               .validIn(Delay2_out1),
                                               .dataIn1_re(Downsample1_out1_re),  // sfix18_En16
                                               .dataIn1_im(Downsample1_out1_im),  // sfix18_En16
                                               .startIn1(Downsample6_out1),
                                               .validIn1(Downsample2_out1),
                                               .frameLength(Downsample5_out1),  // ufix15
                                               .plheaderData_re(RAM_FIFO_out1_re),  // sfix18_En16
                                               .plheaderData_im(RAM_FIFO_out1_im),  // sfix18_En16
                                               .plheaderStart(RAM_FIFO_out2),
                                               .plheaderEnd(RAM_FIFO_out3),
                                               .plheaderValid(RAM_FIFO_out4),
                                               .pilotData_re(RAM_FIFO_out5_re),  // sfix18_En16
                                               .pilotData_im(RAM_FIFO_out5_im),  // sfix18_En16
                                               .pilotValid(validOut_3),
                                               .slotsData_re(RAM_FIFO_out8_re),  // sfix18_En16
                                               .slotsData_im(RAM_FIFO_out8_im),  // sfix18_En16
                                               .slotsValid(RAM_FIFO_out10),
                                               .dummyData_re(RAM_FIFO_out11_re),  // sfix18_En16
                                               .dummyData_im(RAM_FIFO_out11_im),  // sfix18_En16
                                               .dummyValid(valid),
                                               .dummyHeaderSrt(RAM_FIFO_out13),
                                               .dummyHeaderEnd(RAM_FIFO_out14)
                                               );

  dvbs2hdlTransmitterCore_Multiplexer_block u_Multiplexer (.plheaderData_re(RAM_FIFO_out1_re),  // sfix18_En16
                                                           .plheaderData_im(RAM_FIFO_out1_im),  // sfix18_En16
                                                           .plheaderStart(RAM_FIFO_out2),
                                                           .plheaderEnd(RAM_FIFO_out3),
                                                           .plheaderValid(RAM_FIFO_out4),
                                                           .pilotdata_re(RAM_FIFO_out5_re),  // sfix18_En16
                                                           .pilotdata_im(RAM_FIFO_out5_im),  // sfix18_En16
                                                           .pilotValid(validOut_3),
                                                           .slotsData_re(RAM_FIFO_out8_re),  // sfix18_En16
                                                           .slotsData_im(RAM_FIFO_out8_im),  // sfix18_En16
                                                           .slotsValid(RAM_FIFO_out10),
                                                           .dummyData_re(RAM_FIFO_out11_re),  // sfix18_En16
                                                           .dummyData_im(RAM_FIFO_out11_im),  // sfix18_En16
                                                           .dummyValid(valid),
                                                           .dummyHeaderSrt(RAM_FIFO_out13),
                                                           .dummyHeaderEnd(RAM_FIFO_out14),
                                                           .dataOut_re(Multiplexer_out1_re),  // sfix18_En16
                                                           .dataOut_im(Multiplexer_out1_im),  // sfix18_En16
                                                           .startOfPlheader(Multiplexer_out2),
                                                           .endOfPlheader(Multiplexer_out3),
                                                           .validOut(Multiplexer_out4)
                                                           );

  dvbs2hdlTransmitterCore_PL_Data_Scrambler u_PL_Data_Scrambler (.clk(clk),
                                                                 .reset(reset),
                                                                 .enb_1_8_0(enb_1_8_0),
                                                                 .dataIn_re(Multiplexer_out1_re),  // sfix18_En16
                                                                 .dataIn_im(Multiplexer_out1_im),  // sfix18_En16
                                                                 .startOfPlheader(Multiplexer_out2),
                                                                 .endOfPlheader(Multiplexer_out3),
                                                                 .validIn(Multiplexer_out4),
                                                                 .dataOut_re(PL_Data_Scrambler_out1_re),  // sfix18_En16
                                                                 .dataOut_im(PL_Data_Scrambler_out1_im),  // sfix18_En16
                                                                 .validOut(PL_Data_Scrambler_out2)
                                                                 );

  assign dataOut_re = PL_Data_Scrambler_out1_re;

  assign dataOut_im = PL_Data_Scrambler_out1_im;

  assign validOut = PL_Data_Scrambler_out2;

  assign dummyHeaderEnd = RAM_FIFO_out14;

  assign PLHeaderEnd = RAM_FIFO_out3;

endmodule  // dvbs2hdlTransmitterCore_PL_Frame_Generator

