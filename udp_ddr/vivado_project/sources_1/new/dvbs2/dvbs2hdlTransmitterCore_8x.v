// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_8x.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_8x
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator/Subsystem/8x
// Hierarchy Level: 5
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_8x
          (clk,
           reset,
           enb,
           startIn,
           endIn,
           startOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   startIn;
  input   endIn;
  output  startOut;
  output  validOut;


  reg  startOut_1;
  reg  validOut_1;
  reg [2:0] count;  // ufix3
  reg  countActive;
  reg  isEndReceived;
  reg  startReg;
  reg  validReg;
  reg [2:0] count_next;  // ufix3
  reg  countActive_next;
  reg  isEndReceived_next;
  reg  startReg_next;
  reg  validReg_next;
  reg  countActive_temp;
  reg  isEndReceived_temp;
  reg [3:0] add_temp;  // ufix4
  reg [3:0] t_0;  // ufix4


  always @(posedge clk or posedge reset)
    begin : alpha8x_process
      if (reset == 1'b1) begin
        count <= 3'b000;
        countActive <= 1'b0;
        isEndReceived <= 1'b0;
        startReg <= 1'b0;
        validReg <= 1'b0;
      end
      else begin
        if (enb) begin
          count <= count_next;
          countActive <= countActive_next;
          isEndReceived <= isEndReceived_next;
          startReg <= startReg_next;
          validReg <= validReg_next;
        end
      end
    end

  always @(count, countActive, endIn, isEndReceived, startIn, startReg, validReg) begin
    add_temp = 4'b0000;
    t_0 = 4'b0000;
    countActive_temp = countActive;
    isEndReceived_temp = isEndReceived;
    count_next = count;
    startReg_next = startReg;
    if (startIn) begin
      countActive_temp = 1'b1;
      startReg_next = 1'b1;
    end
    validReg_next = countActive_temp;
    if (endIn) begin
      isEndReceived_temp = 1'b1;
    end
    if (countActive_temp) begin
      if (count == 3'b111) begin
        count_next = 3'b000;
        startReg_next = 1'b0;
        if (isEndReceived_temp) begin
          isEndReceived_temp = 1'b0;
          countActive_temp = 1'b0;
        end
      end
      else begin
        t_0 = {1'b0, count};
        add_temp = t_0 + 4'b0001;
        if (add_temp[3] != 1'b0) begin
          count_next = 3'b111;
        end
        else begin
          count_next = add_temp[2:0];
        end
      end
    end
    startOut_1 = startReg;
    validOut_1 = validReg;
    countActive_next = countActive_temp;
    isEndReceived_next = isEndReceived_temp;
  end



  assign startOut = startOut_1;

  assign validOut = validOut_1;

endmodule  // dvbs2hdlTransmitterCore_8x

