// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_PLSC_Scrambler.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_PLSC_Scrambler
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator/PL Header Generator/PL Header Bits Generator/PLSC 
// Generator/PLSC Scramble
// Hierarchy Level: 7
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_PLSC_Scrambler
          (clk,
           reset,
           enb_1_8_0,
           dataIn,
           validIn,
           resetIn,
           dataOut,
           validOut);


  input   clk;
  input   reset;
  input   enb_1_8_0;
  input   dataIn;
  input   validIn;
  input   resetIn;
  output  dataOut;
  output  validOut;


  wire [5:0] count_step;  // ufix6
  reg [5:0] delayMatch_reg [0:1];  // ufix6 [2]
  wire [5:0] delayMatch_reg_next [0:1];  // ufix6 [2]
  wire [5:0] count_step_1;  // ufix6
  wire [5:0] count_from;  // ufix6
  reg [5:0] delayMatch1_reg [0:1];  // ufix6 [2]
  wire [5:0] delayMatch1_reg_next [0:1];  // ufix6 [2]
  wire [5:0] count_from_1;  // ufix6
  wire [5:0] count_reset;  // ufix6
  reg [5:0] delayMatch2_reg [0:1];  // ufix6 [2]
  wire [5:0] delayMatch2_reg_next [0:1];  // ufix6 [2]
  wire [5:0] count_reset_1;  // ufix6
  wire stateControl_1;
  reg  [1:0] delayMatch3_reg;  // ufix1 [2]
  wire stateControl_2;
  wire enb_1_8_0_gated;
  reg [5:0] PLSC_Valid_Counter_out1;  // ufix6
  wire [5:0] count;  // ufix6
  wire need_to_wrap;
  wire [5:0] count_value;  // ufix6
  wire [5:0] count_1;  // ufix6
  wire [5:0] count_2;  // ufix6
  wire [5:0] prelookup_idx;  // ufix6
  wire [63:0] alpha1_D_Lookup_Table_1;  // ufix1 [64]
  wire out;  // ufix1
  reg  dataIn_1;
  reg  alpha1_D_Lookup_Table_out1;  // ufix1
  wire Data_Type_Conversion_out1;
  wire Logical_Operator_out1;
  reg signed [31:0] delayMatch_t_0_0;  // int32
  reg signed [31:0] delayMatch_t_1;  // int32
  reg signed [31:0] delayMatch1_t_0_0;  // int32
  reg signed [31:0] delayMatch1_t_1;  // int32
  reg signed [31:0] delayMatch2_t_0_0;  // int32
  reg signed [31:0] delayMatch2_t_1;  // int32

  initial begin
    alpha1_D_Lookup_Table_out1 = 1'b0;
  end

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 63
  assign count_step = 6'b000001;



  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        for(delayMatch_t_1 = 32'sd0; delayMatch_t_1 <= 32'sd1; delayMatch_t_1 = delayMatch_t_1 + 32'sd1) begin
          delayMatch_reg[delayMatch_t_1] <= 6'b000000;
        end
      end
      else begin
        if (enb_1_8_0) begin
          for(delayMatch_t_0_0 = 32'sd0; delayMatch_t_0_0 <= 32'sd1; delayMatch_t_0_0 = delayMatch_t_0_0 + 32'sd1) begin
            delayMatch_reg[delayMatch_t_0_0] <= delayMatch_reg_next[delayMatch_t_0_0];
          end
        end
      end
    end

  assign count_step_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = count_step;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign count_from = 6'b000000;



  always @(posedge clk or posedge reset)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        for(delayMatch1_t_1 = 32'sd0; delayMatch1_t_1 <= 32'sd1; delayMatch1_t_1 = delayMatch1_t_1 + 32'sd1) begin
          delayMatch1_reg[delayMatch1_t_1] <= 6'b000000;
        end
      end
      else begin
        if (enb_1_8_0) begin
          for(delayMatch1_t_0_0 = 32'sd0; delayMatch1_t_0_0 <= 32'sd1; delayMatch1_t_0_0 = delayMatch1_t_0_0 + 32'sd1) begin
            delayMatch1_reg[delayMatch1_t_0_0] <= delayMatch1_reg_next[delayMatch1_t_0_0];
          end
        end
      end
    end

  assign count_from_1 = delayMatch1_reg[1];
  assign delayMatch1_reg_next[0] = count_from;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];



  assign count_reset = 6'b000000;



  always @(posedge clk or posedge reset)
    begin : delayMatch2_process
      if (reset == 1'b1) begin
        for(delayMatch2_t_1 = 32'sd0; delayMatch2_t_1 <= 32'sd1; delayMatch2_t_1 = delayMatch2_t_1 + 32'sd1) begin
          delayMatch2_reg[delayMatch2_t_1] <= 6'b000000;
        end
      end
      else begin
        if (enb_1_8_0) begin
          for(delayMatch2_t_0_0 = 32'sd0; delayMatch2_t_0_0 <= 32'sd1; delayMatch2_t_0_0 = delayMatch2_t_0_0 + 32'sd1) begin
            delayMatch2_reg[delayMatch2_t_0_0] <= delayMatch2_reg_next[delayMatch2_t_0_0];
          end
        end
      end
    end

  assign count_reset_1 = delayMatch2_reg[1];
  assign delayMatch2_reg_next[0] = count_reset;
  assign delayMatch2_reg_next[1] = delayMatch2_reg[0];



  assign stateControl_1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch3_process
      if (reset == 1'b1) begin
        delayMatch3_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch3_reg[0] <= stateControl_1;
          delayMatch3_reg[1] <= delayMatch3_reg[0];
        end
      end
    end

  assign stateControl_2 = delayMatch3_reg[1];



  assign enb_1_8_0_gated = stateControl_2 && enb_1_8_0;

  assign count = PLSC_Valid_Counter_out1 + count_step_1;



  assign need_to_wrap = PLSC_Valid_Counter_out1 == 6'b111111;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from_1);



  assign count_1 = (validIn == 1'b0 ? PLSC_Valid_Counter_out1 :
              count_value);



  assign count_2 = (resetIn == 1'b0 ? count_1 :
              count_reset_1);



  always @(posedge clk or posedge reset)
    begin : PLSC_Valid_Counter_process
      if (reset == 1'b1) begin
        PLSC_Valid_Counter_out1 <= 6'b000000;
      end
      else begin
        if (enb_1_8_0_gated) begin
          PLSC_Valid_Counter_out1 <= count_2;
        end
      end
    end



  assign prelookup_idx = (PLSC_Valid_Counter_out1 == 6'b000000 ? 6'b000000 :
              (PLSC_Valid_Counter_out1 == 6'b111111 ? 6'b111111 :
              PLSC_Valid_Counter_out1));



  assign alpha1_D_Lookup_Table_1[0] = 1'b0;
  assign alpha1_D_Lookup_Table_1[1] = 1'b1;
  assign alpha1_D_Lookup_Table_1[2] = 1'b1;
  assign alpha1_D_Lookup_Table_1[3] = 1'b1;
  assign alpha1_D_Lookup_Table_1[4] = 1'b0;
  assign alpha1_D_Lookup_Table_1[5] = 1'b0;
  assign alpha1_D_Lookup_Table_1[6] = 1'b0;
  assign alpha1_D_Lookup_Table_1[7] = 1'b1;
  assign alpha1_D_Lookup_Table_1[8] = 1'b1;
  assign alpha1_D_Lookup_Table_1[9] = 1'b0;
  assign alpha1_D_Lookup_Table_1[10] = 1'b0;
  assign alpha1_D_Lookup_Table_1[11] = 1'b1;
  assign alpha1_D_Lookup_Table_1[12] = 1'b1;
  assign alpha1_D_Lookup_Table_1[13] = 1'b1;
  assign alpha1_D_Lookup_Table_1[14] = 1'b0;
  assign alpha1_D_Lookup_Table_1[15] = 1'b1;
  assign alpha1_D_Lookup_Table_1[16] = 1'b1;
  assign alpha1_D_Lookup_Table_1[17] = 1'b0;
  assign alpha1_D_Lookup_Table_1[18] = 1'b0;
  assign alpha1_D_Lookup_Table_1[19] = 1'b0;
  assign alpha1_D_Lookup_Table_1[20] = 1'b0;
  assign alpha1_D_Lookup_Table_1[21] = 1'b0;
  assign alpha1_D_Lookup_Table_1[22] = 1'b1;
  assign alpha1_D_Lookup_Table_1[23] = 1'b1;
  assign alpha1_D_Lookup_Table_1[24] = 1'b1;
  assign alpha1_D_Lookup_Table_1[25] = 1'b1;
  assign alpha1_D_Lookup_Table_1[26] = 1'b0;
  assign alpha1_D_Lookup_Table_1[27] = 1'b0;
  assign alpha1_D_Lookup_Table_1[28] = 1'b1;
  assign alpha1_D_Lookup_Table_1[29] = 1'b0;
  assign alpha1_D_Lookup_Table_1[30] = 1'b0;
  assign alpha1_D_Lookup_Table_1[31] = 1'b1;
  assign alpha1_D_Lookup_Table_1[32] = 1'b0;
  assign alpha1_D_Lookup_Table_1[33] = 1'b1;
  assign alpha1_D_Lookup_Table_1[34] = 1'b0;
  assign alpha1_D_Lookup_Table_1[35] = 1'b1;
  assign alpha1_D_Lookup_Table_1[36] = 1'b0;
  assign alpha1_D_Lookup_Table_1[37] = 1'b0;
  assign alpha1_D_Lookup_Table_1[38] = 1'b1;
  assign alpha1_D_Lookup_Table_1[39] = 1'b1;
  assign alpha1_D_Lookup_Table_1[40] = 1'b0;
  assign alpha1_D_Lookup_Table_1[41] = 1'b1;
  assign alpha1_D_Lookup_Table_1[42] = 1'b0;
  assign alpha1_D_Lookup_Table_1[43] = 1'b0;
  assign alpha1_D_Lookup_Table_1[44] = 1'b0;
  assign alpha1_D_Lookup_Table_1[45] = 1'b0;
  assign alpha1_D_Lookup_Table_1[46] = 1'b1;
  assign alpha1_D_Lookup_Table_1[47] = 1'b0;
  assign alpha1_D_Lookup_Table_1[48] = 1'b0;
  assign alpha1_D_Lookup_Table_1[49] = 1'b0;
  assign alpha1_D_Lookup_Table_1[50] = 1'b1;
  assign alpha1_D_Lookup_Table_1[51] = 1'b0;
  assign alpha1_D_Lookup_Table_1[52] = 1'b1;
  assign alpha1_D_Lookup_Table_1[53] = 1'b1;
  assign alpha1_D_Lookup_Table_1[54] = 1'b0;
  assign alpha1_D_Lookup_Table_1[55] = 1'b1;
  assign alpha1_D_Lookup_Table_1[56] = 1'b1;
  assign alpha1_D_Lookup_Table_1[57] = 1'b1;
  assign alpha1_D_Lookup_Table_1[58] = 1'b1;
  assign alpha1_D_Lookup_Table_1[59] = 1'b1;
  assign alpha1_D_Lookup_Table_1[60] = 1'b1;
  assign alpha1_D_Lookup_Table_1[61] = 1'b0;
  assign alpha1_D_Lookup_Table_1[62] = 1'b1;
  assign alpha1_D_Lookup_Table_1[63] = 1'b0;
  assign out = alpha1_D_Lookup_Table_1[prelookup_idx];



  always @(posedge clk or posedge reset)
    begin : delayMatch4_process
      if (reset == 1'b1) begin
        dataIn_1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          dataIn_1 <= dataIn;
        end
      end
    end



  always @(posedge clk)
    begin : PipelineRegister_process
      if (enb_1_8_0) begin
        alpha1_D_Lookup_Table_out1 <= out;
      end
    end



  assign Data_Type_Conversion_out1 = alpha1_D_Lookup_Table_out1;



  assign Logical_Operator_out1 = dataIn_1 ^ Data_Type_Conversion_out1;



  assign dataOut = Logical_Operator_out1;

  assign validOut = validIn;

endmodule  // dvbs2hdlTransmitterCore_PLSC_Scrambler

