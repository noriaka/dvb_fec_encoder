// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_In_Frame_Count.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_In_Frame_Count
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator/RAM FIFO/PL Data FIFO/In Frame Count
// Hierarchy Level: 6
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_In_Frame_Count
          (clk,
           reset,
           enb_1_8_0,
           enb_1,
           countToValue,
           endOut);


  input   clk;
  input   reset;
  input   enb_1_8_0;
  input   enb_1;
  input   [14:0] countToValue;  // ufix15
  output  endOut;


  wire stateControl_1;
  reg  [1:0] delayMatch_reg;  // ufix1 [2]
  wire stateControl_2;
  wire enb_1_8_0_gated;
  reg [14:0] countOut;  // ufix15
  reg  endOut_1;
  reg [14:0] count;  // ufix15
  reg [14:0] count_next;  // ufix15
  wire endOut_bypass;
  reg  endOut_last_value;
  reg signed [16:0] sub_temp;  // sfix17
  reg [15:0] cast;  // ufix16
  reg signed [16:0] sub_temp_0;  // sfix17
  reg [15:0] cast_0;  // ufix16
  reg [15:0] add_temp;  // ufix16
  reg [15:0] t_0;  // ufix16
  reg [15:0] t_1;  // ufix16
  reg [15:0] t_2;  // ufix16
  reg signed [16:0] t_3;  // sfix17
  reg [15:0] t_4;  // ufix16
  reg signed [16:0] t_5;  // sfix17
  reg [15:0] t_6;  // ufix16


  assign stateControl_1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch_reg[0] <= stateControl_1;
          delayMatch_reg[1] <= delayMatch_reg[0];
        end
      end
    end

  assign stateControl_2 = delayMatch_reg[1];



  assign enb_1_8_0_gated = stateControl_2 && enb_1_8_0;

  always @(posedge clk or posedge reset)
    begin : In_Frame_Count_process
      if (reset == 1'b1) begin
        count <= 15'b000000000000000;
      end
      else begin
        if (enb_1_8_0_gated) begin
          count <= count_next;
        end
      end
    end

  always @(count, countToValue, enb_1) begin
    sub_temp = 17'sb00000000000000000;
    sub_temp_0 = 17'sb00000000000000000;
    add_temp = 16'b0000000000000000;
    t_4 = 16'b0000000000000000;
    t_5 = 17'sb00000000000000000;
    t_0 = 16'b0000000000000000;
    t_6 = 16'b0000000000000000;
    t_2 = 16'b0000000000000000;
    t_3 = 17'sb00000000000000000;
    t_1 = 16'b0000000000000000;
    cast = 16'b0000000000000000;
    cast_0 = 16'b0000000000000000;
    count_next = count;
    if (countToValue == 15'b000000000000000) begin
      endOut_1 = 1'b0;
    end
    else begin
      t_2 = {1'b0, countToValue};
      t_3 = {1'b0, t_2};
      sub_temp = t_3 - 17'sb00000000000000001;
      if (sub_temp[16] == 1'b1) begin
        cast = 16'b0000000000000000;
      end
      else begin
        cast = sub_temp[15:0];
      end
      t_1 = {1'b0, count};
      endOut_1 = (t_1 == cast) && enb_1;
    end
    if (enb_1) begin
      t_4 = {1'b0, countToValue};
      t_5 = {1'b0, t_4};
      sub_temp_0 = t_5 - 17'sb00000000000000001;
      if (sub_temp_0[16] == 1'b1) begin
        cast_0 = 16'b0000000000000000;
      end
      else begin
        cast_0 = sub_temp_0[15:0];
      end
      t_0 = {1'b0, count};
      if ((count != 15'b000000000000000) && (t_0 == cast_0)) begin
        count_next = 15'b000000000000000;
      end
      else begin
        t_6 = {1'b0, count};
        add_temp = t_6 + 16'b0000000000000001;
        if (add_temp[15] != 1'b0) begin
          count_next = 15'b111111111111111;
        end
        else begin
          count_next = add_temp[14:0];
        end
      end
    end
    countOut = count;
  end



  always @(posedge clk or posedge reset)
    begin : out1_bypass_process
      if (reset == 1'b1) begin
        endOut_last_value <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated) begin
          endOut_last_value <= endOut_bypass;
        end
      end
    end



  assign endOut_bypass = (stateControl_2 == 1'b0 ? endOut_last_value :
              endOut_1);



  assign endOut = endOut_bypass;

endmodule  // dvbs2hdlTransmitterCore_In_Frame_Count

