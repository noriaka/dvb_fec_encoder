// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_Bi_Orthogonal_Coding_32_6.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_Bi_Orthogonal_Coding_32_6
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator/PL Header Generator/PL Header Bits Generator/PLSC 
// Generator/Bi Orthogonal Coding (32,6
// Hierarchy Level: 7
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_Bi_Orthogonal_Coding_32_6
          (clk,
           reset,
           enb_1_16_0,
           bitsStart,
           bitsIn,
           bitsValidIn,
           bitsOut_0,
           bitsOut_1,
           bitsOut_2,
           bitsOut_3,
           bitsOut_4,
           bitsOut_5,
           bitsOut_6,
           bitsOut_7,
           bitsOut_8,
           bitsOut_9,
           bitsOut_10,
           bitsOut_11,
           bitsOut_12,
           bitsOut_13,
           bitsOut_14,
           bitsOut_15,
           bitsOut_16,
           bitsOut_17,
           bitsOut_18,
           bitsOut_19,
           bitsOut_20,
           bitsOut_21,
           bitsOut_22,
           bitsOut_23,
           bitsOut_24,
           bitsOut_25,
           bitsOut_26,
           bitsOut_27,
           bitsOut_28,
           bitsOut_29,
           bitsOut_30,
           bitsOut_31,
           done);


  input   clk;
  input   reset;
  input   enb_1_16_0;
  input   bitsStart;
  input   bitsIn;
  input   bitsValidIn;
  output  bitsOut_0;  // ufix1
  output  bitsOut_1;  // ufix1
  output  bitsOut_2;  // ufix1
  output  bitsOut_3;  // ufix1
  output  bitsOut_4;  // ufix1
  output  bitsOut_5;  // ufix1
  output  bitsOut_6;  // ufix1
  output  bitsOut_7;  // ufix1
  output  bitsOut_8;  // ufix1
  output  bitsOut_9;  // ufix1
  output  bitsOut_10;  // ufix1
  output  bitsOut_11;  // ufix1
  output  bitsOut_12;  // ufix1
  output  bitsOut_13;  // ufix1
  output  bitsOut_14;  // ufix1
  output  bitsOut_15;  // ufix1
  output  bitsOut_16;  // ufix1
  output  bitsOut_17;  // ufix1
  output  bitsOut_18;  // ufix1
  output  bitsOut_19;  // ufix1
  output  bitsOut_20;  // ufix1
  output  bitsOut_21;  // ufix1
  output  bitsOut_22;  // ufix1
  output  bitsOut_23;  // ufix1
  output  bitsOut_24;  // ufix1
  output  bitsOut_25;  // ufix1
  output  bitsOut_26;  // ufix1
  output  bitsOut_27;  // ufix1
  output  bitsOut_28;  // ufix1
  output  bitsOut_29;  // ufix1
  output  bitsOut_30;  // ufix1
  output  bitsOut_31;  // ufix1
  output  done;


  reg  Delay_out1;
  wire [2:0] count_step;  // ufix3
  wire [2:0] count_from;  // ufix3
  wire [2:0] count_reset;  // ufix3
  reg [2:0] HDL_Counter_out1;  // ufix3
  wire [2:0] count;  // ufix3
  wire need_to_wrap;
  wire [2:0] count_value;  // ufix3
  wire [2:0] count_1;  // ufix3
  wire [2:0] count_2;  // ufix3
  wire Compare_To_Constant_out1;
  wire Logical_Operator_out1;
  reg  Logical_Operator_out1_1;
  reg  Delay_out1_1;
  wire [31:0] Unit_Delay_Enabled_Resettable_Synchronous_iv;  // uint32
  reg [31:0] Unit_Delay_Enabled_Resettable_Synchronous_iv_1;  // uint32
  reg  Delay1_out1;
  reg  Delay1_out1_1;
  wire [31:0] Constant_out1;  // uint32
  wire [2:0] prelookup_idx_sat;  // ufix3
  wire [2:0] prelookup_idx;  // ufix3
  wire [31:0] alpha1_D_Lookup_Table_table_data [0:5];  // ufix32 [6]
  wire [31:0] out;  // uint32
  reg [31:0] alpha1_D_Lookup_Table_out1;  // uint32
  wire [31:0] Switch_out1;  // uint32
  reg [31:0] Unit_Delay_Enabled_Resettable_Synchronous_out1;  // uint32
  wire [31:0] Bitwise_Operator_out1;  // uint32
  wire [31:0] Unit_Delay_Enabled_Resettable_Synchronous_ectrl;  // uint32
  wire [31:0] Unit_Delay_Enabled_Resettable_Synchronous_toDelay;  // uint32
  reg [31:0] Unit_Delay_Enabled_Synchronous_out1;  // uint32
  wire [31:0] Unit_Delay_Enabled_Synchronous_ectrl;  // uint32
  wire Integer_to_Bit_Convertor_out1_0;  // ufix1
  wire Integer_to_Bit_Convertor_out1_1;  // ufix1
  wire Integer_to_Bit_Convertor_out1_2;  // ufix1
  wire Integer_to_Bit_Convertor_out1_3;  // ufix1
  wire Integer_to_Bit_Convertor_out1_4;  // ufix1
  wire Integer_to_Bit_Convertor_out1_5;  // ufix1
  wire Integer_to_Bit_Convertor_out1_6;  // ufix1
  wire Integer_to_Bit_Convertor_out1_7;  // ufix1
  wire Integer_to_Bit_Convertor_out1_8;  // ufix1
  wire Integer_to_Bit_Convertor_out1_9;  // ufix1
  wire Integer_to_Bit_Convertor_out1_10;  // ufix1
  wire Integer_to_Bit_Convertor_out1_11;  // ufix1
  wire Integer_to_Bit_Convertor_out1_12;  // ufix1
  wire Integer_to_Bit_Convertor_out1_13;  // ufix1
  wire Integer_to_Bit_Convertor_out1_14;  // ufix1
  wire Integer_to_Bit_Convertor_out1_15;  // ufix1
  wire Integer_to_Bit_Convertor_out1_16;  // ufix1
  wire Integer_to_Bit_Convertor_out1_17;  // ufix1
  wire Integer_to_Bit_Convertor_out1_18;  // ufix1
  wire Integer_to_Bit_Convertor_out1_19;  // ufix1
  wire Integer_to_Bit_Convertor_out1_20;  // ufix1
  wire Integer_to_Bit_Convertor_out1_21;  // ufix1
  wire Integer_to_Bit_Convertor_out1_22;  // ufix1
  wire Integer_to_Bit_Convertor_out1_23;  // ufix1
  wire Integer_to_Bit_Convertor_out1_24;  // ufix1
  wire Integer_to_Bit_Convertor_out1_25;  // ufix1
  wire Integer_to_Bit_Convertor_out1_26;  // ufix1
  wire Integer_to_Bit_Convertor_out1_27;  // ufix1
  wire Integer_to_Bit_Convertor_out1_28;  // ufix1
  wire Integer_to_Bit_Convertor_out1_29;  // ufix1
  wire Integer_to_Bit_Convertor_out1_30;  // ufix1
  wire Integer_to_Bit_Convertor_out1_31;  // ufix1

  initial begin
    alpha1_D_Lookup_Table_out1 = 32'b00000000000000000000000000000000;
  end

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb_1_16_0) begin
          Delay_out1 <= bitsValidIn;
        end
      end
    end



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 5
  assign count_step = 3'b001;



  assign count_from = 3'b000;



  assign count_reset = 3'b000;



  assign count = HDL_Counter_out1 + count_step;



  assign need_to_wrap = HDL_Counter_out1 == 3'b101;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (Delay_out1 == 1'b0 ? HDL_Counter_out1 :
              count_value);



  assign count_2 = (bitsStart == 1'b0 ? count_1 :
              count_reset);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 3'b000;
      end
      else begin
        if (enb_1_16_0) begin
          HDL_Counter_out1 <= count_2;
        end
      end
    end



  assign Compare_To_Constant_out1 = HDL_Counter_out1 == 3'b101;



  assign Logical_Operator_out1 = Compare_To_Constant_out1 & Delay_out1;



  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        Logical_Operator_out1_1 <= 1'b0;
      end
      else begin
        if (enb_1_16_0) begin
          Logical_Operator_out1_1 <= Logical_Operator_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        Delay_out1_1 <= 1'b0;
      end
      else begin
        if (enb_1_16_0) begin
          Delay_out1_1 <= Delay_out1;
        end
      end
    end



  assign Unit_Delay_Enabled_Resettable_Synchronous_iv = 32'b00000000000000000000000000000000;



  always @(posedge clk or posedge reset)
    begin : delayMatch2_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Resettable_Synchronous_iv_1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb_1_16_0) begin
          Unit_Delay_Enabled_Resettable_Synchronous_iv_1 <= Unit_Delay_Enabled_Resettable_Synchronous_iv;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb_1_16_0) begin
          Delay1_out1 <= bitsIn;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        Delay1_out1_1 <= 1'b0;
      end
      else begin
        if (enb_1_16_0) begin
          Delay1_out1_1 <= Delay1_out1;
        end
      end
    end



  assign Constant_out1 = 32'b00000000000000000000000000000000;



  assign prelookup_idx_sat = (HDL_Counter_out1 == 3'b000 ? 3'b000 :
              (HDL_Counter_out1 >= 3'b101 ? 3'b101 :
              HDL_Counter_out1));



  assign prelookup_idx = (prelookup_idx_sat > 3'b101 ? 3'b101 :
              prelookup_idx_sat);



  assign alpha1_D_Lookup_Table_table_data[0] = 32'b01010101010101010101010101010101;
  assign alpha1_D_Lookup_Table_table_data[1] = 32'b00110011001100110011001100110011;
  assign alpha1_D_Lookup_Table_table_data[2] = 32'b00001111000011110000111100001111;
  assign alpha1_D_Lookup_Table_table_data[3] = 32'b00000000111111110000000011111111;
  assign alpha1_D_Lookup_Table_table_data[4] = 32'b00000000000000001111111111111111;
  assign alpha1_D_Lookup_Table_table_data[5] = 32'b11111111111111111111111111111111;
  assign out = alpha1_D_Lookup_Table_table_data[prelookup_idx];



  always @(posedge clk)
    begin : PipelineRegister_process
      if (enb_1_16_0) begin
        alpha1_D_Lookup_Table_out1 <= out;
      end
    end



  assign Switch_out1 = (Delay1_out1_1 == 1'b0 ? Constant_out1 :
              alpha1_D_Lookup_Table_out1);



  assign Unit_Delay_Enabled_Resettable_Synchronous_ectrl = (Delay_out1_1 == 1'b0 ? Unit_Delay_Enabled_Resettable_Synchronous_out1 :
              Bitwise_Operator_out1);



  assign Unit_Delay_Enabled_Resettable_Synchronous_toDelay = (Logical_Operator_out1_1 == 1'b0 ? Unit_Delay_Enabled_Resettable_Synchronous_ectrl :
              Unit_Delay_Enabled_Resettable_Synchronous_iv_1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Resettable_Synchronous_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Resettable_Synchronous_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb_1_16_0) begin
          Unit_Delay_Enabled_Resettable_Synchronous_out1 <= Unit_Delay_Enabled_Resettable_Synchronous_toDelay;
        end
      end
    end



  assign Bitwise_Operator_out1 = Unit_Delay_Enabled_Resettable_Synchronous_out1 ^ Switch_out1;



  assign Unit_Delay_Enabled_Synchronous_ectrl = (Logical_Operator_out1_1 == 1'b0 ? Unit_Delay_Enabled_Synchronous_out1 :
              Bitwise_Operator_out1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb_1_16_0) begin
          Unit_Delay_Enabled_Synchronous_out1 <= Unit_Delay_Enabled_Synchronous_ectrl;
        end
      end
    end



  dvbs2hdlTransmitterCore_Integer_to_Bit_Convertor u_Integer_to_Bit_Convertor (.dataIn(Unit_Delay_Enabled_Synchronous_out1),  // uint32
                                                                               .dataOut_0(Integer_to_Bit_Convertor_out1_0),  // ufix1
                                                                               .dataOut_1(Integer_to_Bit_Convertor_out1_1),  // ufix1
                                                                               .dataOut_2(Integer_to_Bit_Convertor_out1_2),  // ufix1
                                                                               .dataOut_3(Integer_to_Bit_Convertor_out1_3),  // ufix1
                                                                               .dataOut_4(Integer_to_Bit_Convertor_out1_4),  // ufix1
                                                                               .dataOut_5(Integer_to_Bit_Convertor_out1_5),  // ufix1
                                                                               .dataOut_6(Integer_to_Bit_Convertor_out1_6),  // ufix1
                                                                               .dataOut_7(Integer_to_Bit_Convertor_out1_7),  // ufix1
                                                                               .dataOut_8(Integer_to_Bit_Convertor_out1_8),  // ufix1
                                                                               .dataOut_9(Integer_to_Bit_Convertor_out1_9),  // ufix1
                                                                               .dataOut_10(Integer_to_Bit_Convertor_out1_10),  // ufix1
                                                                               .dataOut_11(Integer_to_Bit_Convertor_out1_11),  // ufix1
                                                                               .dataOut_12(Integer_to_Bit_Convertor_out1_12),  // ufix1
                                                                               .dataOut_13(Integer_to_Bit_Convertor_out1_13),  // ufix1
                                                                               .dataOut_14(Integer_to_Bit_Convertor_out1_14),  // ufix1
                                                                               .dataOut_15(Integer_to_Bit_Convertor_out1_15),  // ufix1
                                                                               .dataOut_16(Integer_to_Bit_Convertor_out1_16),  // ufix1
                                                                               .dataOut_17(Integer_to_Bit_Convertor_out1_17),  // ufix1
                                                                               .dataOut_18(Integer_to_Bit_Convertor_out1_18),  // ufix1
                                                                               .dataOut_19(Integer_to_Bit_Convertor_out1_19),  // ufix1
                                                                               .dataOut_20(Integer_to_Bit_Convertor_out1_20),  // ufix1
                                                                               .dataOut_21(Integer_to_Bit_Convertor_out1_21),  // ufix1
                                                                               .dataOut_22(Integer_to_Bit_Convertor_out1_22),  // ufix1
                                                                               .dataOut_23(Integer_to_Bit_Convertor_out1_23),  // ufix1
                                                                               .dataOut_24(Integer_to_Bit_Convertor_out1_24),  // ufix1
                                                                               .dataOut_25(Integer_to_Bit_Convertor_out1_25),  // ufix1
                                                                               .dataOut_26(Integer_to_Bit_Convertor_out1_26),  // ufix1
                                                                               .dataOut_27(Integer_to_Bit_Convertor_out1_27),  // ufix1
                                                                               .dataOut_28(Integer_to_Bit_Convertor_out1_28),  // ufix1
                                                                               .dataOut_29(Integer_to_Bit_Convertor_out1_29),  // ufix1
                                                                               .dataOut_30(Integer_to_Bit_Convertor_out1_30),  // ufix1
                                                                               .dataOut_31(Integer_to_Bit_Convertor_out1_31)  // ufix1
                                                                               );

  assign bitsOut_0 = Integer_to_Bit_Convertor_out1_0;

  assign bitsOut_1 = Integer_to_Bit_Convertor_out1_1;

  assign bitsOut_2 = Integer_to_Bit_Convertor_out1_2;

  assign bitsOut_3 = Integer_to_Bit_Convertor_out1_3;

  assign bitsOut_4 = Integer_to_Bit_Convertor_out1_4;

  assign bitsOut_5 = Integer_to_Bit_Convertor_out1_5;

  assign bitsOut_6 = Integer_to_Bit_Convertor_out1_6;

  assign bitsOut_7 = Integer_to_Bit_Convertor_out1_7;

  assign bitsOut_8 = Integer_to_Bit_Convertor_out1_8;

  assign bitsOut_9 = Integer_to_Bit_Convertor_out1_9;

  assign bitsOut_10 = Integer_to_Bit_Convertor_out1_10;

  assign bitsOut_11 = Integer_to_Bit_Convertor_out1_11;

  assign bitsOut_12 = Integer_to_Bit_Convertor_out1_12;

  assign bitsOut_13 = Integer_to_Bit_Convertor_out1_13;

  assign bitsOut_14 = Integer_to_Bit_Convertor_out1_14;

  assign bitsOut_15 = Integer_to_Bit_Convertor_out1_15;

  assign bitsOut_16 = Integer_to_Bit_Convertor_out1_16;

  assign bitsOut_17 = Integer_to_Bit_Convertor_out1_17;

  assign bitsOut_18 = Integer_to_Bit_Convertor_out1_18;

  assign bitsOut_19 = Integer_to_Bit_Convertor_out1_19;

  assign bitsOut_20 = Integer_to_Bit_Convertor_out1_20;

  assign bitsOut_21 = Integer_to_Bit_Convertor_out1_21;

  assign bitsOut_22 = Integer_to_Bit_Convertor_out1_22;

  assign bitsOut_23 = Integer_to_Bit_Convertor_out1_23;

  assign bitsOut_24 = Integer_to_Bit_Convertor_out1_24;

  assign bitsOut_25 = Integer_to_Bit_Convertor_out1_25;

  assign bitsOut_26 = Integer_to_Bit_Convertor_out1_26;

  assign bitsOut_27 = Integer_to_Bit_Convertor_out1_27;

  assign bitsOut_28 = Integer_to_Bit_Convertor_out1_28;

  assign bitsOut_29 = Integer_to_Bit_Convertor_out1_29;

  assign bitsOut_30 = Integer_to_Bit_Convertor_out1_30;

  assign bitsOut_31 = Integer_to_Bit_Convertor_out1_31;

  assign done = Logical_Operator_out1;

endmodule  // dvbs2hdlTransmitterCore_Bi_Orthogonal_Coding_32_6

