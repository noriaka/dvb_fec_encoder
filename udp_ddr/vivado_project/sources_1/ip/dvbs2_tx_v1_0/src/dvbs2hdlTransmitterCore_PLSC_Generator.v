// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_PLSC_Generator.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_PLSC_Generator
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator/PL Header Generator/PL Header Bits Generator/PLSC 
// Generato
// Hierarchy Level: 6
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_PLSC_Generator
          (clk,
           reset,
           enb_1_8_0,
           enb_1_16_0,
           bit7,
           bits1to6,
           bitsStart,
           bitsValidIn,
           bitsOut,
           bitsValid);


  input   clk;
  input   reset;
  input   enb_1_8_0;
  input   enb_1_16_0;
  input   bit7;
  input   bits1to6;
  input   bitsStart;
  input   bitsValidIn;
  output  bitsOut;
  output  bitsValid;


  wire Bi_Orthogonal_Coding_32_6_out1_0;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_1;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_2;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_3;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_4;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_5;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_6;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_7;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_8;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_9;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_10;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_11;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_12;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_13;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_14;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_15;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_16;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_17;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_18;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_19;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_20;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_21;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_22;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_23;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_24;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_25;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_26;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_27;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_28;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_29;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_30;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out1_31;  // ufix1
  wire Bi_Orthogonal_Coding_32_6_out2;
  wire dataOut;  // ufix1
  wire validOut;
  wire startOut;
  reg  [4:0] Delay1_reg;  // ufix1 [5]
  wire Delay1_out1;
  wire Repeat1_out1;
  wire count_step;  // ufix1
  reg  [1:0] delayMatch1_reg;  // ufix1 [2]
  wire count_step_1;  // ufix1
  wire count_from;  // ufix1
  reg  [1:0] delayMatch2_reg;  // ufix1 [2]
  wire count_from_1;  // ufix1
  wire stateControl_1;
  reg  [1:0] delayMatch3_reg;  // ufix1 [2]
  wire stateControl_2;
  wire enb_1_8_0_gated;
  reg  HDL_Counter_out1;  // ufix1
  wire count;  // ufix1
  wire need_to_wrap;
  wire count_value;  // ufix1
  wire count_1;  // ufix1
  reg  [4:0] Delay_reg;  // ufix1 [5]
  wire Delay_out1;  // ufix1
  wire Repeat_out1;  // ufix1
  wire Data_Type_Conversion_out1;
  reg  Unit_Delay_Enabled_Synchronous_out1;
  wire Unit_Delay_Enabled_Synchronous_ectrl;
  wire Repeat2_out1;
  reg  [1:0] delayMatch_reg;  // ufix1 [2]
  wire Repeat2_out1_1;
  wire Logical_Operator_out1;
  wire Switch_out1;
  reg  Delay2_out1;
  reg  Upsample_muxsel;  // ufix1
  reg  [4:0] Delay4_reg;  // ufix1 [5]
  wire Delay4_out1;
  reg  Delay3_out1;
  wire Upsample_zero;
  wire Upsample_out1;
  wire PLSC_Scrambler_out1;
  wire PLSC_Scrambler_out2;


  dvbs2hdlTransmitterCore_Bi_Orthogonal_Coding_32_6 u_Bi_Orthogonal_Coding_32_6 (.clk(clk),
                                                                                 .reset(reset),
                                                                                 .enb_1_16_0(enb_1_16_0),
                                                                                 .bitsStart(bitsStart),
                                                                                 .bitsIn(bits1to6),
                                                                                 .bitsValidIn(bitsValidIn),
                                                                                 .bitsOut_0(Bi_Orthogonal_Coding_32_6_out1_0),  // ufix1
                                                                                 .bitsOut_1(Bi_Orthogonal_Coding_32_6_out1_1),  // ufix1
                                                                                 .bitsOut_2(Bi_Orthogonal_Coding_32_6_out1_2),  // ufix1
                                                                                 .bitsOut_3(Bi_Orthogonal_Coding_32_6_out1_3),  // ufix1
                                                                                 .bitsOut_4(Bi_Orthogonal_Coding_32_6_out1_4),  // ufix1
                                                                                 .bitsOut_5(Bi_Orthogonal_Coding_32_6_out1_5),  // ufix1
                                                                                 .bitsOut_6(Bi_Orthogonal_Coding_32_6_out1_6),  // ufix1
                                                                                 .bitsOut_7(Bi_Orthogonal_Coding_32_6_out1_7),  // ufix1
                                                                                 .bitsOut_8(Bi_Orthogonal_Coding_32_6_out1_8),  // ufix1
                                                                                 .bitsOut_9(Bi_Orthogonal_Coding_32_6_out1_9),  // ufix1
                                                                                 .bitsOut_10(Bi_Orthogonal_Coding_32_6_out1_10),  // ufix1
                                                                                 .bitsOut_11(Bi_Orthogonal_Coding_32_6_out1_11),  // ufix1
                                                                                 .bitsOut_12(Bi_Orthogonal_Coding_32_6_out1_12),  // ufix1
                                                                                 .bitsOut_13(Bi_Orthogonal_Coding_32_6_out1_13),  // ufix1
                                                                                 .bitsOut_14(Bi_Orthogonal_Coding_32_6_out1_14),  // ufix1
                                                                                 .bitsOut_15(Bi_Orthogonal_Coding_32_6_out1_15),  // ufix1
                                                                                 .bitsOut_16(Bi_Orthogonal_Coding_32_6_out1_16),  // ufix1
                                                                                 .bitsOut_17(Bi_Orthogonal_Coding_32_6_out1_17),  // ufix1
                                                                                 .bitsOut_18(Bi_Orthogonal_Coding_32_6_out1_18),  // ufix1
                                                                                 .bitsOut_19(Bi_Orthogonal_Coding_32_6_out1_19),  // ufix1
                                                                                 .bitsOut_20(Bi_Orthogonal_Coding_32_6_out1_20),  // ufix1
                                                                                 .bitsOut_21(Bi_Orthogonal_Coding_32_6_out1_21),  // ufix1
                                                                                 .bitsOut_22(Bi_Orthogonal_Coding_32_6_out1_22),  // ufix1
                                                                                 .bitsOut_23(Bi_Orthogonal_Coding_32_6_out1_23),  // ufix1
                                                                                 .bitsOut_24(Bi_Orthogonal_Coding_32_6_out1_24),  // ufix1
                                                                                 .bitsOut_25(Bi_Orthogonal_Coding_32_6_out1_25),  // ufix1
                                                                                 .bitsOut_26(Bi_Orthogonal_Coding_32_6_out1_26),  // ufix1
                                                                                 .bitsOut_27(Bi_Orthogonal_Coding_32_6_out1_27),  // ufix1
                                                                                 .bitsOut_28(Bi_Orthogonal_Coding_32_6_out1_28),  // ufix1
                                                                                 .bitsOut_29(Bi_Orthogonal_Coding_32_6_out1_29),  // ufix1
                                                                                 .bitsOut_30(Bi_Orthogonal_Coding_32_6_out1_30),  // ufix1
                                                                                 .bitsOut_31(Bi_Orthogonal_Coding_32_6_out1_31),  // ufix1
                                                                                 .done(Bi_Orthogonal_Coding_32_6_out2)
                                                                                 );

  dvbs2hdlTransmitterCore_Serialize_on_trigger u_Serialize_on_trigger (.clk(clk),
                                                                       .reset(reset),
                                                                       .enb_1_16_0(enb_1_16_0),
                                                                       .data_0(Bi_Orthogonal_Coding_32_6_out1_0),  // ufix1
                                                                       .data_1(Bi_Orthogonal_Coding_32_6_out1_1),  // ufix1
                                                                       .data_2(Bi_Orthogonal_Coding_32_6_out1_2),  // ufix1
                                                                       .data_3(Bi_Orthogonal_Coding_32_6_out1_3),  // ufix1
                                                                       .data_4(Bi_Orthogonal_Coding_32_6_out1_4),  // ufix1
                                                                       .data_5(Bi_Orthogonal_Coding_32_6_out1_5),  // ufix1
                                                                       .data_6(Bi_Orthogonal_Coding_32_6_out1_6),  // ufix1
                                                                       .data_7(Bi_Orthogonal_Coding_32_6_out1_7),  // ufix1
                                                                       .data_8(Bi_Orthogonal_Coding_32_6_out1_8),  // ufix1
                                                                       .data_9(Bi_Orthogonal_Coding_32_6_out1_9),  // ufix1
                                                                       .data_10(Bi_Orthogonal_Coding_32_6_out1_10),  // ufix1
                                                                       .data_11(Bi_Orthogonal_Coding_32_6_out1_11),  // ufix1
                                                                       .data_12(Bi_Orthogonal_Coding_32_6_out1_12),  // ufix1
                                                                       .data_13(Bi_Orthogonal_Coding_32_6_out1_13),  // ufix1
                                                                       .data_14(Bi_Orthogonal_Coding_32_6_out1_14),  // ufix1
                                                                       .data_15(Bi_Orthogonal_Coding_32_6_out1_15),  // ufix1
                                                                       .data_16(Bi_Orthogonal_Coding_32_6_out1_16),  // ufix1
                                                                       .data_17(Bi_Orthogonal_Coding_32_6_out1_17),  // ufix1
                                                                       .data_18(Bi_Orthogonal_Coding_32_6_out1_18),  // ufix1
                                                                       .data_19(Bi_Orthogonal_Coding_32_6_out1_19),  // ufix1
                                                                       .data_20(Bi_Orthogonal_Coding_32_6_out1_20),  // ufix1
                                                                       .data_21(Bi_Orthogonal_Coding_32_6_out1_21),  // ufix1
                                                                       .data_22(Bi_Orthogonal_Coding_32_6_out1_22),  // ufix1
                                                                       .data_23(Bi_Orthogonal_Coding_32_6_out1_23),  // ufix1
                                                                       .data_24(Bi_Orthogonal_Coding_32_6_out1_24),  // ufix1
                                                                       .data_25(Bi_Orthogonal_Coding_32_6_out1_25),  // ufix1
                                                                       .data_26(Bi_Orthogonal_Coding_32_6_out1_26),  // ufix1
                                                                       .data_27(Bi_Orthogonal_Coding_32_6_out1_27),  // ufix1
                                                                       .data_28(Bi_Orthogonal_Coding_32_6_out1_28),  // ufix1
                                                                       .data_29(Bi_Orthogonal_Coding_32_6_out1_29),  // ufix1
                                                                       .data_30(Bi_Orthogonal_Coding_32_6_out1_30),  // ufix1
                                                                       .data_31(Bi_Orthogonal_Coding_32_6_out1_31),  // ufix1
                                                                       .trigger(Bi_Orthogonal_Coding_32_6_out2),
                                                                       .dataOut(dataOut),  // ufix1
                                                                       .validOut(validOut),
                                                                       .startOut(startOut)
                                                                       );

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg <= {5{1'b0}};
      end
      else begin
        if (enb_1_16_0) begin
          Delay1_reg[0] <= validOut;
          Delay1_reg[32'sd4:32'sd1] <= Delay1_reg[32'sd3:32'sd0];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[4];



  assign Repeat1_out1 = Delay1_out1;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1
  assign count_step = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        delayMatch1_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch1_reg[0] <= count_step;
          delayMatch1_reg[1] <= delayMatch1_reg[0];
        end
      end
    end

  assign count_step_1 = delayMatch1_reg[1];



  assign count_from = 1'b0;



  always @(posedge clk or posedge reset)
    begin : delayMatch2_process
      if (reset == 1'b1) begin
        delayMatch2_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch2_reg[0] <= count_from;
          delayMatch2_reg[1] <= delayMatch2_reg[0];
        end
      end
    end

  assign count_from_1 = delayMatch2_reg[1];



  assign stateControl_1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : delayMatch3_process
      if (reset == 1'b1) begin
        delayMatch3_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch3_reg[0] <= stateControl_1;
          delayMatch3_reg[1] <= delayMatch3_reg[0];
        end
      end
    end

  assign stateControl_2 = delayMatch3_reg[1];



  assign enb_1_8_0_gated = stateControl_2 && enb_1_8_0;

  assign count = HDL_Counter_out1 ^ count_step_1;



  assign need_to_wrap = HDL_Counter_out1 == 1'b1;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from_1);



  assign count_1 = (Repeat1_out1 == 1'b0 ? HDL_Counter_out1 :
              count_value);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0_gated) begin
          HDL_Counter_out1 <= count_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg <= {5{1'b0}};
      end
      else begin
        if (enb_1_16_0) begin
          Delay_reg[0] <= dataOut;
          Delay_reg[32'sd4:32'sd1] <= Delay_reg[32'sd3:32'sd0];
        end
      end
    end

  assign Delay_out1 = Delay_reg[4];



  assign Repeat_out1 = Delay_out1;

  assign Data_Type_Conversion_out1 = Repeat_out1;



  assign Unit_Delay_Enabled_Synchronous_ectrl = (bitsStart == 1'b0 ? Unit_Delay_Enabled_Synchronous_out1 :
              bit7);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous_out1 <= 1'b0;
      end
      else begin
        if (enb_1_16_0) begin
          Unit_Delay_Enabled_Synchronous_out1 <= Unit_Delay_Enabled_Synchronous_ectrl;
        end
      end
    end



  assign Repeat2_out1 = Unit_Delay_Enabled_Synchronous_out1;

  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch_reg[0] <= Repeat2_out1;
          delayMatch_reg[1] <= delayMatch_reg[0];
        end
      end
    end

  assign Repeat2_out1_1 = delayMatch_reg[1];



  assign Logical_Operator_out1 = Repeat2_out1_1 ^ Data_Type_Conversion_out1;



  assign Switch_out1 = (HDL_Counter_out1 == 1'b0 ? Data_Type_Conversion_out1 :
              Logical_Operator_out1);



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay2_out1 <= Switch_out1;
        end
      end
    end



  // Free running, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : Upsample_cnt_process
      if (reset == 1'b1) begin
        Upsample_muxsel <= 1'b1;
      end
      else begin
        if (enb_1_8_0) begin
          Upsample_muxsel <=  ~ Upsample_muxsel;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_reg <= {5{1'b0}};
      end
      else begin
        if (enb_1_16_0) begin
          Delay4_reg[0] <= startOut;
          Delay4_reg[32'sd4:32'sd1] <= Delay4_reg[32'sd3:32'sd0];
        end
      end
    end

  assign Delay4_out1 = Delay4_reg[4];



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay3_out1 <= Repeat1_out1;
        end
      end
    end



  assign Upsample_zero = 1'b0;



  // Upsample: Upsample by 2, Sample offset 0 
  assign Upsample_out1 = (Upsample_muxsel == 1'b1 ? Delay4_out1 :
              Upsample_zero);



  dvbs2hdlTransmitterCore_PLSC_Scrambler u_PLSC_Scrambler (.clk(clk),
                                                           .reset(reset),
                                                           .enb_1_8_0(enb_1_8_0),
                                                           .dataIn(Delay2_out1),
                                                           .validIn(Delay3_out1),
                                                           .resetIn(Upsample_out1),
                                                           .dataOut(PLSC_Scrambler_out1),
                                                           .validOut(PLSC_Scrambler_out2)
                                                           );

  assign bitsOut = PLSC_Scrambler_out1;

  assign bitsValid = PLSC_Scrambler_out2;

endmodule  // dvbs2hdlTransmitterCore_PLSC_Generator

