// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_PL_Scrambler_Gold_Sequence_Generator.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_PL_Scrambler_Gold_Sequence_Generator
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator/PL Data Scrambler/PL Scrambler Gold Sequence 
// Generato
// Hierarchy Level: 5
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_PL_Scrambler_Gold_Sequence_Generator
          (clk,
           reset,
           enb_1_8_0,
           reset_1,
           validIn,
           dataOut,
           validOut);


  input   clk;
  input   reset;
  input   enb_1_8_0;
  input   reset_1;
  input   validIn;
  output  [1:0] dataOut;  // ufix2
  output  validOut;


  reg  Delay3_out1;
  reg  Delay_out1;
  reg  [1:0] Delay11_reg;  // ufix1 [2]
  wire Delay11_out1;
  reg  Delay4_out1;
  wire Logical_Operator2_out1;
  reg  [1:0] Delay1_reg;  // ufix1 [2]
  wire Delay1_out1;
  wire Subsystem_out1;
  wire Subsystem_out2;
  wire Subsystem_out3;
  wire Subsystem_out4;
  reg  Delay6_out1;
  reg  Delay7_out1;
  wire Logical_Operator1_out1;
  reg  Delay10_out1;
  reg  Delay8_out1;
  reg  Delay9_out1;
  wire Logical_Operator_out1;
  reg  Delay12_out1;
  wire [1:0] Bit_Concat_out1;  // ufix2
  reg [1:0] Delay14_out1;  // ufix2
  reg  [1:0] Delay2_reg;  // ufix1 [2]
  wire Delay2_out1;
  reg  [1:0] Delay5_reg;  // ufix1 [2]
  wire Delay5_out1;
  reg  Delay13_out1;
  reg  Delay15_out1;


  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay3_out1 <= reset_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay_out1 <= Delay3_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          Delay11_reg[0] <= Delay_out1;
          Delay11_reg[1] <= Delay11_reg[0];
        end
      end
    end

  assign Delay11_out1 = Delay11_reg[1];



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay4_out1 <= validIn;
        end
      end
    end



  assign Logical_Operator2_out1 = Delay4_out1 | Delay_out1;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          Delay1_reg[0] <= Logical_Operator2_out1;
          Delay1_reg[1] <= Delay1_reg[0];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[1];



  dvbs2hdlTransmitterCore_Subsystem_block1 u_Subsystem (.clk(clk),
                                                        .reset(reset),
                                                        .enb_1_8_0(enb_1_8_0),
                                                        .reset_1(Delay11_out1),
                                                        .Enable(Delay1_out1),
                                                        .xMnp131072(Subsystem_out1),
                                                        .yM131072(Subsystem_out2),
                                                        .xMn(Subsystem_out3),
                                                        .yM0(Subsystem_out4)
                                                        );

  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay6_out1 <= Subsystem_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay7_out1 <= Subsystem_out2;
        end
      end
    end



  assign Logical_Operator1_out1 = Delay6_out1 ^ Delay7_out1;



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay10_out1 <= Logical_Operator1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay8_out1 <= Subsystem_out3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay9_out1 <= Subsystem_out4;
        end
      end
    end



  assign Logical_Operator_out1 = Delay8_out1 ^ Delay9_out1;



  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay12_out1 <= Logical_Operator_out1;
        end
      end
    end



  assign Bit_Concat_out1 = {Delay10_out1, Delay12_out1};



  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_out1 <= 2'b00;
      end
      else begin
        if (enb_1_8_0) begin
          Delay14_out1 <= Bit_Concat_out1;
        end
      end
    end



  assign dataOut = Delay14_out1;

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          Delay2_reg[0] <= Delay4_out1;
          Delay2_reg[1] <= Delay2_reg[0];
        end
      end
    end

  assign Delay2_out1 = Delay2_reg[1];



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          Delay5_reg[0] <= Delay2_out1;
          Delay5_reg[1] <= Delay5_reg[0];
        end
      end
    end

  assign Delay5_out1 = Delay5_reg[1];



  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay13_out1 <= Delay5_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay15_process
      if (reset == 1'b1) begin
        Delay15_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay15_out1 <= Delay13_out1;
        end
      end
    end



  assign validOut = Delay15_out1;

endmodule  // dvbs2hdlTransmitterCore_PL_Scrambler_Gold_Sequence_Generator

