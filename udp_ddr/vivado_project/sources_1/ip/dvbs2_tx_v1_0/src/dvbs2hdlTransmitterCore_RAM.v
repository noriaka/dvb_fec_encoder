// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_RAM.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_RAM
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/Interleaver/DVB-S2 HDL Interleaver/RAM
// Hierarchy Level: 5
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_RAM
          (clk,
           reset,
           enb,
           wr_din,
           wr_addr,
           wr_en,
           rd_addr,
           rd_valid,
           rd_end,
           rd_start,
           rd_dout,
           rd_startOut,
           rd_endOut,
           rd_validOut);


  input   clk;
  input   reset;
  input   enb;
  input   wr_din;
  input   [16:0] wr_addr;  // ufix17
  input   wr_en;
  input   [17:0] rd_addr;  // ufix18
  input   rd_valid;
  input   rd_end;
  input   rd_start;
  output  rd_dout;
  output  rd_startOut;
  output  rd_endOut;
  output  rd_validOut;


  reg  [1:0] Delay12_reg;  // ufix1 [2]
  wire Delay12_out1;
  reg [16:0] Delay6_reg [0:1];  // ufix17 [2]
  wire [16:0] Delay6_reg_next [0:1];  // ufix17 [2]
  wire [16:0] Delay6_out1;  // ufix17
  reg  [1:0] Delay7_reg;  // ufix1 [2]
  wire Delay7_out1;
  wire [16:0] Wrap_Address_out1;  // ufix17
  reg [16:0] Delay8_reg [0:1];  // ufix17 [2]
  wire [16:0] Delay8_reg_next [0:1];  // ufix17 [2]
  wire [16:0] Delay8_out1;  // ufix17
  wire Single_RAM_Using_Two_RAMs_out1;
  reg  [1:0] Delay9_reg;  // ufix1 [2]
  wire Delay9_out1;
  reg  [1:0] Delay4_reg;  // ufix1 [2]
  wire Delay4_out1;
  reg  Delay1_out1;
  reg  [1:0] Delay11_reg;  // ufix1 [2]
  wire Delay11_out1;
  reg  [1:0] Delay5_reg;  // ufix1 [2]
  wire Delay5_out1;
  reg  Delay2_out1;
  reg  [1:0] Delay13_reg;  // ufix1 [2]
  wire Delay13_out1;
  reg  [1:0] Delay3_reg;  // ufix1 [2]
  wire Delay3_out1;
  reg  Delay_out1;
  reg  [1:0] Delay10_reg;  // ufix1 [2]
  wire Delay10_out1;
  reg signed [31:0] Delay6_t_0_0;  // int32
  reg signed [31:0] Delay6_t_1;  // int32
  reg signed [31:0] Delay8_t_0_0;  // int32
  reg signed [31:0] Delay8_t_1;  // int32

  initial begin
    Delay12_reg = {2{1'b0}};

    for(Delay6_t_1 = 32'sd0; Delay6_t_1 <= 32'sd1; Delay6_t_1 = Delay6_t_1 + 32'sd1) begin
      Delay6_reg[Delay6_t_1] = 17'b00000000000000000;
    end

    Delay7_reg = {2{1'b0}};

    for(Delay8_t_1 = 32'sd0; Delay8_t_1 <= 32'sd1; Delay8_t_1 = Delay8_t_1 + 32'sd1) begin
      Delay8_reg[Delay8_t_1] = 17'b00000000000000000;
    end

    Delay9_reg = {2{1'b0}};
  end

  always @(posedge clk)
    begin : Delay12_process
      if (enb) begin
        Delay12_reg[0] <= wr_din;
        Delay12_reg[1] <= Delay12_reg[0];
      end
    end

  assign Delay12_out1 = Delay12_reg[1];



  always @(posedge clk)
    begin : Delay6_process
      if (enb) begin
        for(Delay6_t_0_0 = 32'sd0; Delay6_t_0_0 <= 32'sd1; Delay6_t_0_0 = Delay6_t_0_0 + 32'sd1) begin
          Delay6_reg[Delay6_t_0_0] <= Delay6_reg_next[Delay6_t_0_0];
        end
      end
    end

  assign Delay6_out1 = Delay6_reg[1];
  assign Delay6_reg_next[0] = wr_addr;
  assign Delay6_reg_next[1] = Delay6_reg[0];



  always @(posedge clk)
    begin : Delay7_process
      if (enb) begin
        Delay7_reg[0] <= wr_en;
        Delay7_reg[1] <= Delay7_reg[0];
      end
    end

  assign Delay7_out1 = Delay7_reg[1];



  dvbs2hdlTransmitterCore_Wrap_Address u_Wrap_Address (.u(rd_addr),  // ufix18
                                                       .y(Wrap_Address_out1)  // ufix17
                                                       );

  always @(posedge clk)
    begin : Delay8_process
      if (enb) begin
        for(Delay8_t_0_0 = 32'sd0; Delay8_t_0_0 <= 32'sd1; Delay8_t_0_0 = Delay8_t_0_0 + 32'sd1) begin
          Delay8_reg[Delay8_t_0_0] <= Delay8_reg_next[Delay8_t_0_0];
        end
      end
    end

  assign Delay8_out1 = Delay8_reg[1];
  assign Delay8_reg_next[0] = Wrap_Address_out1;
  assign Delay8_reg_next[1] = Delay8_reg[0];



  dvbs2hdlTransmitterCore_Single_RAM_Using_Two_RAMs u_Single_RAM_Using_Two_RAMs (.clk(clk),
                                                                                 .reset(reset),
                                                                                 .enb(enb),
                                                                                 .wr_din(Delay12_out1),
                                                                                 .wr_addr(Delay6_out1),  // ufix17
                                                                                 .wr_en(Delay7_out1),
                                                                                 .rd_addr(Delay8_out1),  // ufix17
                                                                                 .rd_dout(Single_RAM_Using_Two_RAMs_out1)
                                                                                 );

  always @(posedge clk)
    begin : Delay9_process
      if (enb) begin
        Delay9_reg[0] <= Single_RAM_Using_Two_RAMs_out1;
        Delay9_reg[1] <= Delay9_reg[0];
      end
    end

  assign Delay9_out1 = Delay9_reg[1];



  assign rd_dout = Delay9_out1;

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay4_reg[0] <= rd_start;
          Delay4_reg[1] <= Delay4_reg[0];
        end
      end
    end

  assign Delay4_out1 = Delay4_reg[1];



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Delay4_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay11_reg[0] <= Delay1_out1;
          Delay11_reg[1] <= Delay11_reg[0];
        end
      end
    end

  assign Delay11_out1 = Delay11_reg[1];



  assign rd_startOut = Delay11_out1;

  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay5_reg[0] <= rd_end;
          Delay5_reg[1] <= Delay5_reg[0];
        end
      end
    end

  assign Delay5_out1 = Delay5_reg[1];



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Delay5_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay13_reg[0] <= Delay2_out1;
          Delay13_reg[1] <= Delay13_reg[0];
        end
      end
    end

  assign Delay13_out1 = Delay13_reg[1];



  assign rd_endOut = Delay13_out1;

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay3_reg[0] <= rd_valid;
          Delay3_reg[1] <= Delay3_reg[0];
        end
      end
    end

  assign Delay3_out1 = Delay3_reg[1];



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Delay3_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay10_reg[0] <= Delay_out1;
          Delay10_reg[1] <= Delay10_reg[0];
        end
      end
    end

  assign Delay10_out1 = Delay10_reg[1];



  assign rd_validOut = Delay10_out1;

endmodule  // dvbs2hdlTransmitterCore_RAM

