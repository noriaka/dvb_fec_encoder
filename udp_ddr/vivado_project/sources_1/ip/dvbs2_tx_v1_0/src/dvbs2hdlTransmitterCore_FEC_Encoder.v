// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_FEC_Encoder.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_FEC_Encoder
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/FEC Encoder
// Hierarchy Level: 3
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_FEC_Encoder
          (clk,
           reset,
           enb,
           dataIn,
           startIn,
           endIn,
           validIn,
           modIdxIn,
           codeRateIdxIn,
           FECFrameIn,
           MODCODIn,
           dataOut,
           validOut,
           startOut,
           modOut,
           codOut,
           fecOut,
           MODCOD);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;
  input   startIn;
  input   endIn;
  input   validIn;
  input   [1:0] modIdxIn;  // ufix2
  input   [3:0] codeRateIdxIn;  // ufix4
  input   FECFrameIn;
  input   [4:0] MODCODIn;  // ufix5
  output  dataOut;
  output  validOut;
  output  startOut;
  output  [1:0] modOut;  // ufix2
  output  [3:0] codOut;  // ufix4
  output  fecOut;
  output  [4:0] MODCOD;  // ufix5


  reg  Delay2_out1;
  reg  Delay1_out1;
  reg  Delay3_out1;
  reg  Delay_out1;
  wire Sample_Control_Bus_Creator_out1_start;
  wire Sample_Control_Bus_Creator_out1_end;
  wire Sample_Control_Bus_Creator_out1_valid;
  reg  Unit_Delay_Enabled_Synchronous1_out1;
  wire Unit_Delay_Enabled_Synchronous1_ectrl;
  reg [3:0] Unit_Delay_Enabled_Synchronous_out1;  // ufix4
  wire [3:0] Unit_Delay_Enabled_Synchronous_ectrl;  // ufix4
  wire DVB_S2_BCH_Encoder_out1;
  wire DVB_S2_BCH_Encoder_out2_start;
  wire DVB_S2_BCH_Encoder_out2_end;
  wire DVB_S2_BCH_Encoder_out2_valid;
  reg  Delay15_out1;
  reg  Delay5_out1;
  reg  Delay9_out1;
  reg  Delay16_out1_start;
  reg  Delay4_out1_start;
  reg  Delay10_out1_start;
  reg  Delay16_out1_end;
  reg  Delay4_out1_end;
  reg  Delay10_out1_end;
  reg  Delay16_out1_valid;
  reg  Delay4_out1_valid;
  reg  Delay10_out1_valid;
  wire start;
  reg  Delay17_out1;
  reg  Unit_Delay_Enabled_Synchronous2_out1;
  wire Unit_Delay_Enabled_Synchronous2_ectrl;
  reg  Delay11_out1;
  reg [3:0] Delay18_out1;  // ufix4
  reg [3:0] Unit_Delay_Enabled_Synchronous3_out1;  // ufix4
  wire [3:0] Unit_Delay_Enabled_Synchronous3_ectrl;  // ufix4
  reg [3:0] Delay12_out1;  // ufix4
  wire DVB_S2_LDPC_Encoder_out1;
  wire DVB_S2_LDPC_Encoder_out2_start;
  wire DVB_S2_LDPC_Encoder_out2_end;
  wire DVB_S2_LDPC_Encoder_out2_valid;
  reg  Delay8_out1;
  wire valid;
  reg  Delay7_out1;
  wire start_1;
  reg  Delay6_out1;
  reg [1:0] Unit_Delay_Enabled_Synchronous4_out1;  // ufix2
  wire [1:0] Unit_Delay_Enabled_Synchronous4_ectrl;  // ufix2
  reg [1:0] Delay19_out1;  // ufix2
  reg [1:0] Unit_Delay_Enabled_Synchronous6_out1;  // ufix2
  wire [1:0] Unit_Delay_Enabled_Synchronous6_ectrl;  // ufix2
  reg [1:0] Delay13_out1;  // ufix2
  reg [1:0] Unit_Delay_Enabled_Synchronous9_out1;  // ufix2
  wire [1:0] Unit_Delay_Enabled_Synchronous9_ectrl;  // ufix2
  reg [3:0] Unit_Delay_Enabled_Synchronous8_out1;  // ufix4
  wire [3:0] Unit_Delay_Enabled_Synchronous8_ectrl;  // ufix4
  reg  Unit_Delay_Enabled_Synchronous10_out1;
  wire Unit_Delay_Enabled_Synchronous10_ectrl;
  reg [4:0] Unit_Delay_Enabled_Synchronous5_out1;  // ufix5
  wire [4:0] Unit_Delay_Enabled_Synchronous5_ectrl;  // ufix5
  reg [4:0] Delay20_out1;  // ufix5
  reg [4:0] Unit_Delay_Enabled_Synchronous7_out1;  // ufix5
  wire [4:0] Unit_Delay_Enabled_Synchronous7_ectrl;  // ufix5
  reg [4:0] Delay14_out1;  // ufix5
  reg [4:0] Unit_Delay_Enabled_Synchronous11_out1;  // ufix5
  wire [4:0] Unit_Delay_Enabled_Synchronous11_ectrl;  // ufix5


  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= startIn;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= endIn;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= dataIn;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= validIn;
        end
      end
    end



  dvbs2hdlTransmitterCore_Sample_Control_Bus_Creator_block1 u_Sample_Control_Bus_Creator (.In1(Delay2_out1),
                                                                                          .In2(Delay1_out1),
                                                                                          .In3(Delay_out1),
                                                                                          .Out1_start(Sample_Control_Bus_Creator_out1_start),
                                                                                          .Out1_end(Sample_Control_Bus_Creator_out1_end),
                                                                                          .Out1_valid(Sample_Control_Bus_Creator_out1_valid)
                                                                                          );

  assign Unit_Delay_Enabled_Synchronous1_ectrl = (startIn == 1'b0 ? Unit_Delay_Enabled_Synchronous1_out1 :
              FECFrameIn);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous1_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous1_out1 <= Unit_Delay_Enabled_Synchronous1_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous_ectrl = (startIn == 1'b0 ? Unit_Delay_Enabled_Synchronous_out1 :
              codeRateIdxIn);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous_out1 <= Unit_Delay_Enabled_Synchronous_ectrl;
        end
      end
    end



  dvbs2hdlTransmitterCore_DVB_S2_BCH_Encoder u_DVB_S2_BCH_Encoder (.clk(clk),
                                                                   .reset(reset),
                                                                   .enb(enb),
                                                                   .dataIn(Delay3_out1),
                                                                   .ctrlIn_start(Sample_Control_Bus_Creator_out1_start),
                                                                   .ctrlIn_end(Sample_Control_Bus_Creator_out1_end),
                                                                   .ctrlIn_valid(Sample_Control_Bus_Creator_out1_valid),
                                                                   .frameType(Unit_Delay_Enabled_Synchronous1_out1),
                                                                   .codeRateIdx(Unit_Delay_Enabled_Synchronous_out1),  // ufix4
                                                                   .dataOut(DVB_S2_BCH_Encoder_out1),
                                                                   .ctrlOut_start(DVB_S2_BCH_Encoder_out2_start),
                                                                   .ctrlOut_end(DVB_S2_BCH_Encoder_out2_end),
                                                                   .ctrlOut_valid(DVB_S2_BCH_Encoder_out2_valid)
                                                                   );

  always @(posedge clk or posedge reset)
    begin : Delay15_process
      if (reset == 1'b1) begin
        Delay15_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay15_out1 <= DVB_S2_BCH_Encoder_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Delay15_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= Delay5_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_process
      if (reset == 1'b1) begin
        Delay16_out1_start <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay16_out1_start <= DVB_S2_BCH_Encoder_out2_start;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_1_process
      if (reset == 1'b1) begin
        Delay4_out1_start <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1_start <= Delay16_out1_start;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        Delay10_out1_start <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_out1_start <= Delay4_out1_start;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_3_process
      if (reset == 1'b1) begin
        Delay16_out1_end <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay16_out1_end <= DVB_S2_BCH_Encoder_out2_end;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_4_process
      if (reset == 1'b1) begin
        Delay4_out1_end <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1_end <= Delay16_out1_end;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_5_process
      if (reset == 1'b1) begin
        Delay10_out1_end <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_out1_end <= Delay4_out1_end;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_6_process
      if (reset == 1'b1) begin
        Delay16_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay16_out1_valid <= DVB_S2_BCH_Encoder_out2_valid;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_7_process
      if (reset == 1'b1) begin
        Delay4_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1_valid <= Delay16_out1_valid;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_8_process
      if (reset == 1'b1) begin
        Delay10_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_out1_valid <= Delay4_out1_valid;
        end
      end
    end



  assign start = Delay16_out1_start;

  always @(posedge clk or posedge reset)
    begin : Delay17_process
      if (reset == 1'b1) begin
        Delay17_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay17_out1 <= Unit_Delay_Enabled_Synchronous1_out1;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous2_ectrl = (start == 1'b0 ? Unit_Delay_Enabled_Synchronous2_out1 :
              Delay17_out1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous2_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous2_out1 <= Unit_Delay_Enabled_Synchronous2_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out1 <= Unit_Delay_Enabled_Synchronous2_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay18_process
      if (reset == 1'b1) begin
        Delay18_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay18_out1 <= Unit_Delay_Enabled_Synchronous_out1;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous3_ectrl = (start == 1'b0 ? Unit_Delay_Enabled_Synchronous3_out1 :
              Delay18_out1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous3_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous3_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous3_out1 <= Unit_Delay_Enabled_Synchronous3_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay12_out1 <= Unit_Delay_Enabled_Synchronous3_out1;
        end
      end
    end



  dvbs2hdlTransmitterCore_DVB_S2_LDPC_Encoder u_DVB_S2_LDPC_Encoder (.clk(clk),
                                                                     .reset(reset),
                                                                     .enb(enb),
                                                                     .dataIn(Delay9_out1),
                                                                     .ctrlIn_start(Delay10_out1_start),
                                                                     .ctrlIn_end(Delay10_out1_end),
                                                                     .ctrlIn_valid(Delay10_out1_valid),
                                                                     .frametype(Delay11_out1),
                                                                     .codeRateIdx(Delay12_out1),  // ufix4
                                                                     .dataOut(DVB_S2_LDPC_Encoder_out1),
                                                                     .ctrlOut_start(DVB_S2_LDPC_Encoder_out2_start),
                                                                     .ctrlOut_valid(DVB_S2_LDPC_Encoder_out2_valid)
                                                                     );

  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= DVB_S2_LDPC_Encoder_out1;
        end
      end
    end



  assign dataOut = Delay8_out1;

  assign valid = DVB_S2_LDPC_Encoder_out2_valid;

  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= valid;
        end
      end
    end



  assign validOut = Delay7_out1;

  assign start_1 = DVB_S2_LDPC_Encoder_out2_start;

  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= start_1;
        end
      end
    end



  assign startOut = Delay6_out1;

  assign Unit_Delay_Enabled_Synchronous4_ectrl = (startIn == 1'b0 ? Unit_Delay_Enabled_Synchronous4_out1 :
              modIdxIn);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous4_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous4_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous4_out1 <= Unit_Delay_Enabled_Synchronous4_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay19_process
      if (reset == 1'b1) begin
        Delay19_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay19_out1 <= Unit_Delay_Enabled_Synchronous4_out1;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous6_ectrl = (start == 1'b0 ? Unit_Delay_Enabled_Synchronous6_out1 :
              Delay19_out1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous6_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous6_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous6_out1 <= Unit_Delay_Enabled_Synchronous6_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay13_out1 <= Unit_Delay_Enabled_Synchronous6_out1;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous9_ectrl = (start_1 == 1'b0 ? Unit_Delay_Enabled_Synchronous9_out1 :
              Delay13_out1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous9_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous9_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous9_out1 <= Unit_Delay_Enabled_Synchronous9_ectrl;
        end
      end
    end



  assign modOut = Unit_Delay_Enabled_Synchronous9_out1;

  assign Unit_Delay_Enabled_Synchronous8_ectrl = (start_1 == 1'b0 ? Unit_Delay_Enabled_Synchronous8_out1 :
              Delay12_out1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous8_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous8_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous8_out1 <= Unit_Delay_Enabled_Synchronous8_ectrl;
        end
      end
    end



  assign codOut = Unit_Delay_Enabled_Synchronous8_out1;

  assign Unit_Delay_Enabled_Synchronous10_ectrl = (start_1 == 1'b0 ? Unit_Delay_Enabled_Synchronous10_out1 :
              Delay11_out1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous10_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous10_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous10_out1 <= Unit_Delay_Enabled_Synchronous10_ectrl;
        end
      end
    end



  assign fecOut = Unit_Delay_Enabled_Synchronous10_out1;

  assign Unit_Delay_Enabled_Synchronous5_ectrl = (startIn == 1'b0 ? Unit_Delay_Enabled_Synchronous5_out1 :
              MODCODIn);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous5_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous5_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous5_out1 <= Unit_Delay_Enabled_Synchronous5_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay20_process
      if (reset == 1'b1) begin
        Delay20_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay20_out1 <= Unit_Delay_Enabled_Synchronous5_out1;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous7_ectrl = (start == 1'b0 ? Unit_Delay_Enabled_Synchronous7_out1 :
              Delay20_out1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous7_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous7_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous7_out1 <= Unit_Delay_Enabled_Synchronous7_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay14_out1 <= Unit_Delay_Enabled_Synchronous7_out1;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous11_ectrl = (start_1 == 1'b0 ? Unit_Delay_Enabled_Synchronous11_out1 :
              Delay14_out1);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous11_lowered_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous11_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous11_out1 <= Unit_Delay_Enabled_Synchronous11_ectrl;
        end
      end
    end



  assign MODCOD = Unit_Delay_Enabled_Synchronous11_out1;

endmodule  // dvbs2hdlTransmitterCore_FEC_Encoder

