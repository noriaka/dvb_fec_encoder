// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_sampleModCodeRateIdxNet.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_sampleModCodeRateIdxNet
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/Symbol Modulator/DVB-S2 Symbol Modulator1/sampleModCodeRateIdxNet
// Hierarchy Level: 5
// Model version: 4.5
// 
// Load modIdx and codeRateIdx
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_sampleModCodeRateIdxNet
          (clk,
           reset,
           enb,
           startSample,
           modIdx,
           codeRateIdx,
           validIn,
           modIdxSampled,
           codeRateIdxSampled,
           resetIn,
           bpskEvenSymFlag);


  input   clk;
  input   reset;
  input   enb;
  input   startSample;  // ufix1
  input   [2:0] modIdx;  // ufix3
  input   [3:0] codeRateIdx;  // ufix4
  input   validIn;  // ufix1
  output  [2:0] modIdxSampled;  // ufix3
  output  [2:0] codeRateIdxSampled;  // ufix3
  output  resetIn;  // ufix1
  output  bpskEvenSymFlag;  // ufix1


  reg [2:0] loadModCod_modIdxReg;  // ufix3
  reg [2:0] loadModCod_codeRateIdxReg;  // ufix3
  reg [2:0] loadModCod_countBits;  // ufix3
  reg  loadModCod_firstLoadFlag;  // ufix1
  reg  loadModCod_validBefLoadAssert;  // ufix1
  reg [2:0] loadModCod_modIdxReg_next;  // ufix3
  reg [2:0] loadModCod_codeRateIdxReg_next;  // ufix3
  reg [2:0] loadModCod_countBits_next;  // ufix3
  reg  loadModCod_firstLoadFlag_next;  // ufix1
  reg  loadModCod_validBefLoadAssert_next;  // ufix1
  reg [2:0] modIdxSampled_1;  // ufix3
  reg [2:0] codeRateIdxSampled_1;  // ufix3
  reg  resetIn_1;  // ufix1
  reg  bpskEvenSymFlag_1;  // ufix1
  reg [2:0] loadModCod_out1_0;  // ufix3
  reg [2:0] loadModCod_modIdx;  // ufix3
  reg [2:0] loadModCod_modIdxReg_temp;  // ufix3
  reg [2:0] loadModCod_countBits_temp;  // ufix3
  reg  loadModCod_validBefLoadAssert_temp;  // ufix1


  // sample modulation index and code rate
  always @(posedge clk or posedge reset)
    begin : loadModCod_process
      if (reset == 1'b1) begin
        loadModCod_modIdxReg <= 3'b000;
        loadModCod_codeRateIdxReg <= 3'b001;
        loadModCod_countBits <= 3'b000;
        loadModCod_firstLoadFlag <= 1'b0;
        loadModCod_validBefLoadAssert <= 1'b0;
      end
      else begin
        if (enb) begin
          loadModCod_modIdxReg <= loadModCod_modIdxReg_next;
          loadModCod_codeRateIdxReg <= loadModCod_codeRateIdxReg_next;
          loadModCod_countBits <= loadModCod_countBits_next;
          loadModCod_firstLoadFlag <= loadModCod_firstLoadFlag_next;
          loadModCod_validBefLoadAssert <= loadModCod_validBefLoadAssert_next;
        end
      end
    end

  always @(codeRateIdx, loadModCod_codeRateIdxReg, loadModCod_countBits,
       loadModCod_firstLoadFlag, loadModCod_modIdxReg,
       loadModCod_validBefLoadAssert, modIdx, startSample, validIn) begin
    loadModCod_modIdxReg_temp = loadModCod_modIdxReg;
    loadModCod_countBits_temp = loadModCod_countBits;
    loadModCod_validBefLoadAssert_temp = loadModCod_validBefLoadAssert;
    loadModCod_codeRateIdxReg_next = loadModCod_codeRateIdxReg;
    loadModCod_firstLoadFlag_next = loadModCod_firstLoadFlag;
    if (((startSample == 1'b1) && (loadModCod_countBits > 3'b000)) && (loadModCod_countBits != loadModCod_modIdxReg)) begin
      resetIn_1 = 1'b1;
      loadModCod_countBits_temp = 3'b000;
    end
    else begin
      resetIn_1 = 1'b0;
    end
    if (validIn != 1'b0) begin
      loadModCod_countBits_temp = loadModCod_countBits_temp + 3'b001;
    end
    if (((startSample != 1'b1) && (loadModCod_countBits_temp != 3'b000)) && (loadModCod_firstLoadFlag != 1'b1)) begin
      loadModCod_validBefLoadAssert_temp = 1'b1;
    end
    if (loadModCod_validBefLoadAssert_temp != 1'b0) begin
      loadModCod_modIdx = 3'b010;
      loadModCod_modIdxReg_temp = 3'b010;
      loadModCod_out1_0 = loadModCod_codeRateIdxReg;
      loadModCod_validBefLoadAssert_temp = 1'b0;
      bpskEvenSymFlag_1 = 1'b0;
    end
    else if (startSample == 1'b1) begin
      bpskEvenSymFlag_1 = 1'b1;
      loadModCod_firstLoadFlag_next = 1'b1;
      if (modIdx == 3'b010) begin
        if (codeRateIdx == 4'b0101) begin
          loadModCod_out1_0 = 3'b001;
        end
        else if (codeRateIdx == 4'b0110) begin
          loadModCod_out1_0 = 3'b010;
        end
        else if (codeRateIdx == 4'b0111) begin
          loadModCod_out1_0 = 3'b011;
        end
        else if (codeRateIdx == 4'b1000) begin
          loadModCod_out1_0 = 3'b100;
        end
        else if (codeRateIdx == 4'b1001) begin
          loadModCod_out1_0 = 3'b101;
        end
        else if (codeRateIdx == 4'b1010) begin
          loadModCod_out1_0 = 3'b110;
        end
        else begin
          loadModCod_out1_0 = 3'b010;
        end
      end
      else if (codeRateIdx == 4'b0110) begin
        loadModCod_out1_0 = 3'b001;
      end
      else if (codeRateIdx == 4'b0111) begin
        loadModCod_out1_0 = 3'b010;
      end
      else if (codeRateIdx == 4'b1000) begin
        loadModCod_out1_0 = 3'b011;
      end
      else if (codeRateIdx == 4'b1001) begin
        loadModCod_out1_0 = 3'b100;
      end
      else if (codeRateIdx == 4'b1010) begin
        loadModCod_out1_0 = 3'b101;
      end
      else begin
        loadModCod_out1_0 = 3'b001;
      end
      loadModCod_codeRateIdxReg_next = loadModCod_out1_0;
      if (modIdx == 3'b000) begin
        loadModCod_modIdx = 3'b010;
      end
      else if (modIdx == 3'b001) begin
        loadModCod_modIdx = 3'b011;
      end
      else if (modIdx == 3'b010) begin
        loadModCod_modIdx = 3'b100;
      end
      else if (modIdx == 3'b011) begin
        loadModCod_modIdx = 3'b101;
      end
      else if (modIdx == 3'b100) begin
        loadModCod_modIdx = 3'b001;
      end
      else begin
        loadModCod_modIdx = 3'b010;
      end
      loadModCod_modIdxReg_temp = loadModCod_modIdx;
    end
    else begin
      loadModCod_modIdx = loadModCod_modIdxReg;
      loadModCod_out1_0 = loadModCod_codeRateIdxReg;
      bpskEvenSymFlag_1 = 1'b0;
    end
    if ((validIn != 1'b0) && (loadModCod_countBits_temp == loadModCod_modIdxReg_temp)) begin
      loadModCod_countBits_temp = 3'b000;
    end
    modIdxSampled_1 = loadModCod_modIdx;
    codeRateIdxSampled_1 = loadModCod_out1_0;
    loadModCod_modIdxReg_next = loadModCod_modIdxReg_temp;
    loadModCod_countBits_next = loadModCod_countBits_temp;
    loadModCod_validBefLoadAssert_next = loadModCod_validBefLoadAssert_temp;
  end



  assign modIdxSampled = modIdxSampled_1;

  assign codeRateIdxSampled = codeRateIdxSampled_1;

  assign resetIn = resetIn_1;

  assign bpskEvenSymFlag = bpskEvenSymFlag_1;

endmodule  // dvbs2hdlTransmitterCore_sampleModCodeRateIdxNet

