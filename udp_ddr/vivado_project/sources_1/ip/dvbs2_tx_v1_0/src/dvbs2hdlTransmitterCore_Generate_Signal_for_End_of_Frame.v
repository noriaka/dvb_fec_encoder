// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_Generate_Signal_for_End_of_Frame.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_Generate_Signal_for_End_of_Frame
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/Interleaver/DVB-S2 HDL Interleaver/RAM Address Generator/Read Offset 
// Address/Generate Signal for End of Fram
// Hierarchy Level: 7
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_Generate_Signal_for_End_of_Frame
          (clk,
           reset,
           enb,
           maxR,
           maxC,
           chkwrAddrEnd);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] maxR;  // uint16
  input   [2:0] maxC;  // ufix3
  output  [15:0] chkwrAddrEnd;  // uint16


  reg [15:0] Delay_reg [0:1];  // ufix16 [2]
  wire [15:0] Delay_reg_next [0:1];  // ufix16 [2]
  wire [15:0] Delay_out1;  // uint16
  reg [2:0] Delay1_reg [0:1];  // ufix3 [2]
  wire [2:0] Delay1_reg_next [0:1];  // ufix3 [2]
  wire [2:0] Delay1_out1;  // ufix3
  wire [18:0] Product_mul_temp;  // ufix19
  wire [15:0] Product_out1;  // uint16
  reg [15:0] Delay2_out1;  // uint16
  wire Compare_To_Constant_out1;
  wire switch_compare_1;
  wire Constant1_out1;  // ufix1
  wire Constant_out1;  // ufix1
  wire Switch_out1;  // ufix1
  wire signed [16:0] Add_sub_temp;  // sfix17
  wire signed [16:0] Add_1;  // sfix17
  wire signed [16:0] Add_2;  // sfix17
  wire [15:0] Add_out1;  // uint16
  reg [15:0] Delay4_out1;  // uint16
  reg signed [31:0] Delay_t_0_0;  // int32
  reg signed [31:0] Delay_t_1;  // int32
  reg signed [31:0] Delay1_t_0_0;  // int32
  reg signed [31:0] Delay1_t_1;  // int32


  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        for(Delay_t_1 = 32'sd0; Delay_t_1 <= 32'sd1; Delay_t_1 = Delay_t_1 + 32'sd1) begin
          Delay_reg[Delay_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(Delay_t_0_0 = 32'sd0; Delay_t_0_0 <= 32'sd1; Delay_t_0_0 = Delay_t_0_0 + 32'sd1) begin
            Delay_reg[Delay_t_0_0] <= Delay_reg_next[Delay_t_0_0];
          end
        end
      end
    end

  assign Delay_out1 = Delay_reg[1];
  assign Delay_reg_next[0] = maxR;
  assign Delay_reg_next[1] = Delay_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        for(Delay1_t_1 = 32'sd0; Delay1_t_1 <= 32'sd1; Delay1_t_1 = Delay1_t_1 + 32'sd1) begin
          Delay1_reg[Delay1_t_1] <= 3'b000;
        end
      end
      else begin
        if (enb) begin
          for(Delay1_t_0_0 = 32'sd0; Delay1_t_0_0 <= 32'sd1; Delay1_t_0_0 = Delay1_t_0_0 + 32'sd1) begin
            Delay1_reg[Delay1_t_0_0] <= Delay1_reg_next[Delay1_t_0_0];
          end
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[1];
  assign Delay1_reg_next[0] = maxC;
  assign Delay1_reg_next[1] = Delay1_reg[0];



  assign Product_mul_temp = Delay_out1 * Delay1_out1;
  assign Product_out1 = Product_mul_temp[15:0];



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Product_out1;
        end
      end
    end



  assign Compare_To_Constant_out1 = Delay2_out1 != 16'b0000000000000000;



  assign switch_compare_1 = Compare_To_Constant_out1 > 1'b0;



  assign Constant1_out1 = 1'b0;



  assign Constant_out1 = 1'b1;



  assign Switch_out1 = (switch_compare_1 == 1'b0 ? Constant1_out1 :
              Constant_out1);



  assign Add_1 = {1'b0, Delay2_out1};
  assign Add_2 = {16'b0, Switch_out1};
  assign Add_sub_temp = Add_1 - Add_2;
  assign Add_out1 = Add_sub_temp[15:0];



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Add_out1;
        end
      end
    end



  assign chkwrAddrEnd = Delay4_out1;

endmodule  // dvbs2hdlTransmitterCore_Generate_Signal_for_End_of_Frame

