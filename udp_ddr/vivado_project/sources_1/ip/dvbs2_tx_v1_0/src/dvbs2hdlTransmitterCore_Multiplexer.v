// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_Multiplexer.v
// Created: 2024-01-10 13:49:57
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_Multiplexer
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/BB Frame Generator/Multiplexer
// Hierarchy Level: 4
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_Multiplexer
          (clk,
           reset,
           enb,
           dataBits,
           dataValid,
           dataEnd,
           headerBits,
           headerStart,
           headerValid,
           MODCOD,
           FECFrame,
           dataOut,
           startOut,
           endOut,
           validOut,
           MODCODOut,
           FECFrameOut);


  input   clk;
  input   reset;
  input   enb;
  input   dataBits;
  input   dataValid;
  input   dataEnd;
  input   headerBits;
  input   headerStart;
  input   headerValid;
  input   [4:0] MODCOD;  // ufix5
  input   FECFrame;
  output  dataOut;
  output  startOut;
  output  endOut;
  output  validOut;
  output  [4:0] MODCODOut;  // ufix5
  output  FECFrameOut;


  wire Switch_out1;
  reg  [1:0] Delay_reg;  // ufix1 [2]
  wire Delay_out1;
  reg  [1:0] Delay2_reg;  // ufix1 [2]
  wire Delay2_out1;
  reg  [1:0] Delay3_reg;  // ufix1 [2]
  wire Delay3_out1;
  wire Logical_Operator_out1;
  reg  [1:0] Delay1_reg;  // ufix1 [2]
  wire Delay1_out1;
  reg [4:0] Delay4_out1;  // ufix5
  reg  Delay5_out1;


  assign Switch_out1 = (dataValid == 1'b0 ? headerBits :
              dataBits);



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay_reg[0] <= Switch_out1;
          Delay_reg[1] <= Delay_reg[0];
        end
      end
    end

  assign Delay_out1 = Delay_reg[1];



  assign dataOut = Delay_out1;

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= headerStart;
          Delay2_reg[1] <= Delay2_reg[0];
        end
      end
    end

  assign Delay2_out1 = Delay2_reg[1];



  assign startOut = Delay2_out1;

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay3_reg[0] <= dataEnd;
          Delay3_reg[1] <= Delay3_reg[0];
        end
      end
    end

  assign Delay3_out1 = Delay3_reg[1];



  assign endOut = Delay3_out1;

  assign Logical_Operator_out1 = dataValid | headerValid;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Logical_Operator_out1;
          Delay1_reg[1] <= Delay1_reg[0];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[1];



  assign validOut = Delay1_out1;

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= MODCOD;
        end
      end
    end



  assign MODCODOut = Delay4_out1;

  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= FECFrame;
        end
      end
    end



  assign FECFrameOut = Delay5_out1;

endmodule  // dvbs2hdlTransmitterCore_Multiplexer

