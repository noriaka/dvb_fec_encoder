// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_RAM_FIFO.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_RAM_FIFO
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator/RAM FIFO
// Hierarchy Level: 4
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_RAM_FIFO
          (clk,
           reset,
           enb_1_8_0,
           dataIn_re,
           dataIn_im,
           validIn,
           dataIn1_re,
           dataIn1_im,
           startIn1,
           validIn1,
           frameLength,
           plheaderData_re,
           plheaderData_im,
           plheaderStart,
           plheaderEnd,
           plheaderValid,
           pilotData_re,
           pilotData_im,
           pilotValid,
           slotsData_re,
           slotsData_im,
           slotsValid,
           dummyData_re,
           dummyData_im,
           dummyValid,
           dummyHeaderSrt,
           dummyHeaderEnd);


  input   clk;
  input   reset;
  input   enb_1_8_0;
  input   signed [17:0] dataIn_re;  // sfix18_En16
  input   signed [17:0] dataIn_im;  // sfix18_En16
  input   validIn;
  input   signed [17:0] dataIn1_re;  // sfix18_En16
  input   signed [17:0] dataIn1_im;  // sfix18_En16
  input   startIn1;
  input   validIn1;
  input   [14:0] frameLength;  // ufix15
  output  signed [17:0] plheaderData_re;  // sfix18_En16
  output  signed [17:0] plheaderData_im;  // sfix18_En16
  output  plheaderStart;
  output  plheaderEnd;
  output  plheaderValid;
  output  signed [17:0] pilotData_re;  // sfix18_En16
  output  signed [17:0] pilotData_im;  // sfix18_En16
  output  pilotValid;
  output  signed [17:0] slotsData_re;  // sfix18_En16
  output  signed [17:0] slotsData_im;  // sfix18_En16
  output  slotsValid;
  output  signed [17:0] dummyData_re;  // sfix18_En16
  output  signed [17:0] dummyData_im;  // sfix18_En16
  output  dummyValid;
  output  dummyHeaderSrt;
  output  dummyHeaderEnd;


  reg signed [17:0] delayMatch_reg_re [0:1];  // sfix18_En16 [2]
  reg signed [17:0] delayMatch_reg_im [0:1];  // sfix18_En16 [2]
  wire signed [17:0] delayMatch_reg_next_re [0:1];  // sfix18_En16 [2]
  wire signed [17:0] delayMatch_reg_next_im [0:1];  // sfix18_En16 [2]
  wire signed [17:0] dataIn1_re_1;  // sfix18_En16
  wire signed [17:0] dataIn1_im_1;  // sfix18_En16
  reg  [1:0] delayMatch1_reg;  // ufix1 [2]
  wire startIn1_1;
  reg  [1:0] delayMatch2_reg;  // ufix1 [2]
  wire validIn1_1;
  reg [14:0] delayMatch3_reg [0:1];  // ufix15 [2]
  wire [14:0] delayMatch3_reg_next [0:1];  // ufix15 [2]
  wire [14:0] frameLength_1;  // ufix15
  wire PL_Data_FIFO_out1;
  wire signed [17:0] Pilot_Generator_out1_re;  // sfix18_En16
  wire signed [17:0] Pilot_Generator_out1_im;  // sfix18_En16
  wire validOut;
  wire endOutm1;
  wire PL_Header_FIFO_out5;
  wire signed [17:0] PL_Data_FIFO_out2_re;  // sfix18_En16
  wire signed [17:0] PL_Data_FIFO_out2_im;  // sfix18_En16
  wire PL_Data_FIFO_out3;
  wire signed [17:0] PL_Data_FIFO_out4_re;  // sfix18_En16
  wire signed [17:0] PL_Data_FIFO_out4_im;  // sfix18_En16
  wire valid;
  wire PL_Data_FIFO_out6;
  wire PL_Data_FIFO_out7;
  wire PL_Data_FIFO_out8;
  wire signed [17:0] PL_Header_FIFO_out1_re;  // sfix18_En16
  wire signed [17:0] PL_Header_FIFO_out1_im;  // sfix18_En16
  wire PL_Header_FIFO_out2;
  wire PL_Header_FIFO_out3;
  wire PL_Header_FIFO_out4;
  wire validOut_1;
  wire valid_1;
  reg signed [31:0] delayMatch_t_0_0;  // int32
  reg signed [31:0] delayMatch_t_1;  // int32
  reg signed [31:0] delayMatch3_t_0_0;  // int32
  reg signed [31:0] delayMatch3_t_1;  // int32


  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        for(delayMatch_t_1 = 32'sd0; delayMatch_t_1 <= 32'sd1; delayMatch_t_1 = delayMatch_t_1 + 32'sd1) begin
          delayMatch_reg_re[delayMatch_t_1] <= 18'sb000000000000000000;
          delayMatch_reg_im[delayMatch_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb_1_8_0) begin
          for(delayMatch_t_0_0 = 32'sd0; delayMatch_t_0_0 <= 32'sd1; delayMatch_t_0_0 = delayMatch_t_0_0 + 32'sd1) begin
            delayMatch_reg_re[delayMatch_t_0_0] <= delayMatch_reg_next_re[delayMatch_t_0_0];
            delayMatch_reg_im[delayMatch_t_0_0] <= delayMatch_reg_next_im[delayMatch_t_0_0];
          end
        end
      end
    end

  assign dataIn1_re_1 = delayMatch_reg_re[1];
  assign dataIn1_im_1 = delayMatch_reg_im[1];
  assign delayMatch_reg_next_re[0] = dataIn1_re;
  assign delayMatch_reg_next_im[0] = dataIn1_im;
  assign delayMatch_reg_next_re[1] = delayMatch_reg_re[0];
  assign delayMatch_reg_next_im[1] = delayMatch_reg_im[0];



  always @(posedge clk or posedge reset)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        delayMatch1_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch1_reg[0] <= startIn1;
          delayMatch1_reg[1] <= delayMatch1_reg[0];
        end
      end
    end

  assign startIn1_1 = delayMatch1_reg[1];



  always @(posedge clk or posedge reset)
    begin : delayMatch2_process
      if (reset == 1'b1) begin
        delayMatch2_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          delayMatch2_reg[0] <= validIn1;
          delayMatch2_reg[1] <= delayMatch2_reg[0];
        end
      end
    end

  assign validIn1_1 = delayMatch2_reg[1];



  always @(posedge clk or posedge reset)
    begin : delayMatch3_process
      if (reset == 1'b1) begin
        for(delayMatch3_t_1 = 32'sd0; delayMatch3_t_1 <= 32'sd1; delayMatch3_t_1 = delayMatch3_t_1 + 32'sd1) begin
          delayMatch3_reg[delayMatch3_t_1] <= 15'b000000000000000;
        end
      end
      else begin
        if (enb_1_8_0) begin
          for(delayMatch3_t_0_0 = 32'sd0; delayMatch3_t_0_0 <= 32'sd1; delayMatch3_t_0_0 = delayMatch3_t_0_0 + 32'sd1) begin
            delayMatch3_reg[delayMatch3_t_0_0] <= delayMatch3_reg_next[delayMatch3_t_0_0];
          end
        end
      end
    end

  assign frameLength_1 = delayMatch3_reg[1];
  assign delayMatch3_reg_next[0] = frameLength;
  assign delayMatch3_reg_next[1] = delayMatch3_reg[0];



  dvbs2hdlTransmitterCore_Pilot_Generator u_Pilot_Generator (.clk(clk),
                                                             .reset(reset),
                                                             .enb_1_8_0(enb_1_8_0),
                                                             .trigger(PL_Data_FIFO_out1),
                                                             .dataOut_re(Pilot_Generator_out1_re),  // sfix18_En16
                                                             .dataOut_im(Pilot_Generator_out1_im),  // sfix18_En16
                                                             .validOut(validOut),
                                                             .endOut1(endOutm1)
                                                             );

  dvbs2hdlTransmitterCore_PL_Data_FIFO u_PL_Data_FIFO (.clk(clk),
                                                       .reset(reset),
                                                       .enb_1_8_0(enb_1_8_0),
                                                       .endOfPilotBlk(endOutm1),
                                                       .endOfPLHeader(PL_Header_FIFO_out5),
                                                       .dataIn_re(dataIn1_re_1),  // sfix18_En16
                                                       .dataIn_im(dataIn1_im_1),  // sfix18_En16
                                                       .startIn(startIn1_1),
                                                       .validIn(validIn1_1),
                                                       .frameLength(frameLength_1),  // ufix15
                                                       .endOf16Slots(PL_Data_FIFO_out1),
                                                       .dataOut_re(PL_Data_FIFO_out2_re),  // sfix18_En16
                                                       .dataOut_im(PL_Data_FIFO_out2_im),  // sfix18_En16
                                                       .validOut(PL_Data_FIFO_out3),
                                                       .dummyData_re(PL_Data_FIFO_out4_re),  // sfix18_En16
                                                       .dummyData_im(PL_Data_FIFO_out4_im),  // sfix18_En16
                                                       .dummyValid(valid),
                                                       .dummyHeaderSrt(PL_Data_FIFO_out6),
                                                       .dummyHeaderEnd(PL_Data_FIFO_out7),
                                                       .nextFrameReady(PL_Data_FIFO_out8)
                                                       );

  dvbs2hdlTransmitterCore_PL_Header_FIFO u_PL_Header_FIFO (.clk(clk),
                                                           .reset(reset),
                                                           .enb_1_8_0(enb_1_8_0),
                                                           .dataIn_re(dataIn_re),  // sfix18_En16
                                                           .dataIn_im(dataIn_im),  // sfix18_En16
                                                           .validIn(validIn),
                                                           .nextFrameReady(PL_Data_FIFO_out8),
                                                           .dataOut_re(PL_Header_FIFO_out1_re),  // sfix18_En16
                                                           .dataOut_im(PL_Header_FIFO_out1_im),  // sfix18_En16
                                                           .startOut(PL_Header_FIFO_out2),
                                                           .endOut(PL_Header_FIFO_out3),
                                                           .validOut(PL_Header_FIFO_out4),
                                                           .endOut1(PL_Header_FIFO_out5)
                                                           );

  assign plheaderData_re = PL_Header_FIFO_out1_re;

  assign plheaderData_im = PL_Header_FIFO_out1_im;

  assign plheaderStart = PL_Header_FIFO_out2;

  assign plheaderEnd = PL_Header_FIFO_out3;

  assign plheaderValid = PL_Header_FIFO_out4;

  assign pilotData_re = Pilot_Generator_out1_re;

  assign pilotData_im = Pilot_Generator_out1_im;

  assign validOut_1 = validOut;

  assign pilotValid = validOut_1;

  assign slotsData_re = PL_Data_FIFO_out2_re;

  assign slotsData_im = PL_Data_FIFO_out2_im;

  assign slotsValid = PL_Data_FIFO_out3;

  assign dummyData_re = PL_Data_FIFO_out4_re;

  assign dummyData_im = PL_Data_FIFO_out4_im;

  assign valid_1 = valid;

  assign dummyValid = valid_1;

  assign dummyHeaderSrt = PL_Data_FIFO_out6;

  assign dummyHeaderEnd = PL_Data_FIFO_out7;

endmodule  // dvbs2hdlTransmitterCore_RAM_FIFO

