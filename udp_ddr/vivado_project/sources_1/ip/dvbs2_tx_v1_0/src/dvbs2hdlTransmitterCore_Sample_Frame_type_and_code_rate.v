// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_Sample_Frame_type_and_code_rate.v
// Created: 2024-01-10 13:49:57
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_Sample_Frame_type_and_code_rate
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/FEC Encoder/DVB-S2 BCH Encoder/Input controller/Sample Frame type 
// and code rat
// Hierarchy Level: 6
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_Sample_Frame_type_and_code_rate
          (clk,
           reset,
           enb,
           Enable,
           frameTypeIn,
           codeRateIdxIn,
           inpFrameLength,
           inpParityLength,
           validateFrameFlag);


  input   clk;
  input   reset;
  input   enb;
  input   Enable;
  input   frameTypeIn;
  input   [3:0] codeRateIdxIn;  // ufix4
  output  [15:0] inpFrameLength;  // uint16
  output  [7:0] inpParityLength;  // uint8
  output  validateFrameFlag;  // ufix1


  reg [15:0] inpFrameLength_1;  // uint16
  reg [7:0] inpParityLength_1;  // uint8
  reg  validateFrameFlag_1;  // ufix1
  reg [15:0] frameLength;  // ufix16
  reg [7:0] parityLength;  // ufix8
  reg  validateFrame;  // ufix1
  reg [15:0] frameLength_next;  // ufix16
  reg [7:0] parityLength_next;  // ufix8
  reg  validateFrame_next;  // ufix1
  reg [15:0] t_0 [0:15];  // ufix16 [16]
  reg [13:0] t_1 [0:15];  // ufix14 [16]
  reg [7:0] t_2 [0:15];  // ufix8 [16]
  reg [4:0] add_temp;  // ufix5
  reg [4:0] add_temp_0;  // ufix5
  reg [4:0] add_temp_1;  // ufix5
  reg [4:0] add_temp_2;  // ufix5
  reg [4:0] add_temp_3;  // ufix5
  reg [4:0] add_temp_4;  // ufix5
  reg [4:0] t_3;  // ufix5
  reg [4:0] t_4;  // ufix5
  reg [4:0] t_5;  // ufix5
  reg [4:0] t_6;  // ufix5
  reg [4:0] t_7;  // ufix5
  reg [4:0] t_8;  // ufix5


  always @(posedge clk or posedge reset)
    begin : Sample_Frame_type_and_code_rate_process
      if (reset == 1'b1) begin
        frameLength <= 16'b0000000000000000;
        parityLength <= 8'b00000000;
        validateFrame <= 1'b0;
      end
      else begin
        if (enb) begin
          frameLength <= frameLength_next;
          parityLength <= parityLength_next;
          validateFrame <= validateFrame_next;
        end
      end
    end

  always @(Enable, codeRateIdxIn, frameLength, frameTypeIn, parityLength, validateFrame) begin
    t_0[0] = 16'b0011111010000111;
    t_0[1] = 16'b0101001110011111;
    t_0[2] = 16'b0110010001111111;
    t_0[3] = 16'b0111110111001111;
    t_0[4] = 16'b1001011100011111;
    t_0[5] = 16'b1010100000011111;
    t_0[6] = 16'b1011110100010111;
    t_0[7] = 16'b1100100110111111;
    t_0[8] = 16'b1101001001001111;
    t_0[9] = 16'b1110000001111111;
    t_0[10] = 16'b1110001101001111;
    t_0[11] = 16'b1110001101001111;
    t_0[12] = 16'b1110001101001111;
    t_0[13] = 16'b1110001101001111;
    t_0[14] = 16'b1110001101001111;
    t_0[15] = 16'b1110001101001111;
    t_1[0] = 14'b00101111111111;
    t_1[1] = 14'b01010001101111;
    t_1[2] = 14'b01100010100111;
    t_1[3] = 14'b01101101110111;
    t_1[4] = 14'b10010101001111;
    t_1[5] = 14'b10100110000111;
    t_1[6] = 14'b10110110111111;
    t_1[7] = 14'b11000010001111;
    t_1[8] = 14'b11001101011111;
    t_1[9] = 14'b11011110010111;
    t_1[10] = 14'b11011110010111;
    t_1[11] = 14'b11011110010111;
    t_1[12] = 14'b11011110010111;
    t_1[13] = 14'b11011110010111;
    t_1[14] = 14'b11011110010111;
    t_1[15] = 14'b11011110010111;
    t_2[0] = 8'b10111111;
    t_2[1] = 8'b10111111;
    t_2[2] = 8'b10111111;
    t_2[3] = 8'b10111111;
    t_2[4] = 8'b10111111;
    t_2[5] = 8'b10011111;
    t_2[6] = 8'b10111111;
    t_2[7] = 8'b10111111;
    t_2[8] = 8'b10011111;
    t_2[9] = 8'b01111111;
    t_2[10] = 8'b01111111;
    t_2[11] = 8'b01111111;
    t_2[12] = 8'b01111111;
    t_2[13] = 8'b01111111;
    t_2[14] = 8'b01111111;
    t_2[15] = 8'b01111111;
    add_temp = 5'b00000;
    add_temp_0 = 5'b00000;
    add_temp_1 = 5'b00000;
    add_temp_2 = 5'b00000;
    add_temp_3 = 5'b00000;
    add_temp_4 = 5'b00000;
    t_4 = 5'b00000;
    t_6 = 5'b00000;
    t_3 = 5'b00000;
    t_5 = 5'b00000;
    t_7 = 5'b00000;
    t_8 = 5'b00000;
    frameLength_next = frameLength;
    parityLength_next = parityLength;
    validateFrame_next = validateFrame;
    // LUT
    // fetch from inputFramLenLUT
    if (Enable) begin
      if (( ! frameTypeIn && (codeRateIdxIn <= 4'b1010)) || (frameTypeIn && (codeRateIdxIn <= 4'b1001))) begin
        validateFrameFlag_1 = 1'b1;
        validateFrame_next = 1'b1;
      end
      else begin
        validateFrameFlag_1 = 1'b0;
        validateFrame_next = 1'b0;
      end
      if (frameTypeIn) begin
        t_4 = {1'b0, codeRateIdxIn};
        add_temp_0 = t_4 + 5'b00001;
        // inpFrameLength_1 = {2'b0, t_1[$signed({1'b0, add_temp_0}) - 32'sd1]};
        inpFrameLength_1 = {2'b0, t_1[({1'b0, add_temp_0}) - 32'sd1]};
        t_6 = {1'b0, codeRateIdxIn};
        add_temp_2 = t_6 + 5'b00001;
        // frameLength_next = {2'b0, t_1[({1'b0, add_temp_2}) - 32'sd1]};
        frameLength_next = {2'b0, t_1[({1'b0, add_temp_2}) - 32'sd1]};
        inpParityLength_1 = 8'b10100111;
        parityLength_next = 8'b10100111;
      end
      else begin
        t_3 = {1'b0, codeRateIdxIn};
        add_temp = t_3 + 5'b00001;
        // inpFrameLength_1 = t_0[$signed({1'b0, add_temp}) - 32'sd1];
        inpFrameLength_1 = t_0[({1'b0, add_temp}) - 32'sd1];
        t_5 = {1'b0, codeRateIdxIn};
        add_temp_1 = t_5 + 5'b00001;
        // frameLength_next = t_0[$signed({1'b0, add_temp_1}) - 32'sd1];
        frameLength_next = t_0[({1'b0, add_temp_1}) - 32'sd1];
        t_7 = {1'b0, codeRateIdxIn};
        add_temp_3 = t_7 + 5'b00001;
        // inpParityLength_1 = t_2[$signed({1'b0, add_temp_3}) - 32'sd1];
        inpParityLength_1 = t_2[({1'b0, add_temp_3}) - 32'sd1];
        t_8 = {1'b0, codeRateIdxIn};
        add_temp_4 = t_8 + 5'b00001;
        // parityLength_next = t_2[$signed({1'b0, add_temp_4}) - 32'sd1];
        parityLength_next = t_2[({1'b0, add_temp_4}) - 32'sd1];
      end
    end
    else begin
      inpFrameLength_1 = frameLength;
      inpParityLength_1 = parityLength;
      validateFrameFlag_1 = validateFrame;
    end
  end



  assign inpFrameLength = inpFrameLength_1;

  assign inpParityLength = inpParityLength_1;

  assign validateFrameFlag = validateFrameFlag_1;

endmodule  // dvbs2hdlTransmitterCore_Sample_Frame_type_and_code_rate

