// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_DVB_S2_Symbol_Modulator1.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_DVB_S2_Symbol_Modulator1
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/Symbol Modulator/DVB-S2 Symbol Modulator1
// Hierarchy Level: 4
// Model version: 4.5
// 
// DVB-S2 Symbol Modulator
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_DVB_S2_Symbol_Modulator1
          (clk,
           reset,
           enb,
           in0,
           in1,
           in2,
           in3,
           in4,
           out0_re,
           out0_im,
           out1);


  input   clk;
  input   reset;
  input   enb;
  input   in0;
  input   in1;
  input   [2:0] in2;  // ufix3
  input   [3:0] in3;  // ufix4
  input   in4;
  output  signed [17:0] out0_re;  // sfix18_En16
  output  signed [17:0] out0_im;  // sfix18_En16
  output  out1;


  wire [2:0] modIndxSig;  // ufix3
  wire [2:0] codeRateIndxSig;  // ufix3
  wire resetIn1;  // ufix1
  wire bpskEvenSymFlag1;  // ufix1
  reg [2:0] modIndxSigDelay1;  // ufix3
  reg [2:0] delay_modIndxSigDelay1_reg [0:6];  // ufix3 [7]
  reg [2:0] delay_modIndxSigDelay1_reg_next [0:6];  // ufix3 [7]
  reg [2:0] modIndxSigDelay2;  // ufix3
  reg  validInDelay1;  // ufix1
  wire bpskEnable;  // ufix1
  wire validInBPSK;  // ufix1
  reg  [6:0] delay_addrBPSKValidOut_reg;  // ufix1 [7]
  wire bpskvalidOutSymMod;  // ufix1
  wire dataInDTC;  // ufix1
  reg  dataInDelay1;  // ufix1
  wire qpskEnable;  // ufix1
  wire validInQPSK;  // ufix1
  wire inpPortFlag;  // ufix1
  wire switch_compare_1;
  wire ConstantZeroForScReset;  // ufix1
  wire resetIn;  // ufix1
  wire [1:0] addrQPSK;  // ufix2
  wire addrQPSKValidOut;  // ufix1
  reg  addrQPSKValidOutDelay;  // ufix1
  reg  [3:0] delay_QPSKValidOut_reg;  // ufix1 [4]
  wire qpskvalidOutSymMod;  // ufix1
  wire psk8Enable;  // ufix1
  wire validIn8PSK;  // ufix1
  wire [2:0] addr8PSK;  // ufix3
  wire addr8PSKValidOut;  // ufix1
  reg  addr8PSKValidOutDelay;  // ufix1
  reg  [2:0] delay_8PSKValidOut_reg;  // ufix1 [3]
  wire psk8validOutSymMod;  // ufix1
  wire apsk16Enable;  // ufix1
  wire validIn16APSK;  // ufix1
  wire [3:0] addr16APSK;  // ufix4
  wire addr16APSKValidOut;  // ufix1
  reg  [1:0] delay_addr16APSKValidOut_reg;  // ufix1 [2]
  wire addr16APSKValidOutDelay;  // ufix1
  reg  apsk16validOutSymMod;  // ufix1
  wire apsk32Enable;  // ufix1
  wire validIn32APSK;  // ufix1
  wire [4:0] addr32APSK;  // ufix5
  wire addr32APSKValidOut;  // ufix1
  reg  [1:0] delay_addr32APSKValidOut_reg;  // ufix1 [2]
  wire addr32APSKValidOutDelay;  // ufix1
  wire validOutSymMod;  // ufix1
  reg  validOut;
  wire switch_compare_1_1;
  wire signed [17:0] ComplxZeroConst_re;  // sfix18_En16
  wire signed [17:0] ComplxZeroConst_im;  // sfix18_En16
  wire switch_compare_1_2;
  wire bpskEvenSymFlag;  // ufix1
  wire resetInBPSKFlag;  // ufix1
  reg  evenSymFlag;  // ufix1
  wire switch_compare_1_3;
  wire signed [17:0] TablePiBy2BPSKOddRe_1 [0:1];  // sfix18_En16 [2]
  wire signed [17:0] bpskdataOutOddSymModRe;  // sfix18_En16
  wire signed [17:0] TablePiBy2BPSKOddIm_1 [0:1];  // sfix18_En16 [2]
  wire signed [17:0] bpskdataOutOddSymModIm;  // sfix18_En16
  wire signed [17:0] TablePiBy2BPSKEvenRe_1 [0:1];  // sfix18_En16 [2]
  wire signed [17:0] bpskdataOutEvenSymModRe;  // sfix18_En16
  wire signed [17:0] TablePiBy2BPSKEvenIm_1 [0:1];  // sfix18_En16 [2]
  wire signed [17:0] bpskdataOutEvenSymModIm;  // sfix18_En16
  wire signed [17:0] bpskdataOutSymMod_re;  // sfix18_En16
  wire signed [17:0] bpskdataOutSymMod_im;  // sfix18_En16
  reg signed [17:0] delay_bpskdataOutSymMod_reg_re [0:6];  // sfix18_En16 [7]
  reg signed [17:0] delay_bpskdataOutSymMod_reg_im [0:6];  // sfix18_En16 [7]
  reg signed [17:0] delay_bpskdataOutSymMod_reg_next_re [0:6];  // sfix18_En16 [7]
  reg signed [17:0] delay_bpskdataOutSymMod_reg_next_im [0:6];  // sfix18_En16 [7]
  reg signed [17:0] bpskdataOutSymModD1_re;  // sfix18_En16
  reg signed [17:0] bpskdataOutSymModD1_im;  // sfix18_En16
  reg [1:0] addrQPSKDelay;  // ufix2
  wire signed [17:0] TableQPSKRe_1 [0:3];  // sfix18_En16 [4]
  wire signed [17:0] qpskdataOutSymModRe;  // sfix18_En16
  wire signed [17:0] TableQPSKIm_1 [0:3];  // sfix18_En16 [4]
  wire signed [17:0] qpskdataOutSymModIm;  // sfix18_En16
  reg signed [17:0] delay_qpskdataOutSymMod_reg_re [0:3];  // sfix18_En16 [4]
  reg signed [17:0] delay_qpskdataOutSymMod_reg_im [0:3];  // sfix18_En16 [4]
  reg signed [17:0] delay_qpskdataOutSymMod_reg_next_re [0:3];  // sfix18_En16 [4]
  reg signed [17:0] delay_qpskdataOutSymMod_reg_next_im [0:3];  // sfix18_En16 [4]
  reg signed [17:0] qpskdataOutSymModD1_re;  // sfix18_En16
  reg signed [17:0] qpskdataOutSymModD1_im;  // sfix18_En16
  reg [2:0] addr8PSKDelay;  // ufix3
  wire signed [17:0] Table8PSKRe_1 [0:7];  // sfix18_En16 [8]
  wire signed [17:0] psk8dataOutSymModRe;  // sfix18_En16
  wire signed [17:0] Table8PSKIm_1 [0:7];  // sfix18_En16 [8]
  wire signed [17:0] psk8dataOutSymModIm;  // sfix18_En16
  reg signed [17:0] delay_psk8dataOutSymMod_reg_re [0:2];  // sfix18_En16 [3]
  reg signed [17:0] delay_psk8dataOutSymMod_reg_im [0:2];  // sfix18_En16 [3]
  reg signed [17:0] delay_psk8dataOutSymMod_reg_next_re [0:2];  // sfix18_En16 [3]
  reg signed [17:0] delay_psk8dataOutSymMod_reg_next_im [0:2];  // sfix18_En16 [3]
  reg signed [17:0] psk8dataOutSymModD1_re;  // sfix18_En16
  reg signed [17:0] psk8dataOutSymModD1_im;  // sfix18_En16
  wire unitAvgPowerFlagIn;  // ufix1
  wire switch_compare_1_4;
  reg [2:0] codeRateIndxSigDelay1;  // ufix3
  reg [2:0] delay_codeRateIndxSigDelay1_16APSK_reg [0:4];  // ufix3 [5]
  reg [2:0] delay_codeRateIndxSigDelay1_16APSK_reg_next [0:4];  // ufix3 [5]
  reg [2:0] codeRateIndx16APSKD2;  // ufix3
  reg [3:0] addr16APSKDelay;  // ufix4
  wire signed [17:0] TableUnNorm16APSKRe_1 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16unNormReRate1;  // sfix18_En16
  wire signed [17:0] TableUnNorm16APSKRe_3 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16unNormReRate2;  // sfix18_En16
  wire signed [17:0] TableUnNorm16APSKRe_5 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16unNormReRate3;  // sfix18_En16
  wire signed [17:0] TableUnNorm16APSKRe_7 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16unNormReRate4;  // sfix18_En16
  wire signed [17:0] TableUnNorm16APSKRe_9 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16unNormReRate5;  // sfix18_En16
  wire signed [17:0] TableUnNorm16APSKRe_11 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16unNormReRate6;  // sfix18_En16
  wire signed [17:0] apsk16UnNormReal;  // sfix18_En16
  reg signed [17:0] apsk16UnNormRealD1;  // sfix18_En16
  wire signed [17:0] TableUnNorm16APSKIm_1 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16unNormImRate1;  // sfix18_En16
  wire signed [17:0] TableUnNorm16APSKIm_3 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16unNormImRate2;  // sfix18_En16
  wire signed [17:0] TableUnNorm16APSKIm_5 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16unNormImRate3;  // sfix18_En16
  wire signed [17:0] TableUnNorm16APSKIm_7 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16unNormImRate4;  // sfix18_En16
  wire signed [17:0] TableUnNorm16APSKIm_9 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16unNormImRate5;  // sfix18_En16
  wire signed [17:0] TableUnNorm16APSKIm_11 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16unNormImRate6;  // sfix18_En16
  wire signed [17:0] apsk16UnNormImag;  // sfix18_En16
  reg signed [17:0] apsk16UnNormImagD1;  // sfix18_En16
  wire signed [17:0] TableNorm16APSKRe_1 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16NormReRate1;  // sfix18_En16
  wire signed [17:0] TableNorm16APSKRe_3 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16NormReRate2;  // sfix18_En16
  wire signed [17:0] TableNorm16APSKRe_5 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16NormReRate3;  // sfix18_En16
  wire signed [17:0] TableNorm16APSKRe_7 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16NormReRate4;  // sfix18_En16
  wire signed [17:0] TableNorm16APSKRe_9 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16NormReRate5;  // sfix18_En16
  wire signed [17:0] TableNorm16APSKRe_11 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16NormReRate6;  // sfix18_En16
  wire signed [17:0] apsk16NormReal;  // sfix18_En16
  reg signed [17:0] apsk16NormRealD1;  // sfix18_En16
  wire signed [17:0] TableNorm16APSKIm_1 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16NormReImRate1;  // sfix18_En16
  wire signed [17:0] TableNorm16APSKIm_3 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16NormReImRate2;  // sfix18_En16
  wire signed [17:0] TableNorm16APSKIm_5 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16NormReImRate3;  // sfix18_En16
  wire signed [17:0] TableNorm16APSKIm_7 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16NormReImRate4;  // sfix18_En16
  wire signed [17:0] TableNorm16APSKIm_9 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16NormReImRate5;  // sfix18_En16
  wire signed [17:0] TableNorm16APSKIm_11 [0:15];  // sfix18_En16 [16]
  wire signed [17:0] apsk16NormReImRate6;  // sfix18_En16
  wire signed [17:0] apsk16NormImag;  // sfix18_En16
  reg signed [17:0] apsk16NormImagD1;  // sfix18_En16
  wire signed [17:0] apsk16DataOutSymMod_re;  // sfix18_En16
  wire signed [17:0] apsk16DataOutSymMod_im;  // sfix18_En16
  reg signed [17:0] apsk16DataOutSymModD1_re;  // sfix18_En16
  reg signed [17:0] apsk16DataOutSymModD1_im;  // sfix18_En16
  wire switch_compare_1_5;
  reg [2:0] delay_codeRateIndxSigDelay1_32APSK_reg [0:5];  // ufix3 [6]
  reg [2:0] delay_codeRateIndxSigDelay1_32APSK_reg_next [0:5];  // ufix3 [6]
  reg [2:0] codeRateIndx32APSKD2;  // ufix3
  reg [4:0] addr32APSKDelay;  // ufix5
  wire signed [17:0] TableUnNorm32APSKRe_1 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32unNormReRate1;  // sfix18_En16
  wire signed [17:0] TableUnNorm32APSKRe_3 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32unNormReRate2;  // sfix18_En16
  wire signed [17:0] TableUnNorm32APSKRe_5 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32unNormReRate3;  // sfix18_En16
  wire signed [17:0] TableUnNorm32APSKRe_7 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32unNormReRate4;  // sfix18_En16
  wire signed [17:0] TableUnNorm32APSKRe_9 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32unNormReRate5;  // sfix18_En16
  wire signed [17:0] apsk32UnNormReal;  // sfix18_En16
  reg signed [17:0] apsk32UnNormRealD1;  // sfix18_En16
  wire signed [17:0] TableUnNorm32APSKIm_1 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32unNormImRate1;  // sfix18_En16
  wire signed [17:0] TableUnNorm32APSKIm_3 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32unNormImRate2;  // sfix18_En16
  wire signed [17:0] TableUnNorm32APSKIm_5 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32unNormImRate3;  // sfix18_En16
  wire signed [17:0] TableUnNorm32APSKIm_7 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32unNormImRate4;  // sfix18_En16
  wire signed [17:0] TableUnNorm32APSKIm_9 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32unNormImRate5;  // sfix18_En16
  wire signed [17:0] apsk32UnNormImag;  // sfix18_En16
  reg signed [17:0] apsk32UnNormImagD1;  // sfix18_En16
  wire signed [17:0] TableNorm32APSKRe_1 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32NormReRate1;  // sfix18_En16
  wire signed [17:0] TableNorm32APSKRe_3 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32NormReRate2;  // sfix18_En16
  wire signed [17:0] TableNorm32APSKRe_5 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32NormReRate3;  // sfix18_En16
  wire signed [17:0] TableNorm32APSKRe_7 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32NormReRate4;  // sfix18_En16
  wire signed [17:0] TableNorm32APSKRe_9 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32NormReRate5;  // sfix18_En16
  wire signed [17:0] apsk32NormReal;  // sfix18_En16
  reg signed [17:0] apsk32NormRealD1;  // sfix18_En16
  wire signed [17:0] TableNorm32APSKIm_1 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32NormReImRate1;  // sfix18_En16
  wire signed [17:0] TableNorm32APSKIm_3 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32NormReImRate2;  // sfix18_En16
  wire signed [17:0] TableNorm32APSKIm_5 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32NormReImRate3;  // sfix18_En16
  wire signed [17:0] TableNorm32APSKIm_7 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32NormReImRate4;  // sfix18_En16
  wire signed [17:0] TableNorm32APSKIm_9 [0:31];  // sfix18_En16 [32]
  wire signed [17:0] apsk32NormReImRate5;  // sfix18_En16
  wire signed [17:0] apsk32NormImag;  // sfix18_En16
  reg signed [17:0] apsk32NormImagD1;  // sfix18_En16
  wire signed [17:0] apsk32DataOutSymMod_re;  // sfix18_En16
  wire signed [17:0] apsk32DataOutSymMod_im;  // sfix18_En16
  wire signed [17:0] dataOutSymMod_re;  // sfix18_En16
  wire signed [17:0] dataOutSymMod_im;  // sfix18_En16
  reg signed [17:0] dataOutSymModD1_re;  // sfix18_En16
  reg signed [17:0] dataOutSymModD1_im;  // sfix18_En16
  wire signed [17:0] dataOut_re;  // sfix18_En16
  wire signed [17:0] dataOut_im;  // sfix18_En16
  reg signed [31:0] delay_modIndxSigDelay1_t_0_0;  // int32
  reg signed [31:0] delay_modIndxSigDelay1_t_0_1;  // int32
  reg signed [31:0] delay_modIndxSigDelay1_t_1;  // int32
  reg signed [31:0] delay_bpskdataOutSymMod_t_0_0;  // int32
  reg signed [31:0] delay_bpskdataOutSymMod_t_0_1;  // int32
  reg signed [31:0] delay_bpskdataOutSymMod_t_1;  // int32
  reg signed [31:0] delay_qpskdataOutSymMod_t_0_0;  // int32
  reg signed [31:0] delay_qpskdataOutSymMod_t_0_1;  // int32
  reg signed [31:0] delay_qpskdataOutSymMod_t_1;  // int32
  reg signed [31:0] delay_psk8dataOutSymMod_t_0_0;  // int32
  reg signed [31:0] delay_psk8dataOutSymMod_t_0_1;  // int32
  reg signed [31:0] delay_psk8dataOutSymMod_t_1;  // int32
  reg signed [31:0] delay_codeRateIndxSigDelay1_16APSK_t_0_0;  // int32
  reg signed [31:0] delay_codeRateIndxSigDelay1_16APSK_t_0_1;  // int32
  reg signed [31:0] delay_codeRateIndxSigDelay1_16APSK_t_1;  // int32
  reg signed [31:0] delay_codeRateIndxSigDelay1_32APSK_t_0_0;  // int32
  reg signed [31:0] delay_codeRateIndxSigDelay1_32APSK_t_0_1;  // int32
  reg signed [31:0] delay_codeRateIndxSigDelay1_32APSK_t_1;  // int32


  dvbs2hdlTransmitterCore_sampleModCodeRateIdxNet u_sampScModCodeRateIdxNet_inst (.clk(clk),
                                                                                  .reset(reset),
                                                                                  .enb(enb),
                                                                                  .startSample(in4),
                                                                                  .modIdx(in2),  // ufix3
                                                                                  .codeRateIdx(in3),  // ufix4
                                                                                  .validIn(in1),
                                                                                  .modIdxSampled(modIndxSig),  // ufix3
                                                                                  .codeRateIdxSampled(codeRateIndxSig),  // ufix3
                                                                                  .resetIn(resetIn1),  // ufix1
                                                                                  .bpskEvenSymFlag(bpskEvenSymFlag1)  // ufix1
                                                                                  );

  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        modIndxSigDelay1 <= 3'b000;
      end
      else begin
        if (enb) begin
          modIndxSigDelay1 <= modIndxSig;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : delay_modIndxSigDelay1_process
      if (reset == 1'b1) begin
        for(delay_modIndxSigDelay1_t_1 = 32'sd0; delay_modIndxSigDelay1_t_1 <= 32'sd6; delay_modIndxSigDelay1_t_1 = delay_modIndxSigDelay1_t_1 + 32'sd1) begin
          delay_modIndxSigDelay1_reg[delay_modIndxSigDelay1_t_1] <= 3'b000;
        end
      end
      else begin
        if (enb) begin
          for(delay_modIndxSigDelay1_t_0_1 = 32'sd0; delay_modIndxSigDelay1_t_0_1 <= 32'sd6; delay_modIndxSigDelay1_t_0_1 = delay_modIndxSigDelay1_t_0_1 + 32'sd1) begin
            delay_modIndxSigDelay1_reg[delay_modIndxSigDelay1_t_0_1] <= delay_modIndxSigDelay1_reg_next[delay_modIndxSigDelay1_t_0_1];
          end
        end
      end
    end

  always @* begin
    modIndxSigDelay2 = delay_modIndxSigDelay1_reg[6];
    delay_modIndxSigDelay1_reg_next[0] = modIndxSigDelay1;

    for(delay_modIndxSigDelay1_t_0_0 = 32'sd0; delay_modIndxSigDelay1_t_0_0 <= 32'sd5; delay_modIndxSigDelay1_t_0_0 = delay_modIndxSigDelay1_t_0_0 + 32'sd1) begin
      delay_modIndxSigDelay1_reg_next[delay_modIndxSigDelay1_t_0_0 + 32'sd1] = delay_modIndxSigDelay1_reg[delay_modIndxSigDelay1_t_0_0];
    end

  end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        validInDelay1 <= 1'b0;
      end
      else begin
        if (enb) begin
          validInDelay1 <= in1;
        end
      end
    end



  assign bpskEnable = modIndxSigDelay1 == 3'b001;



  assign validInBPSK = validInDelay1 & bpskEnable;



  always @(posedge clk or posedge reset)
    begin : delay_addrBPSKValidOut_process
      if (reset == 1'b1) begin
        delay_addrBPSKValidOut_reg <= {7{1'b0}};
      end
      else begin
        if (enb) begin
          delay_addrBPSKValidOut_reg[0] <= validInBPSK;
          delay_addrBPSKValidOut_reg[32'sd6:32'sd1] <= delay_addrBPSKValidOut_reg[32'sd5:32'sd0];
        end
      end
    end

  assign bpskvalidOutSymMod = delay_addrBPSKValidOut_reg[6];



  assign dataInDTC = in0;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        dataInDelay1 <= 1'b0;
      end
      else begin
        if (enb) begin
          dataInDelay1 <= dataInDTC;
        end
      end
    end



  assign qpskEnable = modIndxSigDelay1 == 3'b010;



  assign validInQPSK = validInDelay1 & qpskEnable;



  assign inpPortFlag = 1'b1;



  assign switch_compare_1 = inpPortFlag > 1'b0;



  assign ConstantZeroForScReset = 1'b0;



  assign resetIn = (switch_compare_1 == 1'b0 ? ConstantZeroForScReset :
              resetIn1);



  dvbs2hdlTransmitterCore_buffInpGenAddrQPSK u_buffInpGenQPSKAddr_inst (.clk(clk),
                                                                        .reset(reset),
                                                                        .enb(enb),
                                                                        .dataIn(dataInDelay1),  // ufix1
                                                                        .validIn(validInQPSK),  // ufix1
                                                                        .resetIn(resetIn),  // ufix1
                                                                        .addrQPSK(addrQPSK),  // ufix2
                                                                        .addrQPSKValidOut(addrQPSKValidOut)  // ufix1
                                                                        );

  always @(posedge clk or posedge reset)
    begin : delay_addrQPSKValidOut_process
      if (reset == 1'b1) begin
        addrQPSKValidOutDelay <= 1'b0;
      end
      else begin
        if (enb) begin
          addrQPSKValidOutDelay <= addrQPSKValidOut;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : delay_QPSKValidOut_process
      if (reset == 1'b1) begin
        delay_QPSKValidOut_reg <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          delay_QPSKValidOut_reg[0] <= addrQPSKValidOutDelay;
          delay_QPSKValidOut_reg[32'sd3:32'sd1] <= delay_QPSKValidOut_reg[32'sd2:32'sd0];
        end
      end
    end

  assign qpskvalidOutSymMod = delay_QPSKValidOut_reg[3];



  assign psk8Enable = modIndxSigDelay1 == 3'b011;



  assign validIn8PSK = validInDelay1 & psk8Enable;



  dvbs2hdlTransmitterCore_buffInpGenAddr8PSK u_buffInpGen8PSKAddr_inst (.clk(clk),
                                                                        .reset(reset),
                                                                        .enb(enb),
                                                                        .dataIn(dataInDelay1),  // ufix1
                                                                        .validIn(validIn8PSK),  // ufix1
                                                                        .resetIn(resetIn),  // ufix1
                                                                        .addr8PSK(addr8PSK),  // ufix3
                                                                        .addr8PSKValidOut(addr8PSKValidOut)  // ufix1
                                                                        );

  always @(posedge clk or posedge reset)
    begin : delay_addr8PSKValidOut_process
      if (reset == 1'b1) begin
        addr8PSKValidOutDelay <= 1'b0;
      end
      else begin
        if (enb) begin
          addr8PSKValidOutDelay <= addr8PSKValidOut;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : delay_8PSKValidOut_process
      if (reset == 1'b1) begin
        delay_8PSKValidOut_reg <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          delay_8PSKValidOut_reg[0] <= addr8PSKValidOutDelay;
          delay_8PSKValidOut_reg[32'sd2:32'sd1] <= delay_8PSKValidOut_reg[32'sd1:32'sd0];
        end
      end
    end

  assign psk8validOutSymMod = delay_8PSKValidOut_reg[2];



  assign apsk16Enable = modIndxSigDelay1 == 3'b100;



  assign validIn16APSK = validInDelay1 & apsk16Enable;



  dvbs2hdlTransmitterCore_buffInpGenAddr16APSK u_buffInpGen16APSKAddr_inst (.clk(clk),
                                                                            .reset(reset),
                                                                            .enb(enb),
                                                                            .dataIn(dataInDelay1),  // ufix1
                                                                            .validIn(validIn16APSK),  // ufix1
                                                                            .resetIn(resetIn),  // ufix1
                                                                            .addr16APSK(addr16APSK),  // ufix4
                                                                            .addr16APSKValidOut(addr16APSKValidOut)  // ufix1
                                                                            );

  always @(posedge clk or posedge reset)
    begin : delay_addr16APSKValidOut_process
      if (reset == 1'b1) begin
        delay_addr16APSKValidOut_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          delay_addr16APSKValidOut_reg[0] <= addr16APSKValidOut;
          delay_addr16APSKValidOut_reg[1] <= delay_addr16APSKValidOut_reg[0];
        end
      end
    end

  assign addr16APSKValidOutDelay = delay_addr16APSKValidOut_reg[1];



  always @(posedge clk or posedge reset)
    begin : delay_16APSKValidOut_process
      if (reset == 1'b1) begin
        apsk16validOutSymMod <= 1'b0;
      end
      else begin
        if (enb) begin
          apsk16validOutSymMod <= addr16APSKValidOutDelay;
        end
      end
    end



  assign apsk32Enable = modIndxSigDelay1 == 3'b101;



  assign validIn32APSK = validInDelay1 & apsk32Enable;



  dvbs2hdlTransmitterCore_buffInpGenAddr32APSK u_buffInpGen32APSKAddr_inst (.clk(clk),
                                                                            .reset(reset),
                                                                            .enb(enb),
                                                                            .dataIn(dataInDelay1),  // ufix1
                                                                            .validIn(validIn32APSK),  // ufix1
                                                                            .resetIn(resetIn),  // ufix1
                                                                            .addr32APSK(addr32APSK),  // ufix5
                                                                            .addr32APSKValidOut(addr32APSKValidOut)  // ufix1
                                                                            );

  always @(posedge clk or posedge reset)
    begin : delay_addr32APSKValidOut_process
      if (reset == 1'b1) begin
        delay_addr32APSKValidOut_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          delay_addr32APSKValidOut_reg[0] <= addr32APSKValidOut;
          delay_addr32APSKValidOut_reg[1] <= delay_addr32APSKValidOut_reg[0];
        end
      end
    end

  assign addr32APSKValidOutDelay = delay_addr32APSKValidOut_reg[1];



  assign validOutSymMod = (modIndxSigDelay2 == 3'b001 ? bpskvalidOutSymMod :
              (modIndxSigDelay2 == 3'b010 ? qpskvalidOutSymMod :
              (modIndxSigDelay2 == 3'b011 ? psk8validOutSymMod :
              (modIndxSigDelay2 == 3'b100 ? apsk16validOutSymMod :
              addr32APSKValidOutDelay))));



  always @(posedge clk or posedge reset)
    begin : delay_validOut_process
      if (reset == 1'b1) begin
        validOut <= 1'b0;
      end
      else begin
        if (enb) begin
          validOut <= validOutSymMod;
        end
      end
    end



  assign switch_compare_1_1 = validOut > 1'b0;



  assign ComplxZeroConst_re = 18'sb000000000000000000;
  assign ComplxZeroConst_im = 18'sb000000000000000000;



  assign switch_compare_1_2 = inpPortFlag > 1'b0;



  assign bpskEvenSymFlag = (switch_compare_1_2 == 1'b0 ? ConstantZeroForScReset :
              bpskEvenSymFlag1);



  assign resetInBPSKFlag = resetIn | bpskEvenSymFlag;



  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = -1
  //  count to value  = 0
  always @(posedge clk or posedge reset)
    begin : evenSymcounter_process
      if (reset == 1'b1) begin
        evenSymFlag <= 1'b1;
      end
      else begin
        if (enb) begin
          if (resetInBPSKFlag == 1'b1) begin
            evenSymFlag <= 1'b1;
          end
          else if (validInBPSK == 1'b1) begin
            evenSymFlag <=  ~ evenSymFlag;
          end
        end
      end
    end



  assign switch_compare_1_3 = evenSymFlag > 1'b0;



  assign TablePiBy2BPSKOddRe_1[0] = 18'sb110100101011111011;
  assign TablePiBy2BPSKOddRe_1[1] = 18'sb001011010100000100;
  assign bpskdataOutOddSymModRe = TablePiBy2BPSKOddRe_1[dataInDelay1];



  assign TablePiBy2BPSKOddIm_1[0] = 18'sb001011010100000100;
  assign TablePiBy2BPSKOddIm_1[1] = 18'sb110100101011111011;
  assign bpskdataOutOddSymModIm = TablePiBy2BPSKOddIm_1[dataInDelay1];



  assign TablePiBy2BPSKEvenRe_1[0] = 18'sb001011010100000100;
  assign TablePiBy2BPSKEvenRe_1[1] = 18'sb110100101011111011;
  assign bpskdataOutEvenSymModRe = TablePiBy2BPSKEvenRe_1[dataInDelay1];



  assign TablePiBy2BPSKEvenIm_1[0] = 18'sb001011010100000100;
  assign TablePiBy2BPSKEvenIm_1[1] = 18'sb110100101011111011;
  assign bpskdataOutEvenSymModIm = TablePiBy2BPSKEvenIm_1[dataInDelay1];



  assign bpskdataOutSymMod_re = (switch_compare_1_3 == 1'b0 ? bpskdataOutOddSymModRe :
              bpskdataOutEvenSymModRe);
  assign bpskdataOutSymMod_im = (switch_compare_1_3 == 1'b0 ? bpskdataOutOddSymModIm :
              bpskdataOutEvenSymModIm);



  always @(posedge clk or posedge reset)
    begin : delay_bpskdataOutSymMod_process
      if (reset == 1'b1) begin
        for(delay_bpskdataOutSymMod_t_1 = 32'sd0; delay_bpskdataOutSymMod_t_1 <= 32'sd6; delay_bpskdataOutSymMod_t_1 = delay_bpskdataOutSymMod_t_1 + 32'sd1) begin
          delay_bpskdataOutSymMod_reg_re[delay_bpskdataOutSymMod_t_1] <= 18'sb000000000000000000;
          delay_bpskdataOutSymMod_reg_im[delay_bpskdataOutSymMod_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(delay_bpskdataOutSymMod_t_0_1 = 32'sd0; delay_bpskdataOutSymMod_t_0_1 <= 32'sd6; delay_bpskdataOutSymMod_t_0_1 = delay_bpskdataOutSymMod_t_0_1 + 32'sd1) begin
            delay_bpskdataOutSymMod_reg_re[delay_bpskdataOutSymMod_t_0_1] <= delay_bpskdataOutSymMod_reg_next_re[delay_bpskdataOutSymMod_t_0_1];
            delay_bpskdataOutSymMod_reg_im[delay_bpskdataOutSymMod_t_0_1] <= delay_bpskdataOutSymMod_reg_next_im[delay_bpskdataOutSymMod_t_0_1];
          end
        end
      end
    end

  always @* begin
    bpskdataOutSymModD1_re = delay_bpskdataOutSymMod_reg_re[6];
    bpskdataOutSymModD1_im = delay_bpskdataOutSymMod_reg_im[6];
    delay_bpskdataOutSymMod_reg_next_re[0] = bpskdataOutSymMod_re;
    delay_bpskdataOutSymMod_reg_next_im[0] = bpskdataOutSymMod_im;

    for(delay_bpskdataOutSymMod_t_0_0 = 32'sd0; delay_bpskdataOutSymMod_t_0_0 <= 32'sd5; delay_bpskdataOutSymMod_t_0_0 = delay_bpskdataOutSymMod_t_0_0 + 32'sd1) begin
      delay_bpskdataOutSymMod_reg_next_re[delay_bpskdataOutSymMod_t_0_0 + 32'sd1] = delay_bpskdataOutSymMod_reg_re[delay_bpskdataOutSymMod_t_0_0];
      delay_bpskdataOutSymMod_reg_next_im[delay_bpskdataOutSymMod_t_0_0 + 32'sd1] = delay_bpskdataOutSymMod_reg_im[delay_bpskdataOutSymMod_t_0_0];
    end

  end



  always @(posedge clk or posedge reset)
    begin : delay_addrQPSK_process
      if (reset == 1'b1) begin
        addrQPSKDelay <= 2'b00;
      end
      else begin
        if (enb) begin
          addrQPSKDelay <= addrQPSK;
        end
      end
    end



  assign TableQPSKRe_1[0] = 18'sb001011010100000100;
  assign TableQPSKRe_1[1] = 18'sb001011010100000100;
  assign TableQPSKRe_1[2] = 18'sb110100101011111011;
  assign TableQPSKRe_1[3] = 18'sb110100101011111011;
  assign qpskdataOutSymModRe = TableQPSKRe_1[addrQPSKDelay];



  assign TableQPSKIm_1[0] = 18'sb001011010100000100;
  assign TableQPSKIm_1[1] = 18'sb110100101011111011;
  assign TableQPSKIm_1[2] = 18'sb001011010100000100;
  assign TableQPSKIm_1[3] = 18'sb110100101011111011;
  assign qpskdataOutSymModIm = TableQPSKIm_1[addrQPSKDelay];



  always @(posedge clk or posedge reset)
    begin : delay_qpskdataOutSymMod_process
      if (reset == 1'b1) begin
        for(delay_qpskdataOutSymMod_t_1 = 32'sd0; delay_qpskdataOutSymMod_t_1 <= 32'sd3; delay_qpskdataOutSymMod_t_1 = delay_qpskdataOutSymMod_t_1 + 32'sd1) begin
          delay_qpskdataOutSymMod_reg_re[delay_qpskdataOutSymMod_t_1] <= 18'sb000000000000000000;
          delay_qpskdataOutSymMod_reg_im[delay_qpskdataOutSymMod_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(delay_qpskdataOutSymMod_t_0_1 = 32'sd0; delay_qpskdataOutSymMod_t_0_1 <= 32'sd3; delay_qpskdataOutSymMod_t_0_1 = delay_qpskdataOutSymMod_t_0_1 + 32'sd1) begin
            delay_qpskdataOutSymMod_reg_re[delay_qpskdataOutSymMod_t_0_1] <= delay_qpskdataOutSymMod_reg_next_re[delay_qpskdataOutSymMod_t_0_1];
            delay_qpskdataOutSymMod_reg_im[delay_qpskdataOutSymMod_t_0_1] <= delay_qpskdataOutSymMod_reg_next_im[delay_qpskdataOutSymMod_t_0_1];
          end
        end
      end
    end

  always @* begin
    qpskdataOutSymModD1_re = delay_qpskdataOutSymMod_reg_re[3];
    qpskdataOutSymModD1_im = delay_qpskdataOutSymMod_reg_im[3];
    delay_qpskdataOutSymMod_reg_next_re[0] = qpskdataOutSymModRe;
    delay_qpskdataOutSymMod_reg_next_im[0] = qpskdataOutSymModIm;

    for(delay_qpskdataOutSymMod_t_0_0 = 32'sd0; delay_qpskdataOutSymMod_t_0_0 <= 32'sd2; delay_qpskdataOutSymMod_t_0_0 = delay_qpskdataOutSymMod_t_0_0 + 32'sd1) begin
      delay_qpskdataOutSymMod_reg_next_re[delay_qpskdataOutSymMod_t_0_0 + 32'sd1] = delay_qpskdataOutSymMod_reg_re[delay_qpskdataOutSymMod_t_0_0];
      delay_qpskdataOutSymMod_reg_next_im[delay_qpskdataOutSymMod_t_0_0 + 32'sd1] = delay_qpskdataOutSymMod_reg_im[delay_qpskdataOutSymMod_t_0_0];
    end

  end



  always @(posedge clk or posedge reset)
    begin : delay_addr8PSK_process
      if (reset == 1'b1) begin
        addr8PSKDelay <= 3'b000;
      end
      else begin
        if (enb) begin
          addr8PSKDelay <= addr8PSK;
        end
      end
    end



  assign Table8PSKRe_1[0] = 18'sb001011010100000100;
  assign Table8PSKRe_1[1] = 18'sb010000000000000000;
  assign Table8PSKRe_1[2] = 18'sb110000000000000000;
  assign Table8PSKRe_1[3] = 18'sb110100101011111011;
  assign Table8PSKRe_1[4] = 18'sb000000000000000000;
  assign Table8PSKRe_1[5] = 18'sb001011010100000100;
  assign Table8PSKRe_1[6] = 18'sb110100101011111011;
  assign Table8PSKRe_1[7] = 18'sb000000000000000000;
  assign psk8dataOutSymModRe = Table8PSKRe_1[addr8PSKDelay];



  assign Table8PSKIm_1[0] = 18'sb001011010100000100;
  assign Table8PSKIm_1[1] = 18'sb000000000000000000;
  assign Table8PSKIm_1[2] = 18'sb000000000000000000;
  assign Table8PSKIm_1[3] = 18'sb110100101011111011;
  assign Table8PSKIm_1[4] = 18'sb010000000000000000;
  assign Table8PSKIm_1[5] = 18'sb110100101011111011;
  assign Table8PSKIm_1[6] = 18'sb001011010100000100;
  assign Table8PSKIm_1[7] = 18'sb110000000000000000;
  assign psk8dataOutSymModIm = Table8PSKIm_1[addr8PSKDelay];



  always @(posedge clk or posedge reset)
    begin : delay_psk8dataOutSymMod_process
      if (reset == 1'b1) begin
        for(delay_psk8dataOutSymMod_t_1 = 32'sd0; delay_psk8dataOutSymMod_t_1 <= 32'sd2; delay_psk8dataOutSymMod_t_1 = delay_psk8dataOutSymMod_t_1 + 32'sd1) begin
          delay_psk8dataOutSymMod_reg_re[delay_psk8dataOutSymMod_t_1] <= 18'sb000000000000000000;
          delay_psk8dataOutSymMod_reg_im[delay_psk8dataOutSymMod_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(delay_psk8dataOutSymMod_t_0_1 = 32'sd0; delay_psk8dataOutSymMod_t_0_1 <= 32'sd2; delay_psk8dataOutSymMod_t_0_1 = delay_psk8dataOutSymMod_t_0_1 + 32'sd1) begin
            delay_psk8dataOutSymMod_reg_re[delay_psk8dataOutSymMod_t_0_1] <= delay_psk8dataOutSymMod_reg_next_re[delay_psk8dataOutSymMod_t_0_1];
            delay_psk8dataOutSymMod_reg_im[delay_psk8dataOutSymMod_t_0_1] <= delay_psk8dataOutSymMod_reg_next_im[delay_psk8dataOutSymMod_t_0_1];
          end
        end
      end
    end

  always @* begin
    psk8dataOutSymModD1_re = delay_psk8dataOutSymMod_reg_re[2];
    psk8dataOutSymModD1_im = delay_psk8dataOutSymMod_reg_im[2];
    delay_psk8dataOutSymMod_reg_next_re[0] = psk8dataOutSymModRe;
    delay_psk8dataOutSymMod_reg_next_im[0] = psk8dataOutSymModIm;

    for(delay_psk8dataOutSymMod_t_0_0 = 32'sd0; delay_psk8dataOutSymMod_t_0_0 <= 32'sd1; delay_psk8dataOutSymMod_t_0_0 = delay_psk8dataOutSymMod_t_0_0 + 32'sd1) begin
      delay_psk8dataOutSymMod_reg_next_re[delay_psk8dataOutSymMod_t_0_0 + 32'sd1] = delay_psk8dataOutSymMod_reg_re[delay_psk8dataOutSymMod_t_0_0];
      delay_psk8dataOutSymMod_reg_next_im[delay_psk8dataOutSymMod_t_0_0 + 32'sd1] = delay_psk8dataOutSymMod_reg_im[delay_psk8dataOutSymMod_t_0_0];
    end

  end



  assign unitAvgPowerFlagIn = 1'b0;



  assign switch_compare_1_4 = unitAvgPowerFlagIn > 1'b0;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_3_process
      if (reset == 1'b1) begin
        codeRateIndxSigDelay1 <= 3'b000;
      end
      else begin
        if (enb) begin
          codeRateIndxSigDelay1 <= codeRateIndxSig;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : delay_codeRateIndxSigDelay1_16APSK_process
      if (reset == 1'b1) begin
        for(delay_codeRateIndxSigDelay1_16APSK_t_1 = 32'sd0; delay_codeRateIndxSigDelay1_16APSK_t_1 <= 32'sd4; delay_codeRateIndxSigDelay1_16APSK_t_1 = delay_codeRateIndxSigDelay1_16APSK_t_1 + 32'sd1) begin
          delay_codeRateIndxSigDelay1_16APSK_reg[delay_codeRateIndxSigDelay1_16APSK_t_1] <= 3'b000;
        end
      end
      else begin
        if (enb) begin
          for(delay_codeRateIndxSigDelay1_16APSK_t_0_1 = 32'sd0; delay_codeRateIndxSigDelay1_16APSK_t_0_1 <= 32'sd4; delay_codeRateIndxSigDelay1_16APSK_t_0_1 = delay_codeRateIndxSigDelay1_16APSK_t_0_1 + 32'sd1) begin
            delay_codeRateIndxSigDelay1_16APSK_reg[delay_codeRateIndxSigDelay1_16APSK_t_0_1] <= delay_codeRateIndxSigDelay1_16APSK_reg_next[delay_codeRateIndxSigDelay1_16APSK_t_0_1];
          end
        end
      end
    end

  always @* begin
    codeRateIndx16APSKD2 = delay_codeRateIndxSigDelay1_16APSK_reg[4];
    delay_codeRateIndxSigDelay1_16APSK_reg_next[0] = codeRateIndxSigDelay1;

    for(delay_codeRateIndxSigDelay1_16APSK_t_0_0 = 32'sd0; delay_codeRateIndxSigDelay1_16APSK_t_0_0 <= 32'sd3; delay_codeRateIndxSigDelay1_16APSK_t_0_0 = delay_codeRateIndxSigDelay1_16APSK_t_0_0 + 32'sd1) begin
      delay_codeRateIndxSigDelay1_16APSK_reg_next[delay_codeRateIndxSigDelay1_16APSK_t_0_0 + 32'sd1] = delay_codeRateIndxSigDelay1_16APSK_reg[delay_codeRateIndxSigDelay1_16APSK_t_0_0];
    end

  end



  always @(posedge clk or posedge reset)
    begin : delay_addr16APSK_process
      if (reset == 1'b1) begin
        addr16APSKDelay <= 4'b0000;
      end
      else begin
        if (enb) begin
          addr16APSKDelay <= addr16APSK;
        end
      end
    end



  assign TableUnNorm16APSKRe_1[0] = 18'sb001011010100000100;
  assign TableUnNorm16APSKRe_1[1] = 18'sb001011010100000100;
  assign TableUnNorm16APSKRe_1[2] = 18'sb110100101011111011;
  assign TableUnNorm16APSKRe_1[3] = 18'sb110100101011111011;
  assign TableUnNorm16APSKRe_1[4] = 18'sb001111011101000110;
  assign TableUnNorm16APSKRe_1[5] = 18'sb001111011101000110;
  assign TableUnNorm16APSKRe_1[6] = 18'sb110000100010111001;
  assign TableUnNorm16APSKRe_1[7] = 18'sb110000100010111001;
  assign TableUnNorm16APSKRe_1[8] = 18'sb000100001001000001;
  assign TableUnNorm16APSKRe_1[9] = 18'sb000100001001000001;
  assign TableUnNorm16APSKRe_1[10] = 18'sb111011110110111110;
  assign TableUnNorm16APSKRe_1[11] = 18'sb111011110110111110;
  assign TableUnNorm16APSKRe_1[12] = 18'sb000011100101110111;
  assign TableUnNorm16APSKRe_1[13] = 18'sb000011100101110111;
  assign TableUnNorm16APSKRe_1[14] = 18'sb111100011010001000;
  assign TableUnNorm16APSKRe_1[15] = 18'sb111100011010001000;
  assign apsk16unNormReRate1 = TableUnNorm16APSKRe_1[addr16APSKDelay];



  assign TableUnNorm16APSKRe_3[0] = 18'sb001011010100000100;
  assign TableUnNorm16APSKRe_3[1] = 18'sb001011010100000100;
  assign TableUnNorm16APSKRe_3[2] = 18'sb110100101011111011;
  assign TableUnNorm16APSKRe_3[3] = 18'sb110100101011111011;
  assign TableUnNorm16APSKRe_3[4] = 18'sb001111011101000110;
  assign TableUnNorm16APSKRe_3[5] = 18'sb001111011101000110;
  assign TableUnNorm16APSKRe_3[6] = 18'sb110000100010111001;
  assign TableUnNorm16APSKRe_3[7] = 18'sb110000100010111001;
  assign TableUnNorm16APSKRe_3[8] = 18'sb000100001001000001;
  assign TableUnNorm16APSKRe_3[9] = 18'sb000100001001000001;
  assign TableUnNorm16APSKRe_3[10] = 18'sb111011110110111110;
  assign TableUnNorm16APSKRe_3[11] = 18'sb111011110110111110;
  assign TableUnNorm16APSKRe_3[12] = 18'sb000011111110000011;
  assign TableUnNorm16APSKRe_3[13] = 18'sb000011111110000011;
  assign TableUnNorm16APSKRe_3[14] = 18'sb111100000001111100;
  assign TableUnNorm16APSKRe_3[15] = 18'sb111100000001111100;
  assign apsk16unNormReRate2 = TableUnNorm16APSKRe_3[addr16APSKDelay];



  assign TableUnNorm16APSKRe_5[0] = 18'sb001011010100000100;
  assign TableUnNorm16APSKRe_5[1] = 18'sb001011010100000100;
  assign TableUnNorm16APSKRe_5[2] = 18'sb110100101011111011;
  assign TableUnNorm16APSKRe_5[3] = 18'sb110100101011111011;
  assign TableUnNorm16APSKRe_5[4] = 18'sb001111011101000110;
  assign TableUnNorm16APSKRe_5[5] = 18'sb001111011101000110;
  assign TableUnNorm16APSKRe_5[6] = 18'sb110000100010111001;
  assign TableUnNorm16APSKRe_5[7] = 18'sb110000100010111001;
  assign TableUnNorm16APSKRe_5[8] = 18'sb000100001001000001;
  assign TableUnNorm16APSKRe_5[9] = 18'sb000100001001000001;
  assign TableUnNorm16APSKRe_5[10] = 18'sb111011110110111110;
  assign TableUnNorm16APSKRe_5[11] = 18'sb111011110110111110;
  assign TableUnNorm16APSKRe_5[12] = 18'sb000100000111010011;
  assign TableUnNorm16APSKRe_5[13] = 18'sb000100000111010011;
  assign TableUnNorm16APSKRe_5[14] = 18'sb111011111000101100;
  assign TableUnNorm16APSKRe_5[15] = 18'sb111011111000101100;
  assign apsk16unNormReRate3 = TableUnNorm16APSKRe_5[addr16APSKDelay];



  assign TableUnNorm16APSKRe_7[0] = 18'sb001011010100000100;
  assign TableUnNorm16APSKRe_7[1] = 18'sb001011010100000100;
  assign TableUnNorm16APSKRe_7[2] = 18'sb110100101011111011;
  assign TableUnNorm16APSKRe_7[3] = 18'sb110100101011111011;
  assign TableUnNorm16APSKRe_7[4] = 18'sb001111011101000110;
  assign TableUnNorm16APSKRe_7[5] = 18'sb001111011101000110;
  assign TableUnNorm16APSKRe_7[6] = 18'sb110000100010111001;
  assign TableUnNorm16APSKRe_7[7] = 18'sb110000100010111001;
  assign TableUnNorm16APSKRe_7[8] = 18'sb000100001001000001;
  assign TableUnNorm16APSKRe_7[9] = 18'sb000100001001000001;
  assign TableUnNorm16APSKRe_7[10] = 18'sb111011110110111110;
  assign TableUnNorm16APSKRe_7[11] = 18'sb111011110110111110;
  assign TableUnNorm16APSKRe_7[12] = 18'sb000100001100001011;
  assign TableUnNorm16APSKRe_7[13] = 18'sb000100001100001011;
  assign TableUnNorm16APSKRe_7[14] = 18'sb111011110011110100;
  assign TableUnNorm16APSKRe_7[15] = 18'sb111011110011110100;
  assign apsk16unNormReRate4 = TableUnNorm16APSKRe_7[addr16APSKDelay];



  assign TableUnNorm16APSKRe_9[0] = 18'sb001011010100000100;
  assign TableUnNorm16APSKRe_9[1] = 18'sb001011010100000100;
  assign TableUnNorm16APSKRe_9[2] = 18'sb110100101011111011;
  assign TableUnNorm16APSKRe_9[3] = 18'sb110100101011111011;
  assign TableUnNorm16APSKRe_9[4] = 18'sb001111011101000110;
  assign TableUnNorm16APSKRe_9[5] = 18'sb001111011101000110;
  assign TableUnNorm16APSKRe_9[6] = 18'sb110000100010111001;
  assign TableUnNorm16APSKRe_9[7] = 18'sb110000100010111001;
  assign TableUnNorm16APSKRe_9[8] = 18'sb000100001001000001;
  assign TableUnNorm16APSKRe_9[9] = 18'sb000100001001000001;
  assign TableUnNorm16APSKRe_9[10] = 18'sb111011110110111110;
  assign TableUnNorm16APSKRe_9[11] = 18'sb111011110110111110;
  assign TableUnNorm16APSKRe_9[12] = 18'sb000100010110011111;
  assign TableUnNorm16APSKRe_9[13] = 18'sb000100010110011111;
  assign TableUnNorm16APSKRe_9[14] = 18'sb111011101001100000;
  assign TableUnNorm16APSKRe_9[15] = 18'sb111011101001100000;
  assign apsk16unNormReRate5 = TableUnNorm16APSKRe_9[addr16APSKDelay];



  assign TableUnNorm16APSKRe_11[0] = 18'sb001011010100000100;
  assign TableUnNorm16APSKRe_11[1] = 18'sb001011010100000100;
  assign TableUnNorm16APSKRe_11[2] = 18'sb110100101011111011;
  assign TableUnNorm16APSKRe_11[3] = 18'sb110100101011111011;
  assign TableUnNorm16APSKRe_11[4] = 18'sb001111011101000110;
  assign TableUnNorm16APSKRe_11[5] = 18'sb001111011101000110;
  assign TableUnNorm16APSKRe_11[6] = 18'sb110000100010111001;
  assign TableUnNorm16APSKRe_11[7] = 18'sb110000100010111001;
  assign TableUnNorm16APSKRe_11[8] = 18'sb000100001001000001;
  assign TableUnNorm16APSKRe_11[9] = 18'sb000100001001000001;
  assign TableUnNorm16APSKRe_11[10] = 18'sb111011110110111110;
  assign TableUnNorm16APSKRe_11[11] = 18'sb111011110110111110;
  assign TableUnNorm16APSKRe_11[12] = 18'sb000100011001101111;
  assign TableUnNorm16APSKRe_11[13] = 18'sb000100011001101111;
  assign TableUnNorm16APSKRe_11[14] = 18'sb111011100110010000;
  assign TableUnNorm16APSKRe_11[15] = 18'sb111011100110010000;
  assign apsk16unNormReRate6 = TableUnNorm16APSKRe_11[addr16APSKDelay];



  assign apsk16UnNormReal = (codeRateIndx16APSKD2 == 3'b001 ? apsk16unNormReRate1 :
              (codeRateIndx16APSKD2 == 3'b010 ? apsk16unNormReRate2 :
              (codeRateIndx16APSKD2 == 3'b011 ? apsk16unNormReRate3 :
              (codeRateIndx16APSKD2 == 3'b100 ? apsk16unNormReRate4 :
              (codeRateIndx16APSKD2 == 3'b101 ? apsk16unNormReRate5 :
              apsk16unNormReRate6)))));



  always @(posedge clk or posedge reset)
    begin : delay_apsk16unNormReal_process
      if (reset == 1'b1) begin
        apsk16UnNormRealD1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          apsk16UnNormRealD1 <= apsk16UnNormReal;
        end
      end
    end



  assign TableUnNorm16APSKIm_1[0] = 18'sb001011010100000100;
  assign TableUnNorm16APSKIm_1[1] = 18'sb110100101011111011;
  assign TableUnNorm16APSKIm_1[2] = 18'sb001011010100000100;
  assign TableUnNorm16APSKIm_1[3] = 18'sb110100101011111011;
  assign TableUnNorm16APSKIm_1[4] = 18'sb000100001001000001;
  assign TableUnNorm16APSKIm_1[5] = 18'sb111011110110111110;
  assign TableUnNorm16APSKIm_1[6] = 18'sb000100001001000001;
  assign TableUnNorm16APSKIm_1[7] = 18'sb111011110110111110;
  assign TableUnNorm16APSKIm_1[8] = 18'sb001111011101000110;
  assign TableUnNorm16APSKIm_1[9] = 18'sb110000100010111001;
  assign TableUnNorm16APSKIm_1[10] = 18'sb001111011101000110;
  assign TableUnNorm16APSKIm_1[11] = 18'sb110000100010111001;
  assign TableUnNorm16APSKIm_1[12] = 18'sb000011100101110111;
  assign TableUnNorm16APSKIm_1[13] = 18'sb111100011010001000;
  assign TableUnNorm16APSKIm_1[14] = 18'sb000011100101110111;
  assign TableUnNorm16APSKIm_1[15] = 18'sb111100011010001000;
  assign apsk16unNormImRate1 = TableUnNorm16APSKIm_1[addr16APSKDelay];



  assign TableUnNorm16APSKIm_3[0] = 18'sb001011010100000100;
  assign TableUnNorm16APSKIm_3[1] = 18'sb110100101011111011;
  assign TableUnNorm16APSKIm_3[2] = 18'sb001011010100000100;
  assign TableUnNorm16APSKIm_3[3] = 18'sb110100101011111011;
  assign TableUnNorm16APSKIm_3[4] = 18'sb000100001001000001;
  assign TableUnNorm16APSKIm_3[5] = 18'sb111011110110111110;
  assign TableUnNorm16APSKIm_3[6] = 18'sb000100001001000001;
  assign TableUnNorm16APSKIm_3[7] = 18'sb111011110110111110;
  assign TableUnNorm16APSKIm_3[8] = 18'sb001111011101000110;
  assign TableUnNorm16APSKIm_3[9] = 18'sb110000100010111001;
  assign TableUnNorm16APSKIm_3[10] = 18'sb001111011101000110;
  assign TableUnNorm16APSKIm_3[11] = 18'sb110000100010111001;
  assign TableUnNorm16APSKIm_3[12] = 18'sb000011111110000011;
  assign TableUnNorm16APSKIm_3[13] = 18'sb111100000001111100;
  assign TableUnNorm16APSKIm_3[14] = 18'sb000011111110000011;
  assign TableUnNorm16APSKIm_3[15] = 18'sb111100000001111100;
  assign apsk16unNormImRate2 = TableUnNorm16APSKIm_3[addr16APSKDelay];



  assign TableUnNorm16APSKIm_5[0] = 18'sb001011010100000100;
  assign TableUnNorm16APSKIm_5[1] = 18'sb110100101011111011;
  assign TableUnNorm16APSKIm_5[2] = 18'sb001011010100000100;
  assign TableUnNorm16APSKIm_5[3] = 18'sb110100101011111011;
  assign TableUnNorm16APSKIm_5[4] = 18'sb000100001001000001;
  assign TableUnNorm16APSKIm_5[5] = 18'sb111011110110111110;
  assign TableUnNorm16APSKIm_5[6] = 18'sb000100001001000001;
  assign TableUnNorm16APSKIm_5[7] = 18'sb111011110110111110;
  assign TableUnNorm16APSKIm_5[8] = 18'sb001111011101000110;
  assign TableUnNorm16APSKIm_5[9] = 18'sb110000100010111001;
  assign TableUnNorm16APSKIm_5[10] = 18'sb001111011101000110;
  assign TableUnNorm16APSKIm_5[11] = 18'sb110000100010111001;
  assign TableUnNorm16APSKIm_5[12] = 18'sb000100000111010011;
  assign TableUnNorm16APSKIm_5[13] = 18'sb111011111000101100;
  assign TableUnNorm16APSKIm_5[14] = 18'sb000100000111010011;
  assign TableUnNorm16APSKIm_5[15] = 18'sb111011111000101100;
  assign apsk16unNormImRate3 = TableUnNorm16APSKIm_5[addr16APSKDelay];



  assign TableUnNorm16APSKIm_7[0] = 18'sb001011010100000100;
  assign TableUnNorm16APSKIm_7[1] = 18'sb110100101011111011;
  assign TableUnNorm16APSKIm_7[2] = 18'sb001011010100000100;
  assign TableUnNorm16APSKIm_7[3] = 18'sb110100101011111011;
  assign TableUnNorm16APSKIm_7[4] = 18'sb000100001001000001;
  assign TableUnNorm16APSKIm_7[5] = 18'sb111011110110111110;
  assign TableUnNorm16APSKIm_7[6] = 18'sb000100001001000001;
  assign TableUnNorm16APSKIm_7[7] = 18'sb111011110110111110;
  assign TableUnNorm16APSKIm_7[8] = 18'sb001111011101000110;
  assign TableUnNorm16APSKIm_7[9] = 18'sb110000100010111001;
  assign TableUnNorm16APSKIm_7[10] = 18'sb001111011101000110;
  assign TableUnNorm16APSKIm_7[11] = 18'sb110000100010111001;
  assign TableUnNorm16APSKIm_7[12] = 18'sb000100001100001011;
  assign TableUnNorm16APSKIm_7[13] = 18'sb111011110011110100;
  assign TableUnNorm16APSKIm_7[14] = 18'sb000100001100001011;
  assign TableUnNorm16APSKIm_7[15] = 18'sb111011110011110100;
  assign apsk16unNormImRate4 = TableUnNorm16APSKIm_7[addr16APSKDelay];



  assign TableUnNorm16APSKIm_9[0] = 18'sb001011010100000100;
  assign TableUnNorm16APSKIm_9[1] = 18'sb110100101011111011;
  assign TableUnNorm16APSKIm_9[2] = 18'sb001011010100000100;
  assign TableUnNorm16APSKIm_9[3] = 18'sb110100101011111011;
  assign TableUnNorm16APSKIm_9[4] = 18'sb000100001001000001;
  assign TableUnNorm16APSKIm_9[5] = 18'sb111011110110111110;
  assign TableUnNorm16APSKIm_9[6] = 18'sb000100001001000001;
  assign TableUnNorm16APSKIm_9[7] = 18'sb111011110110111110;
  assign TableUnNorm16APSKIm_9[8] = 18'sb001111011101000110;
  assign TableUnNorm16APSKIm_9[9] = 18'sb110000100010111001;
  assign TableUnNorm16APSKIm_9[10] = 18'sb001111011101000110;
  assign TableUnNorm16APSKIm_9[11] = 18'sb110000100010111001;
  assign TableUnNorm16APSKIm_9[12] = 18'sb000100010110011111;
  assign TableUnNorm16APSKIm_9[13] = 18'sb111011101001100000;
  assign TableUnNorm16APSKIm_9[14] = 18'sb000100010110011111;
  assign TableUnNorm16APSKIm_9[15] = 18'sb111011101001100000;
  assign apsk16unNormImRate5 = TableUnNorm16APSKIm_9[addr16APSKDelay];



  assign TableUnNorm16APSKIm_11[0] = 18'sb001011010100000100;
  assign TableUnNorm16APSKIm_11[1] = 18'sb110100101011111011;
  assign TableUnNorm16APSKIm_11[2] = 18'sb001011010100000100;
  assign TableUnNorm16APSKIm_11[3] = 18'sb110100101011111011;
  assign TableUnNorm16APSKIm_11[4] = 18'sb000100001001000001;
  assign TableUnNorm16APSKIm_11[5] = 18'sb111011110110111110;
  assign TableUnNorm16APSKIm_11[6] = 18'sb000100001001000001;
  assign TableUnNorm16APSKIm_11[7] = 18'sb111011110110111110;
  assign TableUnNorm16APSKIm_11[8] = 18'sb001111011101000110;
  assign TableUnNorm16APSKIm_11[9] = 18'sb110000100010111001;
  assign TableUnNorm16APSKIm_11[10] = 18'sb001111011101000110;
  assign TableUnNorm16APSKIm_11[11] = 18'sb110000100010111001;
  assign TableUnNorm16APSKIm_11[12] = 18'sb000100011001101111;
  assign TableUnNorm16APSKIm_11[13] = 18'sb111011100110010000;
  assign TableUnNorm16APSKIm_11[14] = 18'sb000100011001101111;
  assign TableUnNorm16APSKIm_11[15] = 18'sb111011100110010000;
  assign apsk16unNormImRate6 = TableUnNorm16APSKIm_11[addr16APSKDelay];



  assign apsk16UnNormImag = (codeRateIndx16APSKD2 == 3'b001 ? apsk16unNormImRate1 :
              (codeRateIndx16APSKD2 == 3'b010 ? apsk16unNormImRate2 :
              (codeRateIndx16APSKD2 == 3'b011 ? apsk16unNormImRate3 :
              (codeRateIndx16APSKD2 == 3'b100 ? apsk16unNormImRate4 :
              (codeRateIndx16APSKD2 == 3'b101 ? apsk16unNormImRate5 :
              apsk16unNormImRate6)))));



  always @(posedge clk or posedge reset)
    begin : delay_apsk16unNormImag_process
      if (reset == 1'b1) begin
        apsk16UnNormImagD1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          apsk16UnNormImagD1 <= apsk16UnNormImag;
        end
      end
    end



  assign TableNorm16APSKRe_1[0] = 18'sb001100110110011001;
  assign TableNorm16APSKRe_1[1] = 18'sb001100110110011001;
  assign TableNorm16APSKRe_1[2] = 18'sb110011001001100110;
  assign TableNorm16APSKRe_1[3] = 18'sb110011001001100110;
  assign TableNorm16APSKRe_1[4] = 18'sb010001100011011010;
  assign TableNorm16APSKRe_1[5] = 18'sb010001100011011010;
  assign TableNorm16APSKRe_1[6] = 18'sb101110011100100101;
  assign TableNorm16APSKRe_1[7] = 18'sb101110011100100101;
  assign TableNorm16APSKRe_1[8] = 18'sb000100101101000001;
  assign TableNorm16APSKRe_1[9] = 18'sb000100101101000001;
  assign TableNorm16APSKRe_1[10] = 18'sb111011010010111110;
  assign TableNorm16APSKRe_1[11] = 18'sb111011010010111110;
  assign TableNorm16APSKRe_1[12] = 18'sb000100000101000100;
  assign TableNorm16APSKRe_1[13] = 18'sb000100000101000100;
  assign TableNorm16APSKRe_1[14] = 18'sb111011111010111011;
  assign TableNorm16APSKRe_1[15] = 18'sb111011111010111011;
  assign apsk16NormReRate1 = TableNorm16APSKRe_1[addr16APSKDelay];



  assign TableNorm16APSKRe_3[0] = 18'sb001100110011011100;
  assign TableNorm16APSKRe_3[1] = 18'sb001100110011011100;
  assign TableNorm16APSKRe_3[2] = 18'sb110011001100100011;
  assign TableNorm16APSKRe_3[3] = 18'sb110011001100100011;
  assign TableNorm16APSKRe_3[4] = 18'sb010001011111011000;
  assign TableNorm16APSKRe_3[5] = 18'sb010001011111011000;
  assign TableNorm16APSKRe_3[6] = 18'sb101110100000100111;
  assign TableNorm16APSKRe_3[7] = 18'sb101110100000100111;
  assign TableNorm16APSKRe_3[8] = 18'sb000100101011111100;
  assign TableNorm16APSKRe_3[9] = 18'sb000100101011111100;
  assign TableNorm16APSKRe_3[10] = 18'sb111011010100000011;
  assign TableNorm16APSKRe_3[11] = 18'sb111011010100000011;
  assign TableNorm16APSKRe_3[12] = 18'sb000100011111100001;
  assign TableNorm16APSKRe_3[13] = 18'sb000100011111100001;
  assign TableNorm16APSKRe_3[14] = 18'sb111011100000011110;
  assign TableNorm16APSKRe_3[15] = 18'sb111011100000011110;
  assign apsk16NormReRate2 = TableNorm16APSKRe_3[addr16APSKDelay];



  assign TableNorm16APSKRe_5[0] = 18'sb001100110010010000;
  assign TableNorm16APSKRe_5[1] = 18'sb001100110010010000;
  assign TableNorm16APSKRe_5[2] = 18'sb110011001101101111;
  assign TableNorm16APSKRe_5[3] = 18'sb110011001101101111;
  assign TableNorm16APSKRe_5[4] = 18'sb010001011101110000;
  assign TableNorm16APSKRe_5[5] = 18'sb010001011101110000;
  assign TableNorm16APSKRe_5[6] = 18'sb101110100010001111;
  assign TableNorm16APSKRe_5[7] = 18'sb101110100010001111;
  assign TableNorm16APSKRe_5[8] = 18'sb000100101011100000;
  assign TableNorm16APSKRe_5[9] = 18'sb000100101011100000;
  assign TableNorm16APSKRe_5[10] = 18'sb111011010100011111;
  assign TableNorm16APSKRe_5[11] = 18'sb111011010100011111;
  assign TableNorm16APSKRe_5[12] = 18'sb000100101001100010;
  assign TableNorm16APSKRe_5[13] = 18'sb000100101001100010;
  assign TableNorm16APSKRe_5[14] = 18'sb111011010110011101;
  assign TableNorm16APSKRe_5[15] = 18'sb111011010110011101;
  assign apsk16NormReRate3 = TableNorm16APSKRe_5[addr16APSKDelay];



  assign TableNorm16APSKRe_7[0] = 18'sb001100110001100110;
  assign TableNorm16APSKRe_7[1] = 18'sb001100110001100110;
  assign TableNorm16APSKRe_7[2] = 18'sb110011001110011001;
  assign TableNorm16APSKRe_7[3] = 18'sb110011001110011001;
  assign TableNorm16APSKRe_7[4] = 18'sb010001011100110111;
  assign TableNorm16APSKRe_7[5] = 18'sb010001011100110111;
  assign TableNorm16APSKRe_7[6] = 18'sb101110100011001000;
  assign TableNorm16APSKRe_7[7] = 18'sb101110100011001000;
  assign TableNorm16APSKRe_7[8] = 18'sb000100101011010001;
  assign TableNorm16APSKRe_7[9] = 18'sb000100101011010001;
  assign TableNorm16APSKRe_7[10] = 18'sb111011010100101110;
  assign TableNorm16APSKRe_7[11] = 18'sb111011010100101110;
  assign TableNorm16APSKRe_7[12] = 18'sb000100101110110100;
  assign TableNorm16APSKRe_7[13] = 18'sb000100101110110100;
  assign TableNorm16APSKRe_7[14] = 18'sb111011010001001011;
  assign TableNorm16APSKRe_7[15] = 18'sb111011010001001011;
  assign apsk16NormReRate4 = TableNorm16APSKRe_7[addr16APSKDelay];



  assign TableNorm16APSKRe_9[0] = 18'sb001100110000001101;
  assign TableNorm16APSKRe_9[1] = 18'sb001100110000001101;
  assign TableNorm16APSKRe_9[2] = 18'sb110011001111110010;
  assign TableNorm16APSKRe_9[3] = 18'sb110011001111110010;
  assign TableNorm16APSKRe_9[4] = 18'sb010001011010111101;
  assign TableNorm16APSKRe_9[5] = 18'sb010001011010111101;
  assign TableNorm16APSKRe_9[6] = 18'sb101110100101000010;
  assign TableNorm16APSKRe_9[7] = 18'sb101110100101000010;
  assign TableNorm16APSKRe_9[8] = 18'sb000100101010110000;
  assign TableNorm16APSKRe_9[9] = 18'sb000100101010110000;
  assign TableNorm16APSKRe_9[10] = 18'sb111011010101001111;
  assign TableNorm16APSKRe_9[11] = 18'sb111011010101001111;
  assign TableNorm16APSKRe_9[12] = 18'sb000100111001111011;
  assign TableNorm16APSKRe_9[13] = 18'sb000100111001111011;
  assign TableNorm16APSKRe_9[14] = 18'sb111011000110000100;
  assign TableNorm16APSKRe_9[15] = 18'sb111011000110000100;
  assign apsk16NormReRate5 = TableNorm16APSKRe_9[addr16APSKDelay];



  assign TableNorm16APSKRe_11[0] = 18'sb001100101111110000;
  assign TableNorm16APSKRe_11[1] = 18'sb001100101111110000;
  assign TableNorm16APSKRe_11[2] = 18'sb110011010000001111;
  assign TableNorm16APSKRe_11[3] = 18'sb110011010000001111;
  assign TableNorm16APSKRe_11[4] = 18'sb010001011010010110;
  assign TableNorm16APSKRe_11[5] = 18'sb010001011010010110;
  assign TableNorm16APSKRe_11[6] = 18'sb101110100101101001;
  assign TableNorm16APSKRe_11[7] = 18'sb101110100101101001;
  assign TableNorm16APSKRe_11[8] = 18'sb000100101010100101;
  assign TableNorm16APSKRe_11[9] = 18'sb000100101010100101;
  assign TableNorm16APSKRe_11[10] = 18'sb111011010101011010;
  assign TableNorm16APSKRe_11[11] = 18'sb111011010101011010;
  assign TableNorm16APSKRe_11[12] = 18'sb000100111101011010;
  assign TableNorm16APSKRe_11[13] = 18'sb000100111101011010;
  assign TableNorm16APSKRe_11[14] = 18'sb111011000010100101;
  assign TableNorm16APSKRe_11[15] = 18'sb111011000010100101;
  assign apsk16NormReRate6 = TableNorm16APSKRe_11[addr16APSKDelay];



  assign apsk16NormReal = (codeRateIndx16APSKD2 == 3'b001 ? apsk16NormReRate1 :
              (codeRateIndx16APSKD2 == 3'b010 ? apsk16NormReRate2 :
              (codeRateIndx16APSKD2 == 3'b011 ? apsk16NormReRate3 :
              (codeRateIndx16APSKD2 == 3'b100 ? apsk16NormReRate4 :
              (codeRateIndx16APSKD2 == 3'b101 ? apsk16NormReRate5 :
              apsk16NormReRate6)))));



  always @(posedge clk or posedge reset)
    begin : delay_apsk16NormReal_process
      if (reset == 1'b1) begin
        apsk16NormRealD1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          apsk16NormRealD1 <= apsk16NormReal;
        end
      end
    end



  assign TableNorm16APSKIm_1[0] = 18'sb001100110110011001;
  assign TableNorm16APSKIm_1[1] = 18'sb110011001001100110;
  assign TableNorm16APSKIm_1[2] = 18'sb001100110110011001;
  assign TableNorm16APSKIm_1[3] = 18'sb110011001001100110;
  assign TableNorm16APSKIm_1[4] = 18'sb000100101101000001;
  assign TableNorm16APSKIm_1[5] = 18'sb111011010010111110;
  assign TableNorm16APSKIm_1[6] = 18'sb000100101101000001;
  assign TableNorm16APSKIm_1[7] = 18'sb111011010010111110;
  assign TableNorm16APSKIm_1[8] = 18'sb010001100011011010;
  assign TableNorm16APSKIm_1[9] = 18'sb101110011100100101;
  assign TableNorm16APSKIm_1[10] = 18'sb010001100011011010;
  assign TableNorm16APSKIm_1[11] = 18'sb101110011100100101;
  assign TableNorm16APSKIm_1[12] = 18'sb000100000101000100;
  assign TableNorm16APSKIm_1[13] = 18'sb111011111010111011;
  assign TableNorm16APSKIm_1[14] = 18'sb000100000101000100;
  assign TableNorm16APSKIm_1[15] = 18'sb111011111010111011;
  assign apsk16NormReImRate1 = TableNorm16APSKIm_1[addr16APSKDelay];



  assign TableNorm16APSKIm_3[0] = 18'sb001100110011011100;
  assign TableNorm16APSKIm_3[1] = 18'sb110011001100100011;
  assign TableNorm16APSKIm_3[2] = 18'sb001100110011011100;
  assign TableNorm16APSKIm_3[3] = 18'sb110011001100100011;
  assign TableNorm16APSKIm_3[4] = 18'sb000100101011111100;
  assign TableNorm16APSKIm_3[5] = 18'sb111011010100000011;
  assign TableNorm16APSKIm_3[6] = 18'sb000100101011111100;
  assign TableNorm16APSKIm_3[7] = 18'sb111011010100000011;
  assign TableNorm16APSKIm_3[8] = 18'sb010001011111011000;
  assign TableNorm16APSKIm_3[9] = 18'sb101110100000100111;
  assign TableNorm16APSKIm_3[10] = 18'sb010001011111011000;
  assign TableNorm16APSKIm_3[11] = 18'sb101110100000100111;
  assign TableNorm16APSKIm_3[12] = 18'sb000100011111100001;
  assign TableNorm16APSKIm_3[13] = 18'sb111011100000011110;
  assign TableNorm16APSKIm_3[14] = 18'sb000100011111100001;
  assign TableNorm16APSKIm_3[15] = 18'sb111011100000011110;
  assign apsk16NormReImRate2 = TableNorm16APSKIm_3[addr16APSKDelay];



  assign TableNorm16APSKIm_5[0] = 18'sb001100110010010000;
  assign TableNorm16APSKIm_5[1] = 18'sb110011001101101111;
  assign TableNorm16APSKIm_5[2] = 18'sb001100110010010000;
  assign TableNorm16APSKIm_5[3] = 18'sb110011001101101111;
  assign TableNorm16APSKIm_5[4] = 18'sb000100101011100000;
  assign TableNorm16APSKIm_5[5] = 18'sb111011010100011111;
  assign TableNorm16APSKIm_5[6] = 18'sb000100101011100000;
  assign TableNorm16APSKIm_5[7] = 18'sb111011010100011111;
  assign TableNorm16APSKIm_5[8] = 18'sb010001011101110000;
  assign TableNorm16APSKIm_5[9] = 18'sb101110100010001111;
  assign TableNorm16APSKIm_5[10] = 18'sb010001011101110000;
  assign TableNorm16APSKIm_5[11] = 18'sb101110100010001111;
  assign TableNorm16APSKIm_5[12] = 18'sb000100101001100010;
  assign TableNorm16APSKIm_5[13] = 18'sb111011010110011101;
  assign TableNorm16APSKIm_5[14] = 18'sb000100101001100010;
  assign TableNorm16APSKIm_5[15] = 18'sb111011010110011101;
  assign apsk16NormReImRate3 = TableNorm16APSKIm_5[addr16APSKDelay];



  assign TableNorm16APSKIm_7[0] = 18'sb001100110001100110;
  assign TableNorm16APSKIm_7[1] = 18'sb110011001110011001;
  assign TableNorm16APSKIm_7[2] = 18'sb001100110001100110;
  assign TableNorm16APSKIm_7[3] = 18'sb110011001110011001;
  assign TableNorm16APSKIm_7[4] = 18'sb000100101011010001;
  assign TableNorm16APSKIm_7[5] = 18'sb111011010100101110;
  assign TableNorm16APSKIm_7[6] = 18'sb000100101011010001;
  assign TableNorm16APSKIm_7[7] = 18'sb111011010100101110;
  assign TableNorm16APSKIm_7[8] = 18'sb010001011100110111;
  assign TableNorm16APSKIm_7[9] = 18'sb101110100011001000;
  assign TableNorm16APSKIm_7[10] = 18'sb010001011100110111;
  assign TableNorm16APSKIm_7[11] = 18'sb101110100011001000;
  assign TableNorm16APSKIm_7[12] = 18'sb000100101110110100;
  assign TableNorm16APSKIm_7[13] = 18'sb111011010001001011;
  assign TableNorm16APSKIm_7[14] = 18'sb000100101110110100;
  assign TableNorm16APSKIm_7[15] = 18'sb111011010001001011;
  assign apsk16NormReImRate4 = TableNorm16APSKIm_7[addr16APSKDelay];



  assign TableNorm16APSKIm_9[0] = 18'sb001100110000001101;
  assign TableNorm16APSKIm_9[1] = 18'sb110011001111110010;
  assign TableNorm16APSKIm_9[2] = 18'sb001100110000001101;
  assign TableNorm16APSKIm_9[3] = 18'sb110011001111110010;
  assign TableNorm16APSKIm_9[4] = 18'sb000100101010110000;
  assign TableNorm16APSKIm_9[5] = 18'sb111011010101001111;
  assign TableNorm16APSKIm_9[6] = 18'sb000100101010110000;
  assign TableNorm16APSKIm_9[7] = 18'sb111011010101001111;
  assign TableNorm16APSKIm_9[8] = 18'sb010001011010111101;
  assign TableNorm16APSKIm_9[9] = 18'sb101110100101000010;
  assign TableNorm16APSKIm_9[10] = 18'sb010001011010111101;
  assign TableNorm16APSKIm_9[11] = 18'sb101110100101000010;
  assign TableNorm16APSKIm_9[12] = 18'sb000100111001111011;
  assign TableNorm16APSKIm_9[13] = 18'sb111011000110000100;
  assign TableNorm16APSKIm_9[14] = 18'sb000100111001111011;
  assign TableNorm16APSKIm_9[15] = 18'sb111011000110000100;
  assign apsk16NormReImRate5 = TableNorm16APSKIm_9[addr16APSKDelay];



  assign TableNorm16APSKIm_11[0] = 18'sb001100101111110000;
  assign TableNorm16APSKIm_11[1] = 18'sb110011010000001111;
  assign TableNorm16APSKIm_11[2] = 18'sb001100101111110000;
  assign TableNorm16APSKIm_11[3] = 18'sb110011010000001111;
  assign TableNorm16APSKIm_11[4] = 18'sb000100101010100101;
  assign TableNorm16APSKIm_11[5] = 18'sb111011010101011010;
  assign TableNorm16APSKIm_11[6] = 18'sb000100101010100101;
  assign TableNorm16APSKIm_11[7] = 18'sb111011010101011010;
  assign TableNorm16APSKIm_11[8] = 18'sb010001011010010110;
  assign TableNorm16APSKIm_11[9] = 18'sb101110100101101001;
  assign TableNorm16APSKIm_11[10] = 18'sb010001011010010110;
  assign TableNorm16APSKIm_11[11] = 18'sb101110100101101001;
  assign TableNorm16APSKIm_11[12] = 18'sb000100111101011010;
  assign TableNorm16APSKIm_11[13] = 18'sb111011000010100101;
  assign TableNorm16APSKIm_11[14] = 18'sb000100111101011010;
  assign TableNorm16APSKIm_11[15] = 18'sb111011000010100101;
  assign apsk16NormReImRate6 = TableNorm16APSKIm_11[addr16APSKDelay];



  assign apsk16NormImag = (codeRateIndx16APSKD2 == 3'b001 ? apsk16NormReImRate1 :
              (codeRateIndx16APSKD2 == 3'b010 ? apsk16NormReImRate2 :
              (codeRateIndx16APSKD2 == 3'b011 ? apsk16NormReImRate3 :
              (codeRateIndx16APSKD2 == 3'b100 ? apsk16NormReImRate4 :
              (codeRateIndx16APSKD2 == 3'b101 ? apsk16NormReImRate5 :
              apsk16NormReImRate6)))));



  always @(posedge clk or posedge reset)
    begin : delay_apsk16NormImag_process
      if (reset == 1'b1) begin
        apsk16NormImagD1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          apsk16NormImagD1 <= apsk16NormImag;
        end
      end
    end



  assign apsk16DataOutSymMod_re = (switch_compare_1_4 == 1'b0 ? apsk16UnNormRealD1 :
              apsk16NormRealD1);
  assign apsk16DataOutSymMod_im = (switch_compare_1_4 == 1'b0 ? apsk16UnNormImagD1 :
              apsk16NormImagD1);



  always @(posedge clk or posedge reset)
    begin : delay_apsk16unNorm_process
      if (reset == 1'b1) begin
        apsk16DataOutSymModD1_re <= 18'sb000000000000000000;
        apsk16DataOutSymModD1_im <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          apsk16DataOutSymModD1_re <= apsk16DataOutSymMod_re;
          apsk16DataOutSymModD1_im <= apsk16DataOutSymMod_im;
        end
      end
    end



  assign switch_compare_1_5 = unitAvgPowerFlagIn > 1'b0;



  always @(posedge clk or posedge reset)
    begin : delay_codeRateIndxSigDelay1_32APSK_process
      if (reset == 1'b1) begin
        for(delay_codeRateIndxSigDelay1_32APSK_t_1 = 32'sd0; delay_codeRateIndxSigDelay1_32APSK_t_1 <= 32'sd5; delay_codeRateIndxSigDelay1_32APSK_t_1 = delay_codeRateIndxSigDelay1_32APSK_t_1 + 32'sd1) begin
          delay_codeRateIndxSigDelay1_32APSK_reg[delay_codeRateIndxSigDelay1_32APSK_t_1] <= 3'b000;
        end
      end
      else begin
        if (enb) begin
          for(delay_codeRateIndxSigDelay1_32APSK_t_0_1 = 32'sd0; delay_codeRateIndxSigDelay1_32APSK_t_0_1 <= 32'sd5; delay_codeRateIndxSigDelay1_32APSK_t_0_1 = delay_codeRateIndxSigDelay1_32APSK_t_0_1 + 32'sd1) begin
            delay_codeRateIndxSigDelay1_32APSK_reg[delay_codeRateIndxSigDelay1_32APSK_t_0_1] <= delay_codeRateIndxSigDelay1_32APSK_reg_next[delay_codeRateIndxSigDelay1_32APSK_t_0_1];
          end
        end
      end
    end

  always @* begin
    codeRateIndx32APSKD2 = delay_codeRateIndxSigDelay1_32APSK_reg[5];
    delay_codeRateIndxSigDelay1_32APSK_reg_next[0] = codeRateIndxSigDelay1;

    for(delay_codeRateIndxSigDelay1_32APSK_t_0_0 = 32'sd0; delay_codeRateIndxSigDelay1_32APSK_t_0_0 <= 32'sd4; delay_codeRateIndxSigDelay1_32APSK_t_0_0 = delay_codeRateIndxSigDelay1_32APSK_t_0_0 + 32'sd1) begin
      delay_codeRateIndxSigDelay1_32APSK_reg_next[delay_codeRateIndxSigDelay1_32APSK_t_0_0 + 32'sd1] = delay_codeRateIndxSigDelay1_32APSK_reg[delay_codeRateIndxSigDelay1_32APSK_t_0_0];
    end

  end



  always @(posedge clk or posedge reset)
    begin : delay_addr32APSK_process
      if (reset == 1'b1) begin
        addr32APSKDelay <= 5'b00000;
      end
      else begin
        if (enb) begin
          addr32APSKDelay <= addr32APSK;
        end
      end
    end



  assign TableUnNorm32APSKRe_1[0] = 18'sb000110000110001101;
  assign TableUnNorm32APSKRe_1[1] = 18'sb000010001110110100;
  assign TableUnNorm32APSKRe_1[2] = 18'sb000110000110001101;
  assign TableUnNorm32APSKRe_1[3] = 18'sb000010001110110100;
  assign TableUnNorm32APSKRe_1[4] = 18'sb111001111001110010;
  assign TableUnNorm32APSKRe_1[5] = 18'sb111101110001001011;
  assign TableUnNorm32APSKRe_1[6] = 18'sb111001111001110010;
  assign TableUnNorm32APSKRe_1[7] = 18'sb111101110001001011;
  assign TableUnNorm32APSKRe_1[8] = 18'sb001110110010000011;
  assign TableUnNorm32APSKRe_1[9] = 18'sb000110000111110111;
  assign TableUnNorm32APSKRe_1[10] = 18'sb001011010100000100;
  assign TableUnNorm32APSKRe_1[11] = 18'sb000000000000000000;
  assign TableUnNorm32APSKRe_1[12] = 18'sb110100101011111011;
  assign TableUnNorm32APSKRe_1[13] = 18'sb000000000000000000;
  assign TableUnNorm32APSKRe_1[14] = 18'sb110001001101111100;
  assign TableUnNorm32APSKRe_1[15] = 18'sb111001111000001000;
  assign TableUnNorm32APSKRe_1[16] = 18'sb001000010101000001;
  assign TableUnNorm32APSKRe_1[17] = 18'sb000010001001011001;
  assign TableUnNorm32APSKRe_1[18] = 18'sb001000010101000001;
  assign TableUnNorm32APSKRe_1[19] = 18'sb000010001001011001;
  assign TableUnNorm32APSKRe_1[20] = 18'sb110111101010111110;
  assign TableUnNorm32APSKRe_1[21] = 18'sb111101110110100110;
  assign TableUnNorm32APSKRe_1[22] = 18'sb110111101010111110;
  assign TableUnNorm32APSKRe_1[23] = 18'sb111101110110100110;
  assign TableUnNorm32APSKRe_1[24] = 18'sb010000000000000000;
  assign TableUnNorm32APSKRe_1[25] = 18'sb001011010100000100;
  assign TableUnNorm32APSKRe_1[26] = 18'sb001110110010000011;
  assign TableUnNorm32APSKRe_1[27] = 18'sb000110000111110111;
  assign TableUnNorm32APSKRe_1[28] = 18'sb110001001101111100;
  assign TableUnNorm32APSKRe_1[29] = 18'sb111001111000001000;
  assign TableUnNorm32APSKRe_1[30] = 18'sb110000000000000000;
  assign TableUnNorm32APSKRe_1[31] = 18'sb110100101011111011;
  assign apsk32unNormReRate1 = TableUnNorm32APSKRe_1[addr32APSKDelay];



  assign TableUnNorm32APSKRe_3[0] = 18'sb000110010100011010;
  assign TableUnNorm32APSKRe_3[1] = 18'sb000010010100000001;
  assign TableUnNorm32APSKRe_3[2] = 18'sb000110010100011010;
  assign TableUnNorm32APSKRe_3[3] = 18'sb000010010100000001;
  assign TableUnNorm32APSKRe_3[4] = 18'sb111001101011100101;
  assign TableUnNorm32APSKRe_3[5] = 18'sb111101101011111110;
  assign TableUnNorm32APSKRe_3[6] = 18'sb111001101011100101;
  assign TableUnNorm32APSKRe_3[7] = 18'sb111101101011111110;
  assign TableUnNorm32APSKRe_3[8] = 18'sb001110110010000011;
  assign TableUnNorm32APSKRe_3[9] = 18'sb000110000111110111;
  assign TableUnNorm32APSKRe_3[10] = 18'sb001011010100000100;
  assign TableUnNorm32APSKRe_3[11] = 18'sb000000000000000000;
  assign TableUnNorm32APSKRe_3[12] = 18'sb110100101011111011;
  assign TableUnNorm32APSKRe_3[13] = 18'sb000000000000000000;
  assign TableUnNorm32APSKRe_3[14] = 18'sb110001001101111100;
  assign TableUnNorm32APSKRe_3[15] = 18'sb111001111000001000;
  assign TableUnNorm32APSKRe_3[16] = 18'sb001000101000011100;
  assign TableUnNorm32APSKRe_3[17] = 18'sb000010010100101011;
  assign TableUnNorm32APSKRe_3[18] = 18'sb001000101000011100;
  assign TableUnNorm32APSKRe_3[19] = 18'sb000010010100101011;
  assign TableUnNorm32APSKRe_3[20] = 18'sb110111010111100011;
  assign TableUnNorm32APSKRe_3[21] = 18'sb111101101011010100;
  assign TableUnNorm32APSKRe_3[22] = 18'sb110111010111100011;
  assign TableUnNorm32APSKRe_3[23] = 18'sb111101101011010100;
  assign TableUnNorm32APSKRe_3[24] = 18'sb010000000000000000;
  assign TableUnNorm32APSKRe_3[25] = 18'sb001011010100000100;
  assign TableUnNorm32APSKRe_3[26] = 18'sb001110110010000011;
  assign TableUnNorm32APSKRe_3[27] = 18'sb000110000111110111;
  assign TableUnNorm32APSKRe_3[28] = 18'sb110001001101111100;
  assign TableUnNorm32APSKRe_3[29] = 18'sb111001111000001000;
  assign TableUnNorm32APSKRe_3[30] = 18'sb110000000000000000;
  assign TableUnNorm32APSKRe_3[31] = 18'sb110100101011111011;
  assign apsk32unNormReRate2 = TableUnNorm32APSKRe_3[addr32APSKDelay];



  assign TableUnNorm32APSKRe_5[0] = 18'sb000110011011111110;
  assign TableUnNorm32APSKRe_5[1] = 18'sb000010010110110010;
  assign TableUnNorm32APSKRe_5[2] = 18'sb000110011011111110;
  assign TableUnNorm32APSKRe_5[3] = 18'sb000010010110110010;
  assign TableUnNorm32APSKRe_5[4] = 18'sb111001100100000001;
  assign TableUnNorm32APSKRe_5[5] = 18'sb111101101001001101;
  assign TableUnNorm32APSKRe_5[6] = 18'sb111001100100000001;
  assign TableUnNorm32APSKRe_5[7] = 18'sb111101101001001101;
  assign TableUnNorm32APSKRe_5[8] = 18'sb001110110010000011;
  assign TableUnNorm32APSKRe_5[9] = 18'sb000110000111110111;
  assign TableUnNorm32APSKRe_5[10] = 18'sb001011010100000100;
  assign TableUnNorm32APSKRe_5[11] = 18'sb000000000000000000;
  assign TableUnNorm32APSKRe_5[12] = 18'sb110100101011111011;
  assign TableUnNorm32APSKRe_5[13] = 18'sb000000000000000000;
  assign TableUnNorm32APSKRe_5[14] = 18'sb110001001101111100;
  assign TableUnNorm32APSKRe_5[15] = 18'sb111001111000001000;
  assign TableUnNorm32APSKRe_5[16] = 18'sb001000110010110001;
  assign TableUnNorm32APSKRe_5[17] = 18'sb000010011100000011;
  assign TableUnNorm32APSKRe_5[18] = 18'sb001000110010110001;
  assign TableUnNorm32APSKRe_5[19] = 18'sb000010011100000011;
  assign TableUnNorm32APSKRe_5[20] = 18'sb110111001101001110;
  assign TableUnNorm32APSKRe_5[21] = 18'sb111101100011111100;
  assign TableUnNorm32APSKRe_5[22] = 18'sb110111001101001110;
  assign TableUnNorm32APSKRe_5[23] = 18'sb111101100011111100;
  assign TableUnNorm32APSKRe_5[24] = 18'sb010000000000000000;
  assign TableUnNorm32APSKRe_5[25] = 18'sb001011010100000100;
  assign TableUnNorm32APSKRe_5[26] = 18'sb001110110010000011;
  assign TableUnNorm32APSKRe_5[27] = 18'sb000110000111110111;
  assign TableUnNorm32APSKRe_5[28] = 18'sb110001001101111100;
  assign TableUnNorm32APSKRe_5[29] = 18'sb111001111000001000;
  assign TableUnNorm32APSKRe_5[30] = 18'sb110000000000000000;
  assign TableUnNorm32APSKRe_5[31] = 18'sb110100101011111011;
  assign apsk32unNormReRate3 = TableUnNorm32APSKRe_5[addr32APSKDelay];



  assign TableUnNorm32APSKRe_7[0] = 18'sb000110101000101111;
  assign TableUnNorm32APSKRe_7[1] = 18'sb000010011011011101;
  assign TableUnNorm32APSKRe_7[2] = 18'sb000110101000101111;
  assign TableUnNorm32APSKRe_7[3] = 18'sb000010011011011101;
  assign TableUnNorm32APSKRe_7[4] = 18'sb111001010111010000;
  assign TableUnNorm32APSKRe_7[5] = 18'sb111101100100100010;
  assign TableUnNorm32APSKRe_7[6] = 18'sb111001010111010000;
  assign TableUnNorm32APSKRe_7[7] = 18'sb111101100100100010;
  assign TableUnNorm32APSKRe_7[8] = 18'sb001110110010000011;
  assign TableUnNorm32APSKRe_7[9] = 18'sb000110000111110111;
  assign TableUnNorm32APSKRe_7[10] = 18'sb001011010100000100;
  assign TableUnNorm32APSKRe_7[11] = 18'sb000000000000000000;
  assign TableUnNorm32APSKRe_7[12] = 18'sb110100101011111011;
  assign TableUnNorm32APSKRe_7[13] = 18'sb000000000000000000;
  assign TableUnNorm32APSKRe_7[14] = 18'sb110001001101111100;
  assign TableUnNorm32APSKRe_7[15] = 18'sb111001111000001000;
  assign TableUnNorm32APSKRe_7[16] = 18'sb001001000100001101;
  assign TableUnNorm32APSKRe_7[17] = 18'sb000010100111001110;
  assign TableUnNorm32APSKRe_7[18] = 18'sb001001000100001101;
  assign TableUnNorm32APSKRe_7[19] = 18'sb000010100111001110;
  assign TableUnNorm32APSKRe_7[20] = 18'sb110110111011110010;
  assign TableUnNorm32APSKRe_7[21] = 18'sb111101011000110001;
  assign TableUnNorm32APSKRe_7[22] = 18'sb110110111011110010;
  assign TableUnNorm32APSKRe_7[23] = 18'sb111101011000110001;
  assign TableUnNorm32APSKRe_7[24] = 18'sb010000000000000000;
  assign TableUnNorm32APSKRe_7[25] = 18'sb001011010100000100;
  assign TableUnNorm32APSKRe_7[26] = 18'sb001110110010000011;
  assign TableUnNorm32APSKRe_7[27] = 18'sb000110000111110111;
  assign TableUnNorm32APSKRe_7[28] = 18'sb110001001101111100;
  assign TableUnNorm32APSKRe_7[29] = 18'sb111001111000001000;
  assign TableUnNorm32APSKRe_7[30] = 18'sb110000000000000000;
  assign TableUnNorm32APSKRe_7[31] = 18'sb110100101011111011;
  assign apsk32unNormReRate4 = TableUnNorm32APSKRe_7[addr32APSKDelay];



  assign TableUnNorm32APSKRe_9[0] = 18'sb000110101010000001;
  assign TableUnNorm32APSKRe_9[1] = 18'sb000010011011111011;
  assign TableUnNorm32APSKRe_9[2] = 18'sb000110101010000001;
  assign TableUnNorm32APSKRe_9[3] = 18'sb000010011011111011;
  assign TableUnNorm32APSKRe_9[4] = 18'sb111001010101111110;
  assign TableUnNorm32APSKRe_9[5] = 18'sb111101100100000100;
  assign TableUnNorm32APSKRe_9[6] = 18'sb111001010101111110;
  assign TableUnNorm32APSKRe_9[7] = 18'sb111101100100000100;
  assign TableUnNorm32APSKRe_9[8] = 18'sb001110110010000011;
  assign TableUnNorm32APSKRe_9[9] = 18'sb000110000111110111;
  assign TableUnNorm32APSKRe_9[10] = 18'sb001011010100000100;
  assign TableUnNorm32APSKRe_9[11] = 18'sb000000000000000000;
  assign TableUnNorm32APSKRe_9[12] = 18'sb110100101011111011;
  assign TableUnNorm32APSKRe_9[13] = 18'sb000000000000000000;
  assign TableUnNorm32APSKRe_9[14] = 18'sb110001001101111100;
  assign TableUnNorm32APSKRe_9[15] = 18'sb111001111000001000;
  assign TableUnNorm32APSKRe_9[16] = 18'sb001001000101111101;
  assign TableUnNorm32APSKRe_9[17] = 18'sb000010101000011000;
  assign TableUnNorm32APSKRe_9[18] = 18'sb001001000101111101;
  assign TableUnNorm32APSKRe_9[19] = 18'sb000010101000011000;
  assign TableUnNorm32APSKRe_9[20] = 18'sb110110111010000010;
  assign TableUnNorm32APSKRe_9[21] = 18'sb111101010111100111;
  assign TableUnNorm32APSKRe_9[22] = 18'sb110110111010000010;
  assign TableUnNorm32APSKRe_9[23] = 18'sb111101010111100111;
  assign TableUnNorm32APSKRe_9[24] = 18'sb010000000000000000;
  assign TableUnNorm32APSKRe_9[25] = 18'sb001011010100000100;
  assign TableUnNorm32APSKRe_9[26] = 18'sb001110110010000011;
  assign TableUnNorm32APSKRe_9[27] = 18'sb000110000111110111;
  assign TableUnNorm32APSKRe_9[28] = 18'sb110001001101111100;
  assign TableUnNorm32APSKRe_9[29] = 18'sb111001111000001000;
  assign TableUnNorm32APSKRe_9[30] = 18'sb110000000000000000;
  assign TableUnNorm32APSKRe_9[31] = 18'sb110100101011111011;
  assign apsk32unNormReRate5 = TableUnNorm32APSKRe_9[addr32APSKDelay];



  assign apsk32UnNormReal = (codeRateIndx32APSKD2 == 3'b001 ? apsk32unNormReRate1 :
              (codeRateIndx32APSKD2 == 3'b010 ? apsk32unNormReRate2 :
              (codeRateIndx32APSKD2 == 3'b011 ? apsk32unNormReRate3 :
              (codeRateIndx32APSKD2 == 3'b100 ? apsk32unNormReRate4 :
              apsk32unNormReRate5))));



  always @(posedge clk or posedge reset)
    begin : delay_apsk32unNormReal_process
      if (reset == 1'b1) begin
        apsk32UnNormRealD1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          apsk32UnNormRealD1 <= apsk32UnNormReal;
        end
      end
    end



  assign TableUnNorm32APSKIm_1[0] = 18'sb000110000110001101;
  assign TableUnNorm32APSKIm_1[1] = 18'sb001000010101000001;
  assign TableUnNorm32APSKIm_1[2] = 18'sb111001111001110010;
  assign TableUnNorm32APSKIm_1[3] = 18'sb110111101010111110;
  assign TableUnNorm32APSKIm_1[4] = 18'sb000110000110001101;
  assign TableUnNorm32APSKIm_1[5] = 18'sb001000010101000001;
  assign TableUnNorm32APSKIm_1[6] = 18'sb111001111001110010;
  assign TableUnNorm32APSKIm_1[7] = 18'sb110111101010111110;
  assign TableUnNorm32APSKIm_1[8] = 18'sb000110000111110111;
  assign TableUnNorm32APSKIm_1[9] = 18'sb001110110010000011;
  assign TableUnNorm32APSKIm_1[10] = 18'sb110100101011111011;
  assign TableUnNorm32APSKIm_1[11] = 18'sb110000000000000000;
  assign TableUnNorm32APSKIm_1[12] = 18'sb001011010100000100;
  assign TableUnNorm32APSKIm_1[13] = 18'sb010000000000000000;
  assign TableUnNorm32APSKIm_1[14] = 18'sb111001111000001000;
  assign TableUnNorm32APSKIm_1[15] = 18'sb110001001101111100;
  assign TableUnNorm32APSKIm_1[16] = 18'sb000010001110110100;
  assign TableUnNorm32APSKIm_1[17] = 18'sb000010001001011001;
  assign TableUnNorm32APSKIm_1[18] = 18'sb111101110001001011;
  assign TableUnNorm32APSKIm_1[19] = 18'sb111101110110100110;
  assign TableUnNorm32APSKIm_1[20] = 18'sb000010001110110100;
  assign TableUnNorm32APSKIm_1[21] = 18'sb000010001001011001;
  assign TableUnNorm32APSKIm_1[22] = 18'sb111101110001001011;
  assign TableUnNorm32APSKIm_1[23] = 18'sb111101110110100110;
  assign TableUnNorm32APSKIm_1[24] = 18'sb000000000000000000;
  assign TableUnNorm32APSKIm_1[25] = 18'sb001011010100000100;
  assign TableUnNorm32APSKIm_1[26] = 18'sb111001111000001000;
  assign TableUnNorm32APSKIm_1[27] = 18'sb110001001101111100;
  assign TableUnNorm32APSKIm_1[28] = 18'sb000110000111110111;
  assign TableUnNorm32APSKIm_1[29] = 18'sb001110110010000011;
  assign TableUnNorm32APSKIm_1[30] = 18'sb000000000000000000;
  assign TableUnNorm32APSKIm_1[31] = 18'sb110100101011111011;
  assign apsk32unNormImRate1 = TableUnNorm32APSKIm_1[addr32APSKDelay];



  assign TableUnNorm32APSKIm_3[0] = 18'sb000110010100011010;
  assign TableUnNorm32APSKIm_3[1] = 18'sb001000101000011100;
  assign TableUnNorm32APSKIm_3[2] = 18'sb111001101011100101;
  assign TableUnNorm32APSKIm_3[3] = 18'sb110111010111100011;
  assign TableUnNorm32APSKIm_3[4] = 18'sb000110010100011010;
  assign TableUnNorm32APSKIm_3[5] = 18'sb001000101000011100;
  assign TableUnNorm32APSKIm_3[6] = 18'sb111001101011100101;
  assign TableUnNorm32APSKIm_3[7] = 18'sb110111010111100011;
  assign TableUnNorm32APSKIm_3[8] = 18'sb000110000111110111;
  assign TableUnNorm32APSKIm_3[9] = 18'sb001110110010000011;
  assign TableUnNorm32APSKIm_3[10] = 18'sb110100101011111011;
  assign TableUnNorm32APSKIm_3[11] = 18'sb110000000000000000;
  assign TableUnNorm32APSKIm_3[12] = 18'sb001011010100000100;
  assign TableUnNorm32APSKIm_3[13] = 18'sb010000000000000000;
  assign TableUnNorm32APSKIm_3[14] = 18'sb111001111000001000;
  assign TableUnNorm32APSKIm_3[15] = 18'sb110001001101111100;
  assign TableUnNorm32APSKIm_3[16] = 18'sb000010010100000001;
  assign TableUnNorm32APSKIm_3[17] = 18'sb000010010100101011;
  assign TableUnNorm32APSKIm_3[18] = 18'sb111101101011111110;
  assign TableUnNorm32APSKIm_3[19] = 18'sb111101101011010100;
  assign TableUnNorm32APSKIm_3[20] = 18'sb000010010100000001;
  assign TableUnNorm32APSKIm_3[21] = 18'sb000010010100101011;
  assign TableUnNorm32APSKIm_3[22] = 18'sb111101101011111110;
  assign TableUnNorm32APSKIm_3[23] = 18'sb111101101011010100;
  assign TableUnNorm32APSKIm_3[24] = 18'sb000000000000000000;
  assign TableUnNorm32APSKIm_3[25] = 18'sb001011010100000100;
  assign TableUnNorm32APSKIm_3[26] = 18'sb111001111000001000;
  assign TableUnNorm32APSKIm_3[27] = 18'sb110001001101111100;
  assign TableUnNorm32APSKIm_3[28] = 18'sb000110000111110111;
  assign TableUnNorm32APSKIm_3[29] = 18'sb001110110010000011;
  assign TableUnNorm32APSKIm_3[30] = 18'sb000000000000000000;
  assign TableUnNorm32APSKIm_3[31] = 18'sb110100101011111011;
  assign apsk32unNormImRate2 = TableUnNorm32APSKIm_3[addr32APSKDelay];



  assign TableUnNorm32APSKIm_5[0] = 18'sb000110011011111110;
  assign TableUnNorm32APSKIm_5[1] = 18'sb001000110010110001;
  assign TableUnNorm32APSKIm_5[2] = 18'sb111001100100000001;
  assign TableUnNorm32APSKIm_5[3] = 18'sb110111001101001110;
  assign TableUnNorm32APSKIm_5[4] = 18'sb000110011011111110;
  assign TableUnNorm32APSKIm_5[5] = 18'sb001000110010110001;
  assign TableUnNorm32APSKIm_5[6] = 18'sb111001100100000001;
  assign TableUnNorm32APSKIm_5[7] = 18'sb110111001101001110;
  assign TableUnNorm32APSKIm_5[8] = 18'sb000110000111110111;
  assign TableUnNorm32APSKIm_5[9] = 18'sb001110110010000011;
  assign TableUnNorm32APSKIm_5[10] = 18'sb110100101011111011;
  assign TableUnNorm32APSKIm_5[11] = 18'sb110000000000000000;
  assign TableUnNorm32APSKIm_5[12] = 18'sb001011010100000100;
  assign TableUnNorm32APSKIm_5[13] = 18'sb010000000000000000;
  assign TableUnNorm32APSKIm_5[14] = 18'sb111001111000001000;
  assign TableUnNorm32APSKIm_5[15] = 18'sb110001001101111100;
  assign TableUnNorm32APSKIm_5[16] = 18'sb000010010110110010;
  assign TableUnNorm32APSKIm_5[17] = 18'sb000010011100000011;
  assign TableUnNorm32APSKIm_5[18] = 18'sb111101101001001101;
  assign TableUnNorm32APSKIm_5[19] = 18'sb111101100011111100;
  assign TableUnNorm32APSKIm_5[20] = 18'sb000010010110110010;
  assign TableUnNorm32APSKIm_5[21] = 18'sb000010011100000011;
  assign TableUnNorm32APSKIm_5[22] = 18'sb111101101001001101;
  assign TableUnNorm32APSKIm_5[23] = 18'sb111101100011111100;
  assign TableUnNorm32APSKIm_5[24] = 18'sb000000000000000000;
  assign TableUnNorm32APSKIm_5[25] = 18'sb001011010100000100;
  assign TableUnNorm32APSKIm_5[26] = 18'sb111001111000001000;
  assign TableUnNorm32APSKIm_5[27] = 18'sb110001001101111100;
  assign TableUnNorm32APSKIm_5[28] = 18'sb000110000111110111;
  assign TableUnNorm32APSKIm_5[29] = 18'sb001110110010000011;
  assign TableUnNorm32APSKIm_5[30] = 18'sb000000000000000000;
  assign TableUnNorm32APSKIm_5[31] = 18'sb110100101011111011;
  assign apsk32unNormImRate3 = TableUnNorm32APSKIm_5[addr32APSKDelay];



  assign TableUnNorm32APSKIm_7[0] = 18'sb000110101000101111;
  assign TableUnNorm32APSKIm_7[1] = 18'sb001001000100001101;
  assign TableUnNorm32APSKIm_7[2] = 18'sb111001010111010000;
  assign TableUnNorm32APSKIm_7[3] = 18'sb110110111011110010;
  assign TableUnNorm32APSKIm_7[4] = 18'sb000110101000101111;
  assign TableUnNorm32APSKIm_7[5] = 18'sb001001000100001101;
  assign TableUnNorm32APSKIm_7[6] = 18'sb111001010111010000;
  assign TableUnNorm32APSKIm_7[7] = 18'sb110110111011110010;
  assign TableUnNorm32APSKIm_7[8] = 18'sb000110000111110111;
  assign TableUnNorm32APSKIm_7[9] = 18'sb001110110010000011;
  assign TableUnNorm32APSKIm_7[10] = 18'sb110100101011111011;
  assign TableUnNorm32APSKIm_7[11] = 18'sb110000000000000000;
  assign TableUnNorm32APSKIm_7[12] = 18'sb001011010100000100;
  assign TableUnNorm32APSKIm_7[13] = 18'sb010000000000000000;
  assign TableUnNorm32APSKIm_7[14] = 18'sb111001111000001000;
  assign TableUnNorm32APSKIm_7[15] = 18'sb110001001101111100;
  assign TableUnNorm32APSKIm_7[16] = 18'sb000010011011011101;
  assign TableUnNorm32APSKIm_7[17] = 18'sb000010100111001110;
  assign TableUnNorm32APSKIm_7[18] = 18'sb111101100100100010;
  assign TableUnNorm32APSKIm_7[19] = 18'sb111101011000110001;
  assign TableUnNorm32APSKIm_7[20] = 18'sb000010011011011101;
  assign TableUnNorm32APSKIm_7[21] = 18'sb000010100111001110;
  assign TableUnNorm32APSKIm_7[22] = 18'sb111101100100100010;
  assign TableUnNorm32APSKIm_7[23] = 18'sb111101011000110001;
  assign TableUnNorm32APSKIm_7[24] = 18'sb000000000000000000;
  assign TableUnNorm32APSKIm_7[25] = 18'sb001011010100000100;
  assign TableUnNorm32APSKIm_7[26] = 18'sb111001111000001000;
  assign TableUnNorm32APSKIm_7[27] = 18'sb110001001101111100;
  assign TableUnNorm32APSKIm_7[28] = 18'sb000110000111110111;
  assign TableUnNorm32APSKIm_7[29] = 18'sb001110110010000011;
  assign TableUnNorm32APSKIm_7[30] = 18'sb000000000000000000;
  assign TableUnNorm32APSKIm_7[31] = 18'sb110100101011111011;
  assign apsk32unNormImRate4 = TableUnNorm32APSKIm_7[addr32APSKDelay];



  assign TableUnNorm32APSKIm_9[0] = 18'sb000110101010000001;
  assign TableUnNorm32APSKIm_9[1] = 18'sb001001000101111101;
  assign TableUnNorm32APSKIm_9[2] = 18'sb111001010101111110;
  assign TableUnNorm32APSKIm_9[3] = 18'sb110110111010000010;
  assign TableUnNorm32APSKIm_9[4] = 18'sb000110101010000001;
  assign TableUnNorm32APSKIm_9[5] = 18'sb001001000101111101;
  assign TableUnNorm32APSKIm_9[6] = 18'sb111001010101111110;
  assign TableUnNorm32APSKIm_9[7] = 18'sb110110111010000010;
  assign TableUnNorm32APSKIm_9[8] = 18'sb000110000111110111;
  assign TableUnNorm32APSKIm_9[9] = 18'sb001110110010000011;
  assign TableUnNorm32APSKIm_9[10] = 18'sb110100101011111011;
  assign TableUnNorm32APSKIm_9[11] = 18'sb110000000000000000;
  assign TableUnNorm32APSKIm_9[12] = 18'sb001011010100000100;
  assign TableUnNorm32APSKIm_9[13] = 18'sb010000000000000000;
  assign TableUnNorm32APSKIm_9[14] = 18'sb111001111000001000;
  assign TableUnNorm32APSKIm_9[15] = 18'sb110001001101111100;
  assign TableUnNorm32APSKIm_9[16] = 18'sb000010011011111011;
  assign TableUnNorm32APSKIm_9[17] = 18'sb000010101000011000;
  assign TableUnNorm32APSKIm_9[18] = 18'sb111101100100000100;
  assign TableUnNorm32APSKIm_9[19] = 18'sb111101010111100111;
  assign TableUnNorm32APSKIm_9[20] = 18'sb000010011011111011;
  assign TableUnNorm32APSKIm_9[21] = 18'sb000010101000011000;
  assign TableUnNorm32APSKIm_9[22] = 18'sb111101100100000100;
  assign TableUnNorm32APSKIm_9[23] = 18'sb111101010111100111;
  assign TableUnNorm32APSKIm_9[24] = 18'sb000000000000000000;
  assign TableUnNorm32APSKIm_9[25] = 18'sb001011010100000100;
  assign TableUnNorm32APSKIm_9[26] = 18'sb111001111000001000;
  assign TableUnNorm32APSKIm_9[27] = 18'sb110001001101111100;
  assign TableUnNorm32APSKIm_9[28] = 18'sb000110000111110111;
  assign TableUnNorm32APSKIm_9[29] = 18'sb001110110010000011;
  assign TableUnNorm32APSKIm_9[30] = 18'sb000000000000000000;
  assign TableUnNorm32APSKIm_9[31] = 18'sb110100101011111011;
  assign apsk32unNormImRate5 = TableUnNorm32APSKIm_9[addr32APSKDelay];



  assign apsk32UnNormImag = (codeRateIndx32APSKD2 == 3'b001 ? apsk32unNormImRate1 :
              (codeRateIndx32APSKD2 == 3'b010 ? apsk32unNormImRate2 :
              (codeRateIndx32APSKD2 == 3'b011 ? apsk32unNormImRate3 :
              (codeRateIndx32APSKD2 == 3'b100 ? apsk32unNormImRate4 :
              apsk32unNormImRate5))));



  always @(posedge clk or posedge reset)
    begin : delay_apsk32unNormImag_process
      if (reset == 1'b1) begin
        apsk32UnNormImagD1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          apsk32UnNormImagD1 <= apsk32UnNormImag;
        end
      end
    end



  assign TableNorm32APSKRe_1[0] = 18'sb000111110010001101;
  assign TableNorm32APSKRe_1[1] = 18'sb000010110110010111;
  assign TableNorm32APSKRe_1[2] = 18'sb000111110010001101;
  assign TableNorm32APSKRe_1[3] = 18'sb000010110110010111;
  assign TableNorm32APSKRe_1[4] = 18'sb111000001101110010;
  assign TableNorm32APSKRe_1[5] = 18'sb111101001001101000;
  assign TableNorm32APSKRe_1[6] = 18'sb111000001101110010;
  assign TableNorm32APSKRe_1[7] = 18'sb111101001001101000;
  assign TableNorm32APSKRe_1[8] = 18'sb010010110111111011;
  assign TableNorm32APSKRe_1[9] = 18'sb000111110100010101;
  assign TableNorm32APSKRe_1[10] = 18'sb001110011100100000;
  assign TableNorm32APSKRe_1[11] = 18'sb000000000000000000;
  assign TableNorm32APSKRe_1[12] = 18'sb110001100011011111;
  assign TableNorm32APSKRe_1[13] = 18'sb000000000000000000;
  assign TableNorm32APSKRe_1[14] = 18'sb101101001000000100;
  assign TableNorm32APSKRe_1[15] = 18'sb111000001011101010;
  assign TableNorm32APSKRe_1[16] = 18'sb001010101000100100;
  assign TableNorm32APSKRe_1[17] = 18'sb000010101111011011;
  assign TableNorm32APSKRe_1[18] = 18'sb001010101000100100;
  assign TableNorm32APSKRe_1[19] = 18'sb000010101111011011;
  assign TableNorm32APSKRe_1[20] = 18'sb110101010111011011;
  assign TableNorm32APSKRe_1[21] = 18'sb111101010000100100;
  assign TableNorm32APSKRe_1[22] = 18'sb110101010111011011;
  assign TableNorm32APSKRe_1[23] = 18'sb111101010000100100;
  assign TableNorm32APSKRe_1[24] = 18'sb010100011011011100;
  assign TableNorm32APSKRe_1[25] = 18'sb001110011100100000;
  assign TableNorm32APSKRe_1[26] = 18'sb010010110111111011;
  assign TableNorm32APSKRe_1[27] = 18'sb000111110100010101;
  assign TableNorm32APSKRe_1[28] = 18'sb101101001000000100;
  assign TableNorm32APSKRe_1[29] = 18'sb111000001011101010;
  assign TableNorm32APSKRe_1[30] = 18'sb101011100100100011;
  assign TableNorm32APSKRe_1[31] = 18'sb110001100011011111;
  assign apsk32NormReRate1 = TableNorm32APSKRe_1[addr32APSKDelay];



  assign TableNorm32APSKRe_3[0] = 18'sb001000000000101011;
  assign TableNorm32APSKRe_3[1] = 18'sb000010111011101001;
  assign TableNorm32APSKRe_3[2] = 18'sb001000000000101011;
  assign TableNorm32APSKRe_3[3] = 18'sb000010111011101001;
  assign TableNorm32APSKRe_3[4] = 18'sb110111111111010100;
  assign TableNorm32APSKRe_3[5] = 18'sb111101000100010110;
  assign TableNorm32APSKRe_3[6] = 18'sb110111111111010100;
  assign TableNorm32APSKRe_3[7] = 18'sb111101000100010110;
  assign TableNorm32APSKRe_3[8] = 18'sb010010101111010100;
  assign TableNorm32APSKRe_3[9] = 18'sb000111110000110001;
  assign TableNorm32APSKRe_3[10] = 18'sb001110010101111010;
  assign TableNorm32APSKRe_3[11] = 18'sb000000000000000000;
  assign TableNorm32APSKRe_3[12] = 18'sb110001101010000101;
  assign TableNorm32APSKRe_3[13] = 18'sb000000000000000000;
  assign TableNorm32APSKRe_3[14] = 18'sb101101010000101011;
  assign TableNorm32APSKRe_3[15] = 18'sb111000001111001110;
  assign TableNorm32APSKRe_3[16] = 18'sb001010111100010100;
  assign TableNorm32APSKRe_3[17] = 18'sb000010111100011110;
  assign TableNorm32APSKRe_3[18] = 18'sb001010111100010100;
  assign TableNorm32APSKRe_3[19] = 18'sb000010111100011110;
  assign TableNorm32APSKRe_3[20] = 18'sb110101000011101011;
  assign TableNorm32APSKRe_3[21] = 18'sb111101000011100001;
  assign TableNorm32APSKRe_3[22] = 18'sb110101000011101011;
  assign TableNorm32APSKRe_3[23] = 18'sb111101000011100001;
  assign TableNorm32APSKRe_3[24] = 18'sb010100010010001000;
  assign TableNorm32APSKRe_3[25] = 18'sb001110010101111010;
  assign TableNorm32APSKRe_3[26] = 18'sb010010101111010100;
  assign TableNorm32APSKRe_3[27] = 18'sb000111110000110001;
  assign TableNorm32APSKRe_3[28] = 18'sb101101010000101011;
  assign TableNorm32APSKRe_3[29] = 18'sb111000001111001110;
  assign TableNorm32APSKRe_3[30] = 18'sb101011101101110111;
  assign TableNorm32APSKRe_3[31] = 18'sb110001101010000101;
  assign apsk32NormReRate2 = TableNorm32APSKRe_3[addr32APSKDelay];



  assign TableNorm32APSKRe_5[0] = 18'sb001000001000001100;
  assign TableNorm32APSKRe_5[1] = 18'sb000010111110011001;
  assign TableNorm32APSKRe_5[2] = 18'sb001000001000001100;
  assign TableNorm32APSKRe_5[3] = 18'sb000010111110011001;
  assign TableNorm32APSKRe_5[4] = 18'sb110111110111110011;
  assign TableNorm32APSKRe_5[5] = 18'sb111101000001100110;
  assign TableNorm32APSKRe_5[6] = 18'sb110111110111110011;
  assign TableNorm32APSKRe_5[7] = 18'sb111101000001100110;
  assign TableNorm32APSKRe_5[8] = 18'sb010010101010100100;
  assign TableNorm32APSKRe_5[9] = 18'sb000111101110110011;
  assign TableNorm32APSKRe_5[10] = 18'sb001110010010010010;
  assign TableNorm32APSKRe_5[11] = 18'sb000000000000000000;
  assign TableNorm32APSKRe_5[12] = 18'sb110001101101101101;
  assign TableNorm32APSKRe_5[13] = 18'sb000000000000000000;
  assign TableNorm32APSKRe_5[14] = 18'sb101101010101011011;
  assign TableNorm32APSKRe_5[15] = 18'sb111000010001001100;
  assign TableNorm32APSKRe_5[16] = 18'sb001011000110100110;
  assign TableNorm32APSKRe_5[17] = 18'sb000011000101000010;
  assign TableNorm32APSKRe_5[18] = 18'sb001011000110100110;
  assign TableNorm32APSKRe_5[19] = 18'sb000011000101000010;
  assign TableNorm32APSKRe_5[20] = 18'sb110100111001011001;
  assign TableNorm32APSKRe_5[21] = 18'sb111100111010111101;
  assign TableNorm32APSKRe_5[22] = 18'sb110100111001011001;
  assign TableNorm32APSKRe_5[23] = 18'sb111100111010111101;
  assign TableNorm32APSKRe_5[24] = 18'sb010100001100111111;
  assign TableNorm32APSKRe_5[25] = 18'sb001110010010010010;
  assign TableNorm32APSKRe_5[26] = 18'sb010010101010100100;
  assign TableNorm32APSKRe_5[27] = 18'sb000111101110110011;
  assign TableNorm32APSKRe_5[28] = 18'sb101101010101011011;
  assign TableNorm32APSKRe_5[29] = 18'sb111000010001001100;
  assign TableNorm32APSKRe_5[30] = 18'sb101011110011000000;
  assign TableNorm32APSKRe_5[31] = 18'sb110001101101101101;
  assign apsk32NormReRate3 = TableNorm32APSKRe_5[addr32APSKDelay];



  assign TableNorm32APSKRe_7[0] = 18'sb001000010100101110;
  assign TableNorm32APSKRe_7[1] = 18'sb000011000010111111;
  assign TableNorm32APSKRe_7[2] = 18'sb001000010100101110;
  assign TableNorm32APSKRe_7[3] = 18'sb000011000010111111;
  assign TableNorm32APSKRe_7[4] = 18'sb110111101011010001;
  assign TableNorm32APSKRe_7[5] = 18'sb111100111101000000;
  assign TableNorm32APSKRe_7[6] = 18'sb110111101011010001;
  assign TableNorm32APSKRe_7[7] = 18'sb111100111101000000;
  assign TableNorm32APSKRe_7[8] = 18'sb010010100010100011;
  assign TableNorm32APSKRe_7[9] = 18'sb000111101011011111;
  assign TableNorm32APSKRe_7[10] = 18'sb001110001100001001;
  assign TableNorm32APSKRe_7[11] = 18'sb000000000000000000;
  assign TableNorm32APSKRe_7[12] = 18'sb110001110011110110;
  assign TableNorm32APSKRe_7[13] = 18'sb000000000000000000;
  assign TableNorm32APSKRe_7[14] = 18'sb101101011101011100;
  assign TableNorm32APSKRe_7[15] = 18'sb111000010100100000;
  assign TableNorm32APSKRe_7[16] = 18'sb001011010111101101;
  assign TableNorm32APSKRe_7[17] = 18'sb000011010001101110;
  assign TableNorm32APSKRe_7[18] = 18'sb001011010111101101;
  assign TableNorm32APSKRe_7[19] = 18'sb000011010001101110;
  assign TableNorm32APSKRe_7[20] = 18'sb110100101000010010;
  assign TableNorm32APSKRe_7[21] = 18'sb111100101110010001;
  assign TableNorm32APSKRe_7[22] = 18'sb110100101000010010;
  assign TableNorm32APSKRe_7[23] = 18'sb111100101110010001;
  assign TableNorm32APSKRe_7[24] = 18'sb010100000100010100;
  assign TableNorm32APSKRe_7[25] = 18'sb001110001100001001;
  assign TableNorm32APSKRe_7[26] = 18'sb010010100010100011;
  assign TableNorm32APSKRe_7[27] = 18'sb000111101011011111;
  assign TableNorm32APSKRe_7[28] = 18'sb101101011101011100;
  assign TableNorm32APSKRe_7[29] = 18'sb111000010100100000;
  assign TableNorm32APSKRe_7[30] = 18'sb101011111011101011;
  assign TableNorm32APSKRe_7[31] = 18'sb110001110011110110;
  assign apsk32NormReRate4 = TableNorm32APSKRe_7[addr32APSKDelay];



  assign TableNorm32APSKRe_9[0] = 18'sb001000010101111101;
  assign TableNorm32APSKRe_9[1] = 18'sb000011000011011100;
  assign TableNorm32APSKRe_9[2] = 18'sb001000010101111101;
  assign TableNorm32APSKRe_9[3] = 18'sb000011000011011100;
  assign TableNorm32APSKRe_9[4] = 18'sb110111101010000010;
  assign TableNorm32APSKRe_9[5] = 18'sb111100111100100011;
  assign TableNorm32APSKRe_9[6] = 18'sb110111101010000010;
  assign TableNorm32APSKRe_9[7] = 18'sb111100111100100011;
  assign TableNorm32APSKRe_9[8] = 18'sb010010100001101111;
  assign TableNorm32APSKRe_9[9] = 18'sb000111101011001001;
  assign TableNorm32APSKRe_9[10] = 18'sb001110001011100001;
  assign TableNorm32APSKRe_9[11] = 18'sb000000000000000000;
  assign TableNorm32APSKRe_9[12] = 18'sb110001110100011110;
  assign TableNorm32APSKRe_9[13] = 18'sb000000000000000000;
  assign TableNorm32APSKRe_9[14] = 18'sb101101011110010000;
  assign TableNorm32APSKRe_9[15] = 18'sb111000010100110110;
  assign TableNorm32APSKRe_9[16] = 18'sb001011011001011010;
  assign TableNorm32APSKRe_9[17] = 18'sb000011010011000011;
  assign TableNorm32APSKRe_9[18] = 18'sb001011011001011010;
  assign TableNorm32APSKRe_9[19] = 18'sb000011010011000011;
  assign TableNorm32APSKRe_9[20] = 18'sb110100100110100101;
  assign TableNorm32APSKRe_9[21] = 18'sb111100101100111100;
  assign TableNorm32APSKRe_9[22] = 18'sb110100100110100101;
  assign TableNorm32APSKRe_9[23] = 18'sb111100101100111100;
  assign TableNorm32APSKRe_9[24] = 18'sb010100000011011011;
  assign TableNorm32APSKRe_9[25] = 18'sb001110001011100001;
  assign TableNorm32APSKRe_9[26] = 18'sb010010100001101111;
  assign TableNorm32APSKRe_9[27] = 18'sb000111101011001001;
  assign TableNorm32APSKRe_9[28] = 18'sb101101011110010000;
  assign TableNorm32APSKRe_9[29] = 18'sb111000010100110110;
  assign TableNorm32APSKRe_9[30] = 18'sb101011111100100100;
  assign TableNorm32APSKRe_9[31] = 18'sb110001110100011110;
  assign apsk32NormReRate5 = TableNorm32APSKRe_9[addr32APSKDelay];



  assign apsk32NormReal = (codeRateIndx32APSKD2 == 3'b001 ? apsk32NormReRate1 :
              (codeRateIndx32APSKD2 == 3'b010 ? apsk32NormReRate2 :
              (codeRateIndx32APSKD2 == 3'b011 ? apsk32NormReRate3 :
              (codeRateIndx32APSKD2 == 3'b100 ? apsk32NormReRate4 :
              apsk32NormReRate5))));



  always @(posedge clk or posedge reset)
    begin : delay_apsk32NormReal_process
      if (reset == 1'b1) begin
        apsk32NormRealD1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          apsk32NormRealD1 <= apsk32NormReal;
        end
      end
    end



  assign TableNorm32APSKIm_1[0] = 18'sb000111110010001101;
  assign TableNorm32APSKIm_1[1] = 18'sb001010101000100100;
  assign TableNorm32APSKIm_1[2] = 18'sb111000001101110010;
  assign TableNorm32APSKIm_1[3] = 18'sb110101010111011011;
  assign TableNorm32APSKIm_1[4] = 18'sb000111110010001101;
  assign TableNorm32APSKIm_1[5] = 18'sb001010101000100100;
  assign TableNorm32APSKIm_1[6] = 18'sb111000001101110010;
  assign TableNorm32APSKIm_1[7] = 18'sb110101010111011011;
  assign TableNorm32APSKIm_1[8] = 18'sb000111110100010101;
  assign TableNorm32APSKIm_1[9] = 18'sb010010110111111011;
  assign TableNorm32APSKIm_1[10] = 18'sb110001100011011111;
  assign TableNorm32APSKIm_1[11] = 18'sb101011100100100011;
  assign TableNorm32APSKIm_1[12] = 18'sb001110011100100000;
  assign TableNorm32APSKIm_1[13] = 18'sb010100011011011100;
  assign TableNorm32APSKIm_1[14] = 18'sb111000001011101010;
  assign TableNorm32APSKIm_1[15] = 18'sb101101001000000100;
  assign TableNorm32APSKIm_1[16] = 18'sb000010110110010111;
  assign TableNorm32APSKIm_1[17] = 18'sb000010101111011011;
  assign TableNorm32APSKIm_1[18] = 18'sb111101001001101000;
  assign TableNorm32APSKIm_1[19] = 18'sb111101010000100100;
  assign TableNorm32APSKIm_1[20] = 18'sb000010110110010111;
  assign TableNorm32APSKIm_1[21] = 18'sb000010101111011011;
  assign TableNorm32APSKIm_1[22] = 18'sb111101001001101000;
  assign TableNorm32APSKIm_1[23] = 18'sb111101010000100100;
  assign TableNorm32APSKIm_1[24] = 18'sb000000000000000000;
  assign TableNorm32APSKIm_1[25] = 18'sb001110011100100000;
  assign TableNorm32APSKIm_1[26] = 18'sb111000001011101010;
  assign TableNorm32APSKIm_1[27] = 18'sb101101001000000100;
  assign TableNorm32APSKIm_1[28] = 18'sb000111110100010101;
  assign TableNorm32APSKIm_1[29] = 18'sb010010110111111011;
  assign TableNorm32APSKIm_1[30] = 18'sb000000000000000000;
  assign TableNorm32APSKIm_1[31] = 18'sb110001100011011111;
  assign apsk32NormReImRate1 = TableNorm32APSKIm_1[addr32APSKDelay];



  assign TableNorm32APSKIm_3[0] = 18'sb001000000000101011;
  assign TableNorm32APSKIm_3[1] = 18'sb001010111100010100;
  assign TableNorm32APSKIm_3[2] = 18'sb110111111111010100;
  assign TableNorm32APSKIm_3[3] = 18'sb110101000011101011;
  assign TableNorm32APSKIm_3[4] = 18'sb001000000000101011;
  assign TableNorm32APSKIm_3[5] = 18'sb001010111100010100;
  assign TableNorm32APSKIm_3[6] = 18'sb110111111111010100;
  assign TableNorm32APSKIm_3[7] = 18'sb110101000011101011;
  assign TableNorm32APSKIm_3[8] = 18'sb000111110000110001;
  assign TableNorm32APSKIm_3[9] = 18'sb010010101111010100;
  assign TableNorm32APSKIm_3[10] = 18'sb110001101010000101;
  assign TableNorm32APSKIm_3[11] = 18'sb101011101101110111;
  assign TableNorm32APSKIm_3[12] = 18'sb001110010101111010;
  assign TableNorm32APSKIm_3[13] = 18'sb010100010010001000;
  assign TableNorm32APSKIm_3[14] = 18'sb111000001111001110;
  assign TableNorm32APSKIm_3[15] = 18'sb101101010000101011;
  assign TableNorm32APSKIm_3[16] = 18'sb000010111011101001;
  assign TableNorm32APSKIm_3[17] = 18'sb000010111100011110;
  assign TableNorm32APSKIm_3[18] = 18'sb111101000100010110;
  assign TableNorm32APSKIm_3[19] = 18'sb111101000011100001;
  assign TableNorm32APSKIm_3[20] = 18'sb000010111011101001;
  assign TableNorm32APSKIm_3[21] = 18'sb000010111100011110;
  assign TableNorm32APSKIm_3[22] = 18'sb111101000100010110;
  assign TableNorm32APSKIm_3[23] = 18'sb111101000011100001;
  assign TableNorm32APSKIm_3[24] = 18'sb000000000000000000;
  assign TableNorm32APSKIm_3[25] = 18'sb001110010101111010;
  assign TableNorm32APSKIm_3[26] = 18'sb111000001111001110;
  assign TableNorm32APSKIm_3[27] = 18'sb101101010000101011;
  assign TableNorm32APSKIm_3[28] = 18'sb000111110000110001;
  assign TableNorm32APSKIm_3[29] = 18'sb010010101111010100;
  assign TableNorm32APSKIm_3[30] = 18'sb000000000000000000;
  assign TableNorm32APSKIm_3[31] = 18'sb110001101010000101;
  assign apsk32NormReImRate2 = TableNorm32APSKIm_3[addr32APSKDelay];



  assign TableNorm32APSKIm_5[0] = 18'sb001000001000001100;
  assign TableNorm32APSKIm_5[1] = 18'sb001011000110100110;
  assign TableNorm32APSKIm_5[2] = 18'sb110111110111110011;
  assign TableNorm32APSKIm_5[3] = 18'sb110100111001011001;
  assign TableNorm32APSKIm_5[4] = 18'sb001000001000001100;
  assign TableNorm32APSKIm_5[5] = 18'sb001011000110100110;
  assign TableNorm32APSKIm_5[6] = 18'sb110111110111110011;
  assign TableNorm32APSKIm_5[7] = 18'sb110100111001011001;
  assign TableNorm32APSKIm_5[8] = 18'sb000111101110110011;
  assign TableNorm32APSKIm_5[9] = 18'sb010010101010100100;
  assign TableNorm32APSKIm_5[10] = 18'sb110001101101101101;
  assign TableNorm32APSKIm_5[11] = 18'sb101011110011000000;
  assign TableNorm32APSKIm_5[12] = 18'sb001110010010010010;
  assign TableNorm32APSKIm_5[13] = 18'sb010100001100111111;
  assign TableNorm32APSKIm_5[14] = 18'sb111000010001001100;
  assign TableNorm32APSKIm_5[15] = 18'sb101101010101011011;
  assign TableNorm32APSKIm_5[16] = 18'sb000010111110011001;
  assign TableNorm32APSKIm_5[17] = 18'sb000011000101000010;
  assign TableNorm32APSKIm_5[18] = 18'sb111101000001100110;
  assign TableNorm32APSKIm_5[19] = 18'sb111100111010111101;
  assign TableNorm32APSKIm_5[20] = 18'sb000010111110011001;
  assign TableNorm32APSKIm_5[21] = 18'sb000011000101000010;
  assign TableNorm32APSKIm_5[22] = 18'sb111101000001100110;
  assign TableNorm32APSKIm_5[23] = 18'sb111100111010111101;
  assign TableNorm32APSKIm_5[24] = 18'sb000000000000000000;
  assign TableNorm32APSKIm_5[25] = 18'sb001110010010010010;
  assign TableNorm32APSKIm_5[26] = 18'sb111000010001001100;
  assign TableNorm32APSKIm_5[27] = 18'sb101101010101011011;
  assign TableNorm32APSKIm_5[28] = 18'sb000111101110110011;
  assign TableNorm32APSKIm_5[29] = 18'sb010010101010100100;
  assign TableNorm32APSKIm_5[30] = 18'sb000000000000000000;
  assign TableNorm32APSKIm_5[31] = 18'sb110001101101101101;
  assign apsk32NormReImRate3 = TableNorm32APSKIm_5[addr32APSKDelay];



  assign TableNorm32APSKIm_7[0] = 18'sb001000010100101110;
  assign TableNorm32APSKIm_7[1] = 18'sb001011010111101101;
  assign TableNorm32APSKIm_7[2] = 18'sb110111101011010001;
  assign TableNorm32APSKIm_7[3] = 18'sb110100101000010010;
  assign TableNorm32APSKIm_7[4] = 18'sb001000010100101110;
  assign TableNorm32APSKIm_7[5] = 18'sb001011010111101101;
  assign TableNorm32APSKIm_7[6] = 18'sb110111101011010001;
  assign TableNorm32APSKIm_7[7] = 18'sb110100101000010010;
  assign TableNorm32APSKIm_7[8] = 18'sb000111101011011111;
  assign TableNorm32APSKIm_7[9] = 18'sb010010100010100011;
  assign TableNorm32APSKIm_7[10] = 18'sb110001110011110110;
  assign TableNorm32APSKIm_7[11] = 18'sb101011111011101011;
  assign TableNorm32APSKIm_7[12] = 18'sb001110001100001001;
  assign TableNorm32APSKIm_7[13] = 18'sb010100000100010100;
  assign TableNorm32APSKIm_7[14] = 18'sb111000010100100000;
  assign TableNorm32APSKIm_7[15] = 18'sb101101011101011100;
  assign TableNorm32APSKIm_7[16] = 18'sb000011000010111111;
  assign TableNorm32APSKIm_7[17] = 18'sb000011010001101110;
  assign TableNorm32APSKIm_7[18] = 18'sb111100111101000000;
  assign TableNorm32APSKIm_7[19] = 18'sb111100101110010001;
  assign TableNorm32APSKIm_7[20] = 18'sb000011000010111111;
  assign TableNorm32APSKIm_7[21] = 18'sb000011010001101110;
  assign TableNorm32APSKIm_7[22] = 18'sb111100111101000000;
  assign TableNorm32APSKIm_7[23] = 18'sb111100101110010001;
  assign TableNorm32APSKIm_7[24] = 18'sb000000000000000000;
  assign TableNorm32APSKIm_7[25] = 18'sb001110001100001001;
  assign TableNorm32APSKIm_7[26] = 18'sb111000010100100000;
  assign TableNorm32APSKIm_7[27] = 18'sb101101011101011100;
  assign TableNorm32APSKIm_7[28] = 18'sb000111101011011111;
  assign TableNorm32APSKIm_7[29] = 18'sb010010100010100011;
  assign TableNorm32APSKIm_7[30] = 18'sb000000000000000000;
  assign TableNorm32APSKIm_7[31] = 18'sb110001110011110110;
  assign apsk32NormReImRate4 = TableNorm32APSKIm_7[addr32APSKDelay];



  assign TableNorm32APSKIm_9[0] = 18'sb001000010101111101;
  assign TableNorm32APSKIm_9[1] = 18'sb001011011001011010;
  assign TableNorm32APSKIm_9[2] = 18'sb110111101010000010;
  assign TableNorm32APSKIm_9[3] = 18'sb110100100110100101;
  assign TableNorm32APSKIm_9[4] = 18'sb001000010101111101;
  assign TableNorm32APSKIm_9[5] = 18'sb001011011001011010;
  assign TableNorm32APSKIm_9[6] = 18'sb110111101010000010;
  assign TableNorm32APSKIm_9[7] = 18'sb110100100110100101;
  assign TableNorm32APSKIm_9[8] = 18'sb000111101011001001;
  assign TableNorm32APSKIm_9[9] = 18'sb010010100001101111;
  assign TableNorm32APSKIm_9[10] = 18'sb110001110100011110;
  assign TableNorm32APSKIm_9[11] = 18'sb101011111100100100;
  assign TableNorm32APSKIm_9[12] = 18'sb001110001011100001;
  assign TableNorm32APSKIm_9[13] = 18'sb010100000011011011;
  assign TableNorm32APSKIm_9[14] = 18'sb111000010100110110;
  assign TableNorm32APSKIm_9[15] = 18'sb101101011110010000;
  assign TableNorm32APSKIm_9[16] = 18'sb000011000011011100;
  assign TableNorm32APSKIm_9[17] = 18'sb000011010011000011;
  assign TableNorm32APSKIm_9[18] = 18'sb111100111100100011;
  assign TableNorm32APSKIm_9[19] = 18'sb111100101100111100;
  assign TableNorm32APSKIm_9[20] = 18'sb000011000011011100;
  assign TableNorm32APSKIm_9[21] = 18'sb000011010011000011;
  assign TableNorm32APSKIm_9[22] = 18'sb111100111100100011;
  assign TableNorm32APSKIm_9[23] = 18'sb111100101100111100;
  assign TableNorm32APSKIm_9[24] = 18'sb000000000000000000;
  assign TableNorm32APSKIm_9[25] = 18'sb001110001011100001;
  assign TableNorm32APSKIm_9[26] = 18'sb111000010100110110;
  assign TableNorm32APSKIm_9[27] = 18'sb101101011110010000;
  assign TableNorm32APSKIm_9[28] = 18'sb000111101011001001;
  assign TableNorm32APSKIm_9[29] = 18'sb010010100001101111;
  assign TableNorm32APSKIm_9[30] = 18'sb000000000000000000;
  assign TableNorm32APSKIm_9[31] = 18'sb110001110100011110;
  assign apsk32NormReImRate5 = TableNorm32APSKIm_9[addr32APSKDelay];



  assign apsk32NormImag = (codeRateIndx32APSKD2 == 3'b001 ? apsk32NormReImRate1 :
              (codeRateIndx32APSKD2 == 3'b010 ? apsk32NormReImRate2 :
              (codeRateIndx32APSKD2 == 3'b011 ? apsk32NormReImRate3 :
              (codeRateIndx32APSKD2 == 3'b100 ? apsk32NormReImRate4 :
              apsk32NormReImRate5))));



  always @(posedge clk or posedge reset)
    begin : delay_apsk32NormImag_process
      if (reset == 1'b1) begin
        apsk32NormImagD1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          apsk32NormImagD1 <= apsk32NormImag;
        end
      end
    end



  assign apsk32DataOutSymMod_re = (switch_compare_1_5 == 1'b0 ? apsk32UnNormRealD1 :
              apsk32NormRealD1);
  assign apsk32DataOutSymMod_im = (switch_compare_1_5 == 1'b0 ? apsk32UnNormImagD1 :
              apsk32NormImagD1);



  assign dataOutSymMod_re = (modIndxSigDelay2 == 3'b001 ? bpskdataOutSymModD1_re :
              (modIndxSigDelay2 == 3'b010 ? qpskdataOutSymModD1_re :
              (modIndxSigDelay2 == 3'b011 ? psk8dataOutSymModD1_re :
              (modIndxSigDelay2 == 3'b100 ? apsk16DataOutSymModD1_re :
              apsk32DataOutSymMod_re))));
  assign dataOutSymMod_im = (modIndxSigDelay2 == 3'b001 ? bpskdataOutSymModD1_im :
              (modIndxSigDelay2 == 3'b010 ? qpskdataOutSymModD1_im :
              (modIndxSigDelay2 == 3'b011 ? psk8dataOutSymModD1_im :
              (modIndxSigDelay2 == 3'b100 ? apsk16DataOutSymModD1_im :
              apsk32DataOutSymMod_im))));



  always @(posedge clk or posedge reset)
    begin : delay_dataOutSymMod_process
      if (reset == 1'b1) begin
        dataOutSymModD1_re <= 18'sb000000000000000000;
        dataOutSymModD1_im <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          dataOutSymModD1_re <= dataOutSymMod_re;
          dataOutSymModD1_im <= dataOutSymMod_im;
        end
      end
    end



  assign dataOut_re = (switch_compare_1_1 == 1'b0 ? ComplxZeroConst_re :
              dataOutSymModD1_re);
  assign dataOut_im = (switch_compare_1_1 == 1'b0 ? ComplxZeroConst_im :
              dataOutSymModD1_im);



  assign out0_re = dataOut_re;

  assign out0_im = dataOut_im;

  assign out1 = validOut;

endmodule  // dvbs2hdlTransmitterCore_DVB_S2_Symbol_Modulator1

