// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_buffInpGenAddrQPSK.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_buffInpGenAddrQPSK
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/Symbol Modulator/DVB-S2 Symbol Modulator1/buffInpGenAddrQPSK
// Hierarchy Level: 5
// Model version: 4.5
// 
// Buffer input data and generate address QPSK
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_buffInpGenAddrQPSK
          (clk,
           reset,
           enb,
           dataIn,
           validIn,
           resetIn,
           addrQPSK,
           addrQPSKValidOut);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;  // ufix1
  input   validIn;  // ufix1
  input   resetIn;  // ufix1
  output  [1:0] addrQPSK;  // ufix2
  output  addrQPSKValidOut;  // ufix1


  wire [1:0] Constant_out1;  // ufix2
  reg [1:0] Delay8_out1;  // ufix2
  wire HDL_Counter_ctrl_const_out;
  reg  HDL_Counter_ctrl_delay_out;
  wire [1:0] HDL_Counter_Initial_Val_out;  // ufix2
  wire [1:0] count_step;  // ufix2
  wire [1:0] count_from;  // ufix2
  wire [1:0] count_reset;  // ufix2
  wire [1:0] HDL_Counter_out1;  // ufix2
  wire [1:0] count;  // ufix2
  wire need_to_wrap;
  wire [1:0] count_value;  // ufix2
  wire [1:0] count_1;  // ufix2
  wire Relational_Operator_relop1;
  wire Logical_Operator5_out1;
  wire Logical_Operator12_out1;
  wire [1:0] count_2;  // ufix2
  reg [1:0] HDL_Counter_out;  // ufix2
  reg  Delay3_out1;
  wire Logical_Operator6_out1;
  reg [1:0] Delay_out1;  // ufix2
  wire Relational_Operator1_relop1;
  reg  Delay4_out1;
  wire Logical_Operator7_out1;
  wire Logical_Operator2_out1;
  reg [1:0] Delay7_out1;  // ufix2
  wire Compare_To_Constant8_out1;
  wire Constant_out1_1;  // ufix1
  wire switch_compare_1;
  wire Constant1_out1;  // ufix1
  wire [1:0] Bit_Concat1_out1;  // ufix2
  wire Compare_To_Constant5_out1;
  wire Logical_Operator_out1;
  wire Logical_Operator4_out1;
  reg  Delay1_delOut;  // ufix1
  wire Delay1_ectrl;  // ufix1
  wire Delay1_out1;  // ufix1
  reg  Delay1_last_value;  // ufix1
  wire Compare_To_Constant_out1;
  wire Logical_Operator1_out1;
  wire Logical_Operator3_out1;
  reg  Delay2_delOut;  // ufix1
  wire Delay2_ectrl;  // ufix1
  wire Delay2_out1;  // ufix1
  reg  Delay2_last_value;  // ufix1
  wire Logical_Operator14_out1;
  wire switch_compare_1_1;
  wire Constant3_out1;  // ufix1
  wire [1:0] Constant3_out1_dtc;  // ufix2
  wire [1:0] Bit_Concat_out1;  // ufix2
  wire [1:0] Switch1_out1;  // ufix2
  wire [1:0] Switch3_out1;  // ufix2


  assign Constant_out1 = 2'b10;



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= Constant_out1;
        end
      end
    end



  assign HDL_Counter_ctrl_const_out = 1'b1;



  always @(posedge clk or posedge reset)
    begin : HDL_Counter_ctrl_delay_process
      if (reset == 1'b1) begin
        HDL_Counter_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          HDL_Counter_ctrl_delay_out <= HDL_Counter_ctrl_const_out;
        end
      end
    end



  assign HDL_Counter_Initial_Val_out = 2'b01;



  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 2
  assign count_step = 2'b01;



  assign count_from = 2'b01;



  assign count_reset = 2'b01;



  assign count = HDL_Counter_out1 + count_step;



  assign need_to_wrap = HDL_Counter_out1 == 2'b10;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (validIn == 1'b0 ? HDL_Counter_out1 :
              count_value);



  assign Relational_Operator_relop1 = Constant_out1 == HDL_Counter_out1;



  assign Logical_Operator5_out1 = Relational_Operator_relop1 & validIn;



  assign Logical_Operator12_out1 = Logical_Operator5_out1 | resetIn;



  assign count_2 = (Logical_Operator12_out1 == 1'b0 ? count_1 :
              count_reset);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out <= 2'b00;
      end
      else begin
        if (enb) begin
          HDL_Counter_out <= count_2;
        end
      end
    end



  assign HDL_Counter_out1 = (HDL_Counter_ctrl_delay_out == 1'b0 ? HDL_Counter_Initial_Val_out :
              HDL_Counter_out);



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= validIn;
        end
      end
    end



  assign Logical_Operator6_out1 =  ~ resetIn;



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay_out1 <= HDL_Counter_out1;
        end
      end
    end



  assign Relational_Operator1_relop1 = Delay8_out1 == Delay_out1;



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Logical_Operator6_out1;
        end
      end
    end



  assign Logical_Operator7_out1 = Delay3_out1 & Delay4_out1;



  assign Logical_Operator2_out1 = Relational_Operator1_relop1 & Logical_Operator7_out1;



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Constant_out1;
        end
      end
    end



  assign Compare_To_Constant8_out1 = Delay7_out1 == 2'b10;



  assign Constant_out1_1 = 1'b0;



  assign switch_compare_1 = Logical_Operator2_out1 > 1'b0;



  assign Constant1_out1 = 1'b0;



  assign Bit_Concat1_out1 = {Constant_out1_1, Constant1_out1};



  assign Compare_To_Constant5_out1 = HDL_Counter_out1 == 2'b01;



  assign Logical_Operator_out1 = validIn & Compare_To_Constant5_out1;



  assign Logical_Operator4_out1 = Logical_Operator2_out1 | Logical_Operator_out1;



  assign Delay1_ectrl = (Logical_Operator4_out1 == 1'b0 ? Delay1_delOut :
              dataIn);



  always @(posedge clk or posedge reset)
    begin : Delay1_lowered_process
      if (reset == 1'b1) begin
        Delay1_delOut <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_delOut <= Delay1_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_bypass_process
      if (reset == 1'b1) begin
        Delay1_last_value <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_last_value <= Delay1_out1;
        end
      end
    end



  assign Delay1_out1 = (Logical_Operator4_out1 == 1'b0 ? Delay1_last_value :
              Delay1_delOut);



  assign Compare_To_Constant_out1 = HDL_Counter_out1 == 2'b10;



  assign Logical_Operator1_out1 = validIn & Compare_To_Constant_out1;



  assign Logical_Operator3_out1 = Logical_Operator2_out1 | Logical_Operator1_out1;



  assign Delay2_ectrl = (Logical_Operator3_out1 == 1'b0 ? Delay2_delOut :
              dataIn);



  always @(posedge clk or posedge reset)
    begin : Delay2_lowered_process
      if (reset == 1'b1) begin
        Delay2_delOut <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_delOut <= Delay2_ectrl;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_bypass_process
      if (reset == 1'b1) begin
        Delay2_last_value <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_last_value <= Delay2_out1;
        end
      end
    end



  assign Delay2_out1 = (Logical_Operator3_out1 == 1'b0 ? Delay2_last_value :
              Delay2_delOut);



  assign Logical_Operator14_out1 = Logical_Operator2_out1 & Compare_To_Constant8_out1;



  assign switch_compare_1_1 = Logical_Operator14_out1 > 1'b0;



  assign Constant3_out1 = 1'b0;



  assign Constant3_out1_dtc = {1'b0, Constant3_out1};



  assign Bit_Concat_out1 = {Delay1_out1, Delay2_out1};



  assign Switch1_out1 = (switch_compare_1 == 1'b0 ? Bit_Concat1_out1 :
              Bit_Concat_out1);



  assign Switch3_out1 = (switch_compare_1_1 == 1'b0 ? Constant3_out1_dtc :
              Switch1_out1);



  assign addrQPSK = Switch3_out1;

  assign addrQPSKValidOut = Logical_Operator2_out1;

endmodule  // dvbs2hdlTransmitterCore_buffInpGenAddrQPSK

