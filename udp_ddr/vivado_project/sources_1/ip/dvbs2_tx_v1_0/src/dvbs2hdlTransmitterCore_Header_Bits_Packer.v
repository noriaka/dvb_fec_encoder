// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_Header_Bits_Packer.v
// Created: 2024-01-10 13:49:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_Header_Bits_Packer
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/PL Frame Generator/PL Header Generator/PL Header Bits Generator/Header 
// Bits Packe
// Hierarchy Level: 6
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_Header_Bits_Packer
          (clk,
           reset,
           enb_1_16_0,
           trigger,
           pilotActive,
           modcod,
           fecframe,
           bit7,
           bits1to6,
           start,
           valid);


  input   clk;
  input   reset;
  input   enb_1_16_0;
  input   trigger;
  input   pilotActive;
  input   [4:0] modcod;  // ufix5
  input   fecframe;  // ufix1
  output  bit7;
  output  bits1to6;  // ufix1
  output  start;
  output  valid;


  reg  bit7_1;
  reg  bits1to6_1;  // ufix1
  reg  start_1;
  reg  valid_1;
  reg  pPilot;
  reg [5:0] pModcodFecFrame;  // ufix6
  reg [2:0] count;  // ufix3
  reg  countActive;
  reg  pPilot_next;
  reg [5:0] pModcodFecFrame_next;  // ufix6
  reg [2:0] count_next;  // ufix3
  reg  countActive_next;
  reg [4:0] c;  // ufix5
  reg [7:0] bit_idx;  // uint8
  reg [3:0] sub_temp;  // ufix4
  reg signed [31:0] sub_temp_0;  // int32
  reg [4:0] t_0;  // ufix5
  reg [3:0] t_1;  // ufix4
  reg signed [31:0] t_2;  // int32


  always @(posedge clk or posedge reset)
    begin : Header_Bits_Packer_process
      if (reset == 1'b1) begin
        pPilot <= 1'b0;
        pModcodFecFrame <= 6'b000000;
        count <= 3'b000;
        countActive <= 1'b0;
      end
      else begin
        if (enb_1_16_0) begin
          pPilot <= pPilot_next;
          pModcodFecFrame <= pModcodFecFrame_next;
          count <= count_next;
          countActive <= countActive_next;
        end
      end
    end

  always @(count, countActive, fecframe, modcod, pModcodFecFrame, pPilot, pilotActive,
       trigger) begin
    sub_temp_0 = 32'sd0;
    t_2 = 32'sd0;
    bit_idx = 8'd0;
    pPilot_next = pPilot;
    pModcodFecFrame_next = pModcodFecFrame;
    count_next = count;
    countActive_next = countActive;
    t_1 = {1'b0, count};
    sub_temp = 4'b0101 - t_1;
    t_0 = {1'b0, sub_temp};
    c = t_0 + 5'b00001;
    if (c <= 5'b00110) begin
      t_2 = {27'b0, c};
      sub_temp_0 = t_2 - 32'sd1;
      bit_idx = sub_temp_0[7:0];
      bits1to6_1 = pModcodFecFrame[bit_idx];
    end
    else begin
      bits1to6_1 = 1'b0;
    end
    start_1 = (count == 3'b000) && countActive;
    if (countActive) begin
      if (count == 3'b101) begin
        count_next = 3'b000;
        countActive_next = 1'b0;
      end
      else begin
        count_next = count + 3'b001;
      end
    end
    if (trigger) begin
      pPilot_next = pilotActive;
      pModcodFecFrame_next = {modcod, fecframe};
      countActive_next = 1'b1;
    end
    bit7_1 = pPilot;
    valid_1 = countActive;
  end



  assign bit7 = bit7_1;

  assign bits1to6 = bits1to6_1;

  assign start = start_1;

  assign valid = valid_1;

endmodule  // dvbs2hdlTransmitterCore_Header_Bits_Packer

