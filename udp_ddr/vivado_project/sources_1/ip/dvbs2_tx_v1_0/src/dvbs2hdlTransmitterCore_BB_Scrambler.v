// -------------------------------------------------------------
// 
// File Name: F:\FileFolder\DVB\dvbs2_tx_new\hdlsrc\dvbs2hdlTransmitter\dvbs2hdlTransmitterCore\dvbs2hdlTransmitterCore_BB_Scrambler.v
// Created: 2024-01-10 13:49:57
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dvbs2hdlTransmitterCore_BB_Scrambler
// Source Path: dvbs2hdlTransmitterCore/DVB-S2 Tx/BB Frame Generator/BB Scrambler
// Hierarchy Level: 4
// Model version: 4.5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dvbs2hdlTransmitterCore_BB_Scrambler
          (clk,
           reset,
           enb,
           bitsIn,
           startIn,
           endIn,
           validIn,
           MODCOD,
           FECFrame,
           bitsOut,
           startOut,
           endOut,
           validOut,
           MODCODOut,
           FECFrameOut);


  input   clk;
  input   reset;
  input   enb;
  input   bitsIn;
  input   startIn;
  input   endIn;
  input   validIn;
  input   [4:0] MODCOD;  // ufix5
  input   FECFrame;
  output  bitsOut;
  output  startOut;
  output  endOut;
  output  validOut;
  output  [4:0] MODCODOut;  // ufix5
  output  FECFrameOut;


  wire Subsystem_out1;  // ufix1
  wire Data_Type_Conversion_out1;
  wire Logical_Operator_out1;
  reg  Delay2_out1;
  reg  Delay3_out1;
  reg  Delay1_out1;
  reg  Delay5_out1;
  reg [4:0] Delay4_out1;  // ufix5
  reg  Delay6_out1;


  dvbs2hdlTransmitterCore_Subsystem u_Subsystem (.clk(clk),
                                                 .reset(reset),
                                                 .enb(enb),
                                                 .In1(startIn),
                                                 .Enable(validIn),
                                                 .Out1(Subsystem_out1)  // ufix1
                                                 );

  assign Data_Type_Conversion_out1 = Subsystem_out1;



  assign Logical_Operator_out1 = Data_Type_Conversion_out1 ^ bitsIn;



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Logical_Operator_out1;
        end
      end
    end



  assign bitsOut = Delay2_out1;

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= startIn;
        end
      end
    end



  assign startOut = Delay3_out1;

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= endIn;
        end
      end
    end



  assign endOut = Delay1_out1;

  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= validIn;
        end
      end
    end



  assign validOut = Delay5_out1;

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= MODCOD;
        end
      end
    end



  assign MODCODOut = Delay4_out1;

  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= FECFrame;
        end
      end
    end



  assign FECFrameOut = Delay6_out1;

endmodule  // dvbs2hdlTransmitterCore_BB_Scrambler

